module.exports = (function() {
		  "use strict";

		  /*
		   * Generated by PEG.js 0.9.0.
		   *
		   * http://pegjs.org/
		   */

		  function peg$subclass(child, parent) {
		    function ctor() { this.constructor = child; }
		    ctor.prototype = parent.prototype;
		    child.prototype = new ctor();
		  }

		  function peg$SyntaxError(message, expected, found, location) {
		    this.message  = message;
		    this.expected = expected;
		    this.found    = found;
		    this.location = location;
		    this.name     = "SyntaxError";

		    if (typeof Error.captureStackTrace === "function") {
		      Error.captureStackTrace(this, peg$SyntaxError);
		    }
		  }

		  peg$subclass(peg$SyntaxError, Error);

		  function peg$parse(input) {
		    var options = arguments.length > 1 ? arguments[1] : {},
		        parser  = this,

		        peg$FAILED = {},

		        peg$startRuleFunctions = { start: peg$parsestart },
		        peg$startRuleFunction  = peg$parsestart,

		        peg$c0 = function(r) { return filter(flatten(r, true), ';') },
		        peg$c1 = function(explain, stmt) { return put_if_not_null(stmt, "explain", nonempty(flatstr(explain))) },
		        peg$c2 = function(clause_def, cname, clause_att, query_def, outer_query) { var res = {};
		            	res.clause_name = cname;
		                res.clause_att = filter(flatten(clause_att),',');
		                res.query_def = query_def;
		                res.outer_query = outer_query;
		            	return res;
		            },
		        peg$c3 = function(c) {return c;},
		        peg$c4 = function(x) { return { literal: x } },
		        peg$c5 = function(b) { return { bind: b } },
		        peg$c6 = function(t) { return { column: t[2], table: t[0] } },
		        peg$c7 = function(c) { return { column: c } },
		        peg$c8 = function(v) { return v[1] },
		        peg$c9 = function(e) { return e[1]; },
		        peg$c10 = function(digits) { return digits; 
		          var x = flatstr(digits);
		          
		          	return x;
		            if (x.indexOf('.') >= 0) {
		              return parseFloat(x);
		            }
		            return parseInt(x);
		          },
		        peg$c11 = function(sc) { var acc = [];
		                                    for (var i = 0; i < sc.length; i++) {
		                                      acc[i] = merge(sc[i][0], sc[i][1]);
		                                    }
		                                    return acc;
		                                  },
		        peg$c12 = function(select_cores, order_by, limit) { var res = { stmt: "select",
		                        select_cores: flatten(select_cores, true) };
		            res = put_if_not_null(res, "order_by", nonempty(order_by));
		            res = put_if_not_null(res, "limit", nonempty(limit));
		            return res;
		          },
		        peg$c13 = function(d, cx) { var acc = [];
		                                for (var i = 0; i < cx.length; i++) {
		                                  acc[i] = cx[i][2];
		                                }
		                                return acc;
		                              },
		        peg$c14 = function(d, c, j) { return j ? j[1] : [] },
		        peg$c15 = function(d, c, f, e) { return e ? e[1] : [] },
		        peg$c16 = function(d, c, f, w, g) { c[1].unshift(c[0]);
		            var res = { results: c[1] };
		            res = put_if_not_null(res, "distinct", nonempty(flatstr(d)));
		            res = put_if_not_null(res, "from", nonempty(f));
		            res = put_if_not_null(res, "where", nonempty(w));
		            res = put_if_not_null(res, "group_by", nonempty(g));
		            return res;
		          },
		        peg$c17 = function(a) { return { alias: a[2] } },
		        peg$c18 = function(c) { return merge(c[1], c[0]) },
		        peg$c19 = function(c) {
		                         return merge(c[1],c[0]);
		                        },
		        peg$c20 = function(c) {
		                        return merge(c[1],c[0]);
		                        
		                        
		                        var flat = flatten(c,true)
		                        var ret = {};
		                        ret.func = c[0][0];
		                        ret.att = [];
		                        var first = c[0][3][1].join("");
		                        ret.att.push(first);
		                        
		                        var temp = c[0][4]
		                        for(var i in temp){
		                        	ret.att.push(temp[i][1][1].join(""));
		                        }
		                        return merge(c[1],ret);
		                        },
		        peg$c21 = function(c) { return { table: c[0],
		                                 column: '*' } },
		        peg$c22 = function() { return { column: '*' } },
		        peg$c23 = function(c) {return merge(c[1],{string:c[0][1].join("")}) },
		        peg$c24 = function(c) {return merge(c[1],{numeric:c[0]})},
		        peg$c25 = function(r) { return r[1] },
		        peg$c26 = function(s) { var acc = [s[1]];
		            var rest = s[2];
		            for (var i = 0; rest != null && i < rest.length; i++) {
		              acc[acc.length] = merge(merge(rest[i][0], rest[i][2]), rest[i][3]);
		            }
		            return acc;
		          },
		        peg$c27 = function(x) { return { database: x[0], table: x[2], alias: x[5] } },
		        peg$c28 = function(x) { return { database: x[0], table: x[2] } },
		        peg$c29 = function(x) { return { table: x[0], alias: x[3] } },
		        peg$c30 = function(x) { return { table: x } },
		        peg$c31 = function(t) { return merge(t[1], t[0]) },
		        peg$c32 = function(idx) { return { indexed_by: idx[3] } },
		        peg$c33 = function() { return { indexed_by: null } },
		        peg$c34 = function(s) { return merge(s[1], s[0]) },
		        peg$c35 = function(p) { return merge(p[3], p[1]) },
		        peg$c36 = function(j) { return j[1] },
		        peg$c37 = function() { return "JOIN" },
		        peg$c38 = function(j) { return flatstr(j) },
		        peg$c39 = function(r) { return { join_op: r } },
		        peg$c40 = function(r) { return { join_constraint: nonempty(r) } },
		        peg$c41 = function(o) { return { compound_operator: flatstr(o) } },
		        peg$c42 = function(d) { return { database: d[0] } },
		        peg$c43 = function(r) { return merge(r[1], r[0]) },
		        peg$c44 = function(t) { return { table: t[0] } },
		        peg$c45 = function(x) { return { column: x } },
		        peg$c46 = function(a) { return merge(a[3],{ agg: a[0] } ) },
		        peg$c47 = function(c) {var ret = {};
		            ret.func = c[0];
		            var first = c[3][0];

		        	if(!first.hasOwnProperty("column")){
		        		first = flatstr(first);
		            }
		            
		        	ret.att = [];
		            ret.att.push(first);
		            var rest = c[3][1];
		            
		            for(var i in rest){
		        		ret.att.push(flatstr(rest[i][1]));
		                if(!rest[i][3].hasOwnProperty("column")){
		                	ret.att.push(flatstr(rest[i][3]));
		                }
		            	else{
		                	ret.att.push(rest[i][3]);
		                }
		            }
		            

		            return ret;
		            },
		        peg$c48 = function(h) {var ret = {};
		            ret.func = h[0];
		        	ret.att = [];
		            
		            if(h[3].hasOwnProperty("column")){
		            	ret.att.push(h[3]);
		            }
		            else{
		            	ret.att.push(h[3][1].join(""));
		            }
		            
		            for(var i = 0; i < h[4].length; i++){
		            	if(h[4][i][2].hasOwnProperty("column")){
		                	ret.att.push(h[4][i][2]);
		                }
		                else{
		            		ret.att.push(h[4][i][2][1].join(""));
		                }
		            }
		            
		            return ret; },
		        peg$c49 = ".",
		        peg$c50 = { type: "literal", value: ".", description: "\".\"" },
		        peg$c51 = ",",
		        peg$c52 = { type: "literal", value: ",", description: "\",\"" },
		        peg$c53 = ";",
		        peg$c54 = { type: "literal", value: ";", description: "\";\"" },
		        peg$c55 = "--",
		        peg$c56 = { type: "literal", value: "--", description: "\"--\"" },
		        peg$c57 = "-",
		        peg$c58 = { type: "literal", value: "-", description: "\"-\"" },
		        peg$c59 = "+",
		        peg$c60 = { type: "literal", value: "+", description: "\"+\"" },
		        peg$c61 = "/",
		        peg$c62 = { type: "literal", value: "/", description: "\"/\"" },
		        peg$c63 = "%",
		        peg$c64 = { type: "literal", value: "%", description: "\"%\"" },
		        peg$c65 = "(",
		        peg$c66 = { type: "literal", value: "(", description: "\"(\"" },
		        peg$c67 = ")",
		        peg$c68 = { type: "literal", value: ")", description: "\")\"" },
		        peg$c69 = "*",
		        peg$c70 = { type: "literal", value: "*", description: "\"*\"" },
		        peg$c71 = "\n",
		        peg$c72 = { type: "literal", value: "\n", description: "\"\\n\"" },
		        peg$c73 = /^[^\n]/,
		        peg$c74 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
		        peg$c75 = "/*",
		        peg$c76 = { type: "literal", value: "/*", description: "\"/*\"" },
		        peg$c77 = "*/",
		        peg$c78 = { type: "literal", value: "*/", description: "\"*/\"" },
		        peg$c79 = { type: "any", description: "any character" },
		        peg$c80 = "\"",
		        peg$c81 = { type: "literal", value: "\"", description: "\"\\\"\"" },
		        peg$c82 = /^[^"]/,
		        peg$c83 = { type: "class", value: "[^\"]", description: "[^\"]" },
		        peg$c84 = "\\",
		        peg$c85 = { type: "literal", value: "\\", description: "\"\\\\\"" },
		        peg$c86 = "",
		        peg$c87 = /^[ \t\n\r]/,
		        peg$c88 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
		        peg$c89 = "~",
		        peg$c90 = { type: "literal", value: "~", description: "\"~\"" },
		        peg$c91 = "not",
		        peg$c92 = { type: "literal", value: "NOT", description: "\"NOT\"" },
		        peg$c93 = function(x) { return x[1] },
		        peg$c94 = "||",
		        peg$c95 = { type: "literal", value: "||", description: "\"||\"" },
		        peg$c96 = "<<",
		        peg$c97 = { type: "literal", value: "<<", description: "\"<<\"" },
		        peg$c98 = ">>",
		        peg$c99 = { type: "literal", value: ">>", description: "\">>\"" },
		        peg$c100 = "&",
		        peg$c101 = { type: "literal", value: "&", description: "\"&\"" },
		        peg$c102 = "|",
		        peg$c103 = { type: "literal", value: "|", description: "\"|\"" },
		        peg$c104 = "<=",
		        peg$c105 = { type: "literal", value: "<=", description: "\"<=\"" },
		        peg$c106 = ">=",
		        peg$c107 = { type: "literal", value: ">=", description: "\">=\"" },
		        peg$c108 = "<",
		        peg$c109 = { type: "literal", value: "<", description: "\"<\"" },
		        peg$c110 = ">",
		        peg$c111 = { type: "literal", value: ">", description: "\">\"" },
		        peg$c112 = "=",
		        peg$c113 = { type: "literal", value: "=", description: "\"=\"" },
		        peg$c114 = "==",
		        peg$c115 = { type: "literal", value: "==", description: "\"==\"" },
		        peg$c116 = "!=",
		        peg$c117 = { type: "literal", value: "!=", description: "\"!=\"" },
		        peg$c118 = "<>",
		        peg$c119 = { type: "literal", value: "<>", description: "\"<>\"" },
		        peg$c120 = "is",
		        peg$c121 = { type: "literal", value: "IS", description: "\"IS\"" },
		        peg$c122 = "is not",
		        peg$c123 = { type: "literal", value: "IS NOT", description: "\"IS NOT\"" },
		        peg$c124 = "in",
		        peg$c125 = { type: "literal", value: "IN", description: "\"IN\"" },
		        peg$c126 = "like",
		        peg$c127 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
		        peg$c128 = "glob",
		        peg$c129 = { type: "literal", value: "GLOB", description: "\"GLOB\"" },
		        peg$c130 = "match",
		        peg$c131 = { type: "literal", value: "MATCH", description: "\"MATCH\"" },
		        peg$c132 = "regexp",
		        peg$c133 = { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
		        peg$c134 = "and",
		        peg$c135 = { type: "literal", value: "AND", description: "\"AND\"" },
		        peg$c136 = "or",
		        peg$c137 = { type: "literal", value: "OR", description: "\"OR\"" },
		        peg$c138 = "count",
		        peg$c139 = { type: "literal", value: "COUNT", description: "\"COUNT\"" },
		        peg$c140 = "sum",
		        peg$c141 = { type: "literal", value: "SUM", description: "\"SUM\"" },
		        peg$c142 = "avg",
		        peg$c143 = { type: "literal", value: "AVG", description: "\"AVG\"" },
		        peg$c144 = "min",
		        peg$c145 = { type: "literal", value: "MIN", description: "\"MIN\"" },
		        peg$c146 = "max",
		        peg$c147 = { type: "literal", value: "MAX", description: "\"MAX\"" },
		        peg$c148 = "concat",
		        peg$c149 = { type: "literal", value: "CONCAT", description: "\"CONCAT\"" },
		        peg$c150 = "add",
		        peg$c151 = { type: "literal", value: "ADD", description: "\"ADD\"" },
		        peg$c152 = "calc",
		        peg$c153 = { type: "literal", value: "CALC", description: "\"CALC\"" },
		        peg$c154 = /^[0-9]/,
		        peg$c155 = { type: "class", value: "[0-9]", description: "[0-9]" },
		        peg$c156 = /^[A-Za-z_]/,
		        peg$c157 = { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
		        peg$c158 = function(str) { return str.join('') },
		        peg$c159 = "?",
		        peg$c160 = { type: "literal", value: "?", description: "\"?\"" },
		        peg$c161 = "now",
		        peg$c162 = { type: "literal", value: "now", description: "\"now\"" },
		        peg$c163 = "abort",
		        peg$c164 = { type: "literal", value: "ABORT", description: "\"ABORT\"" },
		        peg$c165 = "action",
		        peg$c166 = { type: "literal", value: "ACTION", description: "\"ACTION\"" },
		        peg$c167 = "after",
		        peg$c168 = { type: "literal", value: "AFTER", description: "\"AFTER\"" },
		        peg$c169 = "all",
		        peg$c170 = { type: "literal", value: "ALL", description: "\"ALL\"" },
		        peg$c171 = "alter",
		        peg$c172 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
		        peg$c173 = "analyze",
		        peg$c174 = { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
		        peg$c175 = "as",
		        peg$c176 = { type: "literal", value: "AS", description: "\"AS\"" },
		        peg$c177 = "asc",
		        peg$c178 = { type: "literal", value: "ASC", description: "\"ASC\"" },
		        peg$c179 = "attach",
		        peg$c180 = { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
		        peg$c181 = "autoincrement",
		        peg$c182 = { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
		        peg$c183 = "before",
		        peg$c184 = { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
		        peg$c185 = "begin",
		        peg$c186 = { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
		        peg$c187 = "between",
		        peg$c188 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
		        peg$c189 = "by",
		        peg$c190 = { type: "literal", value: "BY", description: "\"BY\"" },
		        peg$c191 = "cascade",
		        peg$c192 = { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
		        peg$c193 = "case",
		        peg$c194 = { type: "literal", value: "CASE", description: "\"CASE\"" },
		        peg$c195 = "cast",
		        peg$c196 = { type: "literal", value: "CAST", description: "\"CAST\"" },
		        peg$c197 = "check",
		        peg$c198 = { type: "literal", value: "CHECK", description: "\"CHECK\"" },
		        peg$c199 = "collate",
		        peg$c200 = { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
		        peg$c201 = "column",
		        peg$c202 = { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
		        peg$c203 = "commit",
		        peg$c204 = { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
		        peg$c205 = "conflict",
		        peg$c206 = { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
		        peg$c207 = "constraint",
		        peg$c208 = { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
		        peg$c209 = "create",
		        peg$c210 = { type: "literal", value: "CREATE", description: "\"CREATE\"" },
		        peg$c211 = "cross",
		        peg$c212 = { type: "literal", value: "CROSS", description: "\"CROSS\"" },
		        peg$c213 = "database",
		        peg$c214 = { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
		        peg$c215 = "default",
		        peg$c216 = { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
		        peg$c217 = "deferrable",
		        peg$c218 = { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
		        peg$c219 = "deferred",
		        peg$c220 = { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
		        peg$c221 = "delete",
		        peg$c222 = { type: "literal", value: "DELETE", description: "\"DELETE\"" },
		        peg$c223 = "desc",
		        peg$c224 = { type: "literal", value: "DESC", description: "\"DESC\"" },
		        peg$c225 = "detach",
		        peg$c226 = { type: "literal", value: "DETACH", description: "\"DETACH\"" },
		        peg$c227 = "distinct",
		        peg$c228 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
		        peg$c229 = "drop",
		        peg$c230 = { type: "literal", value: "DROP", description: "\"DROP\"" },
		        peg$c231 = "e",
		        peg$c232 = { type: "literal", value: "E", description: "\"E\"" },
		        peg$c233 = "each",
		        peg$c234 = { type: "literal", value: "EACH", description: "\"EACH\"" },
		        peg$c235 = "else",
		        peg$c236 = { type: "literal", value: "ELSE", description: "\"ELSE\"" },
		        peg$c237 = "end",
		        peg$c238 = { type: "literal", value: "END", description: "\"END\"" },
		        peg$c239 = "escape",
		        peg$c240 = { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
		        peg$c241 = "except",
		        peg$c242 = { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
		        peg$c243 = "exclusive",
		        peg$c244 = { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
		        peg$c245 = "exists",
		        peg$c246 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
		        peg$c247 = "explain",
		        peg$c248 = { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
		        peg$c249 = "fail",
		        peg$c250 = { type: "literal", value: "FAIL", description: "\"FAIL\"" },
		        peg$c251 = "for",
		        peg$c252 = { type: "literal", value: "FOR", description: "\"FOR\"" },
		        peg$c253 = "foreign",
		        peg$c254 = { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
		        peg$c255 = "from",
		        peg$c256 = { type: "literal", value: "FROM", description: "\"FROM\"" },
		        peg$c257 = "full",
		        peg$c258 = { type: "literal", value: "FULL", description: "\"FULL\"" },
		        peg$c259 = "group",
		        peg$c260 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
		        peg$c261 = "having",
		        peg$c262 = { type: "literal", value: "HAVING", description: "\"HAVING\"" },
		        peg$c263 = "if",
		        peg$c264 = { type: "literal", value: "IF", description: "\"IF\"" },
		        peg$c265 = "ignore",
		        peg$c266 = { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
		        peg$c267 = "immediate",
		        peg$c268 = { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
		        peg$c269 = "index",
		        peg$c270 = { type: "literal", value: "INDEX", description: "\"INDEX\"" },
		        peg$c271 = "indexed",
		        peg$c272 = { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
		        peg$c273 = "initially",
		        peg$c274 = { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
		        peg$c275 = "inner",
		        peg$c276 = { type: "literal", value: "INNER", description: "\"INNER\"" },
		        peg$c277 = "insert",
		        peg$c278 = { type: "literal", value: "INSERT", description: "\"INSERT\"" },
		        peg$c279 = "instead",
		        peg$c280 = { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
		        peg$c281 = "intersect",
		        peg$c282 = { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
		        peg$c283 = "into",
		        peg$c284 = { type: "literal", value: "INTO", description: "\"INTO\"" },
		        peg$c285 = "isnull",
		        peg$c286 = { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
		        peg$c287 = "join",
		        peg$c288 = { type: "literal", value: "JOIN", description: "\"JOIN\"" },
		        peg$c289 = "key",
		        peg$c290 = { type: "literal", value: "KEY", description: "\"KEY\"" },
		        peg$c291 = "left",
		        peg$c292 = { type: "literal", value: "LEFT", description: "\"LEFT\"" },
		        peg$c293 = "limit",
		        peg$c294 = { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
		        peg$c295 = "natural",
		        peg$c296 = { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
		        peg$c297 = "no",
		        peg$c298 = { type: "literal", value: "NO", description: "\"NO\"" },
		        peg$c299 = "notnull",
		        peg$c300 = { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
		        peg$c301 = "null",
		        peg$c302 = { type: "literal", value: "NULL", description: "\"NULL\"" },
		        peg$c303 = "of",
		        peg$c304 = { type: "literal", value: "OF", description: "\"OF\"" },
		        peg$c305 = "offset",
		        peg$c306 = { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
		        peg$c307 = "on",
		        peg$c308 = { type: "literal", value: "ON", description: "\"ON\"" },
		        peg$c309 = "order",
		        peg$c310 = { type: "literal", value: "ORDER", description: "\"ORDER\"" },
		        peg$c311 = "outer",
		        peg$c312 = { type: "literal", value: "OUTER", description: "\"OUTER\"" },
		        peg$c313 = "plan",
		        peg$c314 = { type: "literal", value: "PLAN", description: "\"PLAN\"" },
		        peg$c315 = "pragma",
		        peg$c316 = { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
		        peg$c317 = "primary",
		        peg$c318 = { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
		        peg$c319 = "query",
		        peg$c320 = { type: "literal", value: "QUERY", description: "\"QUERY\"" },
		        peg$c321 = "raise",
		        peg$c322 = { type: "literal", value: "RAISE", description: "\"RAISE\"" },
		        peg$c323 = "references",
		        peg$c324 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
		        peg$c325 = "reindex",
		        peg$c326 = { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
		        peg$c327 = "release",
		        peg$c328 = { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
		        peg$c329 = "rename",
		        peg$c330 = { type: "literal", value: "RENAME", description: "\"RENAME\"" },
		        peg$c331 = "replace",
		        peg$c332 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
		        peg$c333 = "restrict",
		        peg$c334 = { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
		        peg$c335 = "right",
		        peg$c336 = { type: "literal", value: "RIGHT", description: "\"RIGHT\"" },
		        peg$c337 = "rollback",
		        peg$c338 = { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
		        peg$c339 = "row",
		        peg$c340 = { type: "literal", value: "ROW", description: "\"ROW\"" },
		        peg$c341 = "savepoint",
		        peg$c342 = { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
		        peg$c343 = "select",
		        peg$c344 = { type: "literal", value: "SELECT", description: "\"SELECT\"" },
		        peg$c345 = "set",
		        peg$c346 = { type: "literal", value: "SET", description: "\"SET\"" },
		        peg$c347 = "table",
		        peg$c348 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
		        peg$c349 = "temp",
		        peg$c350 = { type: "literal", value: "TEMP", description: "\"TEMP\"" },
		        peg$c351 = "temporary",
		        peg$c352 = { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
		        peg$c353 = "then",
		        peg$c354 = { type: "literal", value: "THEN", description: "\"THEN\"" },
		        peg$c355 = "to",
		        peg$c356 = { type: "literal", value: "TO", description: "\"TO\"" },
		        peg$c357 = "transaction",
		        peg$c358 = { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
		        peg$c359 = "trigger",
		        peg$c360 = { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
		        peg$c361 = "union",
		        peg$c362 = { type: "literal", value: "UNION", description: "\"UNION\"" },
		        peg$c363 = "unique",
		        peg$c364 = { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
		        peg$c365 = "update",
		        peg$c366 = { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
		        peg$c367 = "using",
		        peg$c368 = { type: "literal", value: "USING", description: "\"USING\"" },
		        peg$c369 = "vacuum",
		        peg$c370 = { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
		        peg$c371 = "values",
		        peg$c372 = { type: "literal", value: "VALUES", description: "\"VALUES\"" },
		        peg$c373 = "view",
		        peg$c374 = { type: "literal", value: "VIEW", description: "\"VIEW\"" },
		        peg$c375 = "virtual",
		        peg$c376 = { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
		        peg$c377 = "when",
		        peg$c378 = { type: "literal", value: "WHEN", description: "\"WHEN\"" },
		        peg$c379 = "where",
		        peg$c380 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
		        peg$c381 = "with",
		        peg$c382 = { type: "literal", value: "WITH", description: "\"WITH\"" },

		        peg$currPos          = 0,
		        peg$savedPos         = 0,
		        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
		        peg$maxFailPos       = 0,
		        peg$maxFailExpected  = [],
		        peg$silentFails      = 0,

		        peg$result;

		    if ("startRule" in options) {
		      if (!(options.startRule in peg$startRuleFunctions)) {
		        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
		      }

		      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		    }

		    function text() {
		      return input.substring(peg$savedPos, peg$currPos);
		    }

		    function location() {
		      return peg$computeLocation(peg$savedPos, peg$currPos);
		    }

		    function expected(description) {
		      throw peg$buildException(
		        null,
		        [{ type: "other", description: description }],
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function error(message) {
		      throw peg$buildException(
		        message,
		        null,
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function peg$computePosDetails(pos) {
		      var details = peg$posDetailsCache[pos],
		          p, ch;

		      if (details) {
		        return details;
		      } else {
		        p = pos - 1;
		        while (!peg$posDetailsCache[p]) {
		          p--;
		        }

		        details = peg$posDetailsCache[p];
		        details = {
		          line:   details.line,
		          column: details.column,
		          seenCR: details.seenCR
		        };

		        while (p < pos) {
		          ch = input.charAt(p);
		          if (ch === "\n") {
		            if (!details.seenCR) { details.line++; }
		            details.column = 1;
		            details.seenCR = false;
		          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
		            details.line++;
		            details.column = 1;
		            details.seenCR = true;
		          } else {
		            details.column++;
		            details.seenCR = false;
		          }

		          p++;
		        }

		        peg$posDetailsCache[pos] = details;
		        return details;
		      }
		    }

		    function peg$computeLocation(startPos, endPos) {
		      var startPosDetails = peg$computePosDetails(startPos),
		          endPosDetails   = peg$computePosDetails(endPos);

		      return {
		        start: {
		          offset: startPos,
		          line:   startPosDetails.line,
		          column: startPosDetails.column
		        },
		        end: {
		          offset: endPos,
		          line:   endPosDetails.line,
		          column: endPosDetails.column
		        }
		      };
		    }

		    function peg$fail(expected) {
		      if (peg$currPos < peg$maxFailPos) { return; }

		      if (peg$currPos > peg$maxFailPos) {
		        peg$maxFailPos = peg$currPos;
		        peg$maxFailExpected = [];
		      }

		      peg$maxFailExpected.push(expected);
		    }

		    function peg$buildException(message, expected, found, location) {
		      function cleanupExpected(expected) {
		        var i = 1;

		        expected.sort(function(a, b) {
		          if (a.description < b.description) {
		            return -1;
		          } else if (a.description > b.description) {
		            return 1;
		          } else {
		            return 0;
		          }
		        });

		        while (i < expected.length) {
		          if (expected[i - 1] === expected[i]) {
		            expected.splice(i, 1);
		          } else {
		            i++;
		          }
		        }
		      }

		      function buildMessage(expected, found) {
		        function stringEscape(s) {
		          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

		          return s
		            .replace(/\\/g,   '\\\\')
		            .replace(/"/g,    '\\"')
		            .replace(/\x08/g, '\\b')
		            .replace(/\t/g,   '\\t')
		            .replace(/\n/g,   '\\n')
		            .replace(/\f/g,   '\\f')
		            .replace(/\r/g,   '\\r')
		            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
		            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
		            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
		            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
		        }

		        var expectedDescs = new Array(expected.length),
		            expectedDesc, foundDesc, i;

		        for (i = 0; i < expected.length; i++) {
		          expectedDescs[i] = expected[i].description;
		        }

		        expectedDesc = expected.length > 1
		          ? expectedDescs.slice(0, -1).join(", ")
		              + " or "
		              + expectedDescs[expected.length - 1]
		          : expectedDescs[0];

		        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

		        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
		      }

		      if (expected !== null) {
		        cleanupExpected(expected);
		      }

		      return new peg$SyntaxError(
		        message !== null ? message : buildMessage(expected, found),
		        expected,
		        found,
		        location
		      );
		    }

		    function peg$parsestart() {
		      var s0;

		      s0 = peg$parsesql_stmt_list();

		      return s0;
		    }

		    function peg$parsesql_stmt_list() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewith_clause();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsewhitespace();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsesql_stmt();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsewhitespace();
		            if (s4 !== peg$FAILED) {
		              s2 = [s2, s3, s4];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c0(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsesql_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseEXPLAIN();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseQUERY();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsePLAN();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseselect_stmt();
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c1(s1, s2);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsewith_clause() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

		      s0 = peg$currPos;
		      s1 = peg$parseWITH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace1();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsewhitespace();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parselparen();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsewhitespace();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$currPos;
		                  s8 = peg$parsename();
		                  if (s8 !== peg$FAILED) {
		                    s9 = [];
		                    s10 = peg$currPos;
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsename();
		                        if (s13 !== peg$FAILED) {
		                          s11 = [s11, s12, s13];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parsecomma();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsename();
		                          if (s13 !== peg$FAILED) {
		                            s11 = [s11, s12, s13];
		                            s10 = s11;
		                          } else {
		                            peg$currPos = s10;
		                            s10 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parserparen();
		                    if (s8 !== peg$FAILED) {
		                      s9 = peg$parseAS();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parsewhitespace();
		                        if (s10 !== peg$FAILED) {
		                          s11 = peg$parselparen();
		                          if (s11 !== peg$FAILED) {
		                            s12 = peg$parsewhitespace();
		                            if (s12 !== peg$FAILED) {
		                              s13 = peg$parseselect_stmt();
		                              if (s13 !== peg$FAILED) {
		                                s14 = peg$parsewhitespace();
		                                if (s14 !== peg$FAILED) {
		                                  s15 = peg$parserparen();
		                                  if (s15 !== peg$FAILED) {
		                                    s16 = peg$parseselect_stmt();
		                                    if (s16 !== peg$FAILED) {
		                                      peg$savedPos = s0;
		                                      s1 = peg$c2(s1, s3, s7, s13, s16);
		                                      s0 = s1;
		                                    } else {
		                                      peg$currPos = s0;
		                                      s0 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s0;
		                                    s0 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s0;
		                                  s0 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s0;
		                                s0 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s0;
		                              s0 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s0;
		                            s0 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s0;
		                          s0 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s0;
		                        s0 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s0;
		                      s0 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s0;
		                    s0 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsealter_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseALTER();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTABLE();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsetable_ref();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseRENAME();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTO();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseADD();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseCOLUMN();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsecolumn_def();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseanalyze_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseANALYZE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parsename();
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parsename();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parsedot();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s3 = [s3, s4, s5];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseattach_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseATTACH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDATABASE();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseexpr();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseAS();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsebegin_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseBEGIN();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDEFERRED();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parseIMMEDIATE();
		          if (s2 === peg$FAILED) {
		            s2 = peg$parseEXCLUSIVE();
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseTRANSACTION();
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecommit_stmt() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseCOMMIT();
		      if (s1 === peg$FAILED) {
		        s1 = peg$parseEND();
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRANSACTION();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parserollback_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseROLLBACK();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRANSACTION();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseTO();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseSAVEPOINT();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsesavepoint_stmt() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseSAVEPOINT();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parserelease_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseRELEASE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseSAVEPOINT();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_index_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseUNIQUE();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseINDEX();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseON();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parselparen();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parseindexed_column();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s10 = [s10, s11];
		                      s9 = s10;
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    while (s9 !== peg$FAILED) {
		                      s8.push(s9);
		                      s9 = peg$currPos;
		                      s10 = peg$parseindexed_column();
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$parsecomma();
		                        if (s11 !== peg$FAILED) {
		                          s10 = [s10, s11];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s8 = peg$FAILED;
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parserparen();
		                    if (s9 !== peg$FAILED) {
		                      s3 = [s3, s4, s5, s6, s7, s8, s9];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseindexed_column() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseCOLLATE();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseASC();
		          if (s3 === peg$FAILED) {
		            s3 = peg$parseDESC();
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTABLE();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsetable_ref();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parselparen();
		          if (s5 !== peg$FAILED) {
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsecolumn_def();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s8 = [s8, s9];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecolumn_def();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s8 = [s8, s9];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		            } else {
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsetable_constraint();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsetable_constraint();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s5 = [s5, s6, s7, s8];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseAS();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseselect_stmt();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecolumn_def() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsetype_name();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = [];
		          s4 = peg$parsecolumn_constraint();
		          if (s4 !== peg$FAILED) {
		            while (s4 !== peg$FAILED) {
		              s3.push(s4);
		              s4 = peg$parsecolumn_constraint();
		            }
		          } else {
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsetype_name() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$parsename();
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          s2 = peg$parsename();
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parselparen();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsesigned_number();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parserparen();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parselparen();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsesigned_number();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsecomma();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsesigned_number();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s3 = [s3, s4, s5, s6, s7];
		                    s2 = s3;
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecolumn_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCONSTRAINT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsePRIMARY();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseKEY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseASC();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseDESC();
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseconflict_clause();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parseAUTOINCREMENT();
		                if (s7 === peg$FAILED) {
		                  s7 = null;
		                }
		                if (s7 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6, s7];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseNOT();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseNULL();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseconflict_clause();
		              if (s5 !== peg$FAILED) {
		                s3 = [s3, s4, s5];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parseUNIQUE();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parseconflict_clause();
		              if (s4 !== peg$FAILED) {
		                s3 = [s3, s4];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		            if (s2 === peg$FAILED) {
		              s2 = peg$currPos;
		              s3 = peg$parseCHECK();
		              if (s3 !== peg$FAILED) {
		                s4 = peg$parselparen();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseexpr();
		                  if (s5 !== peg$FAILED) {
		                    s6 = peg$parserparen();
		                    if (s6 !== peg$FAILED) {
		                      s3 = [s3, s4, s5, s6];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		              if (s2 === peg$FAILED) {
		                s2 = peg$currPos;
		                s3 = peg$parseDEFAULT();
		                if (s3 !== peg$FAILED) {
		                  s4 = peg$parsesigned_number();
		                  if (s4 === peg$FAILED) {
		                    s4 = peg$parseliteral_value();
		                    if (s4 === peg$FAILED) {
		                      s4 = peg$currPos;
		                      s5 = peg$parselparen();
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parseexpr();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$parserparen();
		                          if (s7 !== peg$FAILED) {
		                            s5 = [s5, s6, s7];
		                            s4 = s5;
		                          } else {
		                            peg$currPos = s4;
		                            s4 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    }
		                  }
		                  if (s4 !== peg$FAILED) {
		                    s3 = [s3, s4];
		                    s2 = s3;
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		                if (s2 === peg$FAILED) {
		                  s2 = peg$currPos;
		                  s3 = peg$parseCOLLATE();
		                  if (s3 !== peg$FAILED) {
		                    s4 = peg$parsename();
		                    if (s4 !== peg$FAILED) {
		                      s3 = [s3, s4];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                  if (s2 === peg$FAILED) {
		                    s2 = peg$parseforeign_key_clause();
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsesigned_number() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseplus();
		      if (s1 === peg$FAILED) {
		        s1 = peg$parseminus();
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsenumeric_literal();
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsetable_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCONSTRAINT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsePRIMARY();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseKEY();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseUNIQUE();
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = [];
		            s6 = peg$currPos;
		            s7 = peg$parseindexed_column();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s7 = [s7, s8];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              while (s6 !== peg$FAILED) {
		                s5.push(s6);
		                s6 = peg$currPos;
		                s7 = peg$parseindexed_column();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parsecomma();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              }
		            } else {
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parserparen();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parseconflict_clause();
		                if (s7 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6, s7];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseCHECK();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parselparen();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseexpr();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parserparen();
		                if (s6 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parseFOREIGN();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parseKEY();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parselparen();
		                if (s5 !== peg$FAILED) {
		                  s6 = [];
		                  s7 = peg$currPos;
		                  s8 = peg$parsename();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsecomma();
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                  if (s7 !== peg$FAILED) {
		                    while (s7 !== peg$FAILED) {
		                      s6.push(s7);
		                      s7 = peg$currPos;
		                      s8 = peg$parsename();
		                      if (s8 !== peg$FAILED) {
		                        s9 = peg$parsecomma();
		                        if (s9 !== peg$FAILED) {
		                          s8 = [s8, s9];
		                          s7 = s8;
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s7;
		                        s7 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s6 = peg$FAILED;
		                  }
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parserparen();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parseforeign_key_clause();
		                      if (s8 !== peg$FAILED) {
		                        s3 = [s3, s4, s5, s6, s7, s8];
		                        s2 = s3;
		                      } else {
		                        peg$currPos = s2;
		                        s2 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseforeign_key_clause() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseREFERENCES();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parselparen();
		          if (s5 !== peg$FAILED) {
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsename();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s8 = [s8, s9];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsename();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s8 = [s8, s9];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		            } else {
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parserparen();
		              if (s7 !== peg$FAILED) {
		                s5 = [s5, s6, s7];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$currPos;
		        s4 = peg$parseON();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseDELETE();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseUPDATE();
		          }
		          if (s5 !== peg$FAILED) {
		            s6 = peg$currPos;
		            s7 = peg$parseSET();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parseNULL();
		              if (s8 !== peg$FAILED) {
		                s7 = [s7, s8];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		            if (s6 === peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseSET();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseDEFAULT();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$parseCASCADE();
		                if (s6 === peg$FAILED) {
		                  s6 = peg$parseRESTRICT();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$currPos;
		                    s7 = peg$parseNO();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parseACTION();
		                      if (s8 !== peg$FAILED) {
		                        s7 = [s7, s8];
		                        s6 = s7;
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  }
		                }
		              }
		            }
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseMATCH();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          while (s3 !== peg$FAILED) {
		            s2.push(s3);
		            s3 = peg$currPos;
		            s4 = peg$parseON();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseDELETE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseUPDATE();
		              }
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseSET();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseNULL();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = peg$currPos;
		                  s7 = peg$parseSET();
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parseDEFAULT();
		                    if (s8 !== peg$FAILED) {
		                      s7 = [s7, s8];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parseCASCADE();
		                    if (s6 === peg$FAILED) {
		                      s6 = peg$parseRESTRICT();
		                      if (s6 === peg$FAILED) {
		                        s6 = peg$currPos;
		                        s7 = peg$parseNO();
		                        if (s7 !== peg$FAILED) {
		                          s8 = peg$parseACTION();
		                          if (s8 !== peg$FAILED) {
		                            s7 = [s7, s8];
		                            s6 = s7;
		                          } else {
		                            peg$currPos = s6;
		                            s6 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      }
		                    }
		                  }
		                }
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parseMATCH();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s4 = [s4, s5];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            }
		          }
		        } else {
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseNOT();
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseDEFERRABLE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseINITIALLY();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseDEFERRED();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseINITIALLY();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseIMMEDIATE();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseconflict_clause() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseON();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseCONFLICT();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseROLLBACK();
		          if (s3 === peg$FAILED) {
		            s3 = peg$parseABORT();
		            if (s3 === peg$FAILED) {
		              s3 = peg$parseFAIL();
		              if (s3 === peg$FAILED) {
		                s3 = peg$parseIGNORE();
		                if (s3 === peg$FAILED) {
		                  s3 = peg$parseREPLACE();
		                }
		              }
		            }
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }
		      if (s0 === peg$FAILED) {
		        s0 = null;
		      }

		      return s0;
		    }

		    function peg$parsecreate_trigger_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTRIGGER();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseBEFORE();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseAFTER();
		              if (s5 === peg$FAILED) {
		                s5 = peg$currPos;
		                s6 = peg$parseINSTEAD();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parseOF();
		                  if (s7 !== peg$FAILED) {
		                    s6 = [s6, s7];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              }
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseDELETE();
		          if (s4 === peg$FAILED) {
		            s4 = peg$parseINSERT();
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseUPDATE();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseOF();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parsename();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s10 = [s10, s11];
		                      s9 = s10;
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    while (s9 !== peg$FAILED) {
		                      s8.push(s9);
		                      s9 = peg$currPos;
		                      s10 = peg$parsename();
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$parsecomma();
		                        if (s11 !== peg$FAILED) {
		                          s10 = [s10, s11];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s8 = peg$FAILED;
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseON();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parseFOR();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseEACH();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseROW();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseWHEN();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseexpr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$parseBEGIN();
		              if (s6 !== peg$FAILED) {
		                s7 = [];
		                s8 = peg$currPos;
		                s9 = peg$parseupdate_stmt();
		                if (s9 === peg$FAILED) {
		                  s9 = peg$parseinsert_stmt();
		                  if (s9 === peg$FAILED) {
		                    s9 = peg$parsedelete_stmt();
		                    if (s9 === peg$FAILED) {
		                      s9 = peg$parseselect_stmt();
		                    }
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsesemicolon();
		                  if (s10 !== peg$FAILED) {
		                    s9 = [s9, s10];
		                    s8 = s9;
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 !== peg$FAILED) {
		                  while (s8 !== peg$FAILED) {
		                    s7.push(s8);
		                    s8 = peg$currPos;
		                    s9 = peg$parseupdate_stmt();
		                    if (s9 === peg$FAILED) {
		                      s9 = peg$parseinsert_stmt();
		                      if (s9 === peg$FAILED) {
		                        s9 = peg$parsedelete_stmt();
		                        if (s9 === peg$FAILED) {
		                          s9 = peg$parseselect_stmt();
		                        }
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s10 = peg$parsesemicolon();
		                      if (s10 !== peg$FAILED) {
		                        s9 = [s9, s10];
		                        s8 = s9;
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  }
		                } else {
		                  s7 = peg$FAILED;
		                }
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseEND();
		                  if (s8 !== peg$FAILED) {
		                    s6 = [s6, s7, s8];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_view_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseVIEW();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseAS();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseselect_stmt();
		              if (s6 !== peg$FAILED) {
		                s3 = [s3, s4, s5, s6];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_virtual_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseVIRTUAL();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTABLE();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsetable_ref();
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseUSING();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parselparen();
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parsename();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsecomma();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parsename();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsecomma();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedelete_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDELETE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseFROM();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsequalified_table_name();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseWHERE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedelete_stmt_limited() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$parseDELETE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseFROM();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsequalified_table_name();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseWHERE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parseORDER();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseBY();
		                if (s8 !== peg$FAILED) {
		                  s9 = [];
		                  s10 = peg$currPos;
		                  s11 = peg$parseordering_term();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                  if (s10 !== peg$FAILED) {
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parseordering_term();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s11 = [s11, s12];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$currPos;
		                s8 = peg$parseLIMIT();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$currPos;
		                    s11 = peg$parseOFFSET();
		                    if (s11 === peg$FAILED) {
		                      s11 = peg$parsecomma();
		                    }
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parseexpr();
		                      if (s12 !== peg$FAILED) {
		                        s11 = [s11, s12];
		                        s10 = s11;
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    if (s10 === peg$FAILED) {
		                      s10 = null;
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 === peg$FAILED) {
		                s5 = null;
		              }
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedetach_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseDETACH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDATABASE();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_index_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseINDEX();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_table_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTABLE();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsetable_ref();
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_trigger_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRIGGER();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_view_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseVIEW();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsevalue() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsecolumn_ref();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c3(s4);
		        }
		        s3 = s4;
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseliteral_value();
		          if (s4 !== peg$FAILED) {
		            peg$savedPos = s3;
		            s4 = peg$c4(s4);
		          }
		          s3 = s4;
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parsebind_parameter();
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s3;
		              s4 = peg$c5(s4);
		            }
		            s3 = s4;
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$currPos;
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsedot();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parsename();
		                  if (s7 !== peg$FAILED) {
		                    s5 = [s5, s6, s7];
		                    s4 = s5;
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		              if (s4 !== peg$FAILED) {
		                peg$savedPos = s3;
		                s4 = peg$c6(s4);
		              }
		              s3 = s4;
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parsename();
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c7(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parseunary_operator();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseexpr();
		                    if (s5 !== peg$FAILED) {
		                      s4 = [s4, s5];
		                      s3 = s4;
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$parsecall_function();
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$parsewhitespace();
		                      if (s4 !== peg$FAILED) {
		                        s5 = peg$parselparen();
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parseexpr();
		                          if (s6 !== peg$FAILED) {
		                            s7 = peg$parsewhitespace();
		                            if (s7 !== peg$FAILED) {
		                              s8 = peg$parserparen();
		                              if (s8 !== peg$FAILED) {
		                                s4 = [s4, s5, s6, s7, s8];
		                                s3 = s4;
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                      if (s3 === peg$FAILED) {
		                        s3 = peg$currPos;
		                        s4 = peg$parseCAST();
		                        if (s4 !== peg$FAILED) {
		                          s5 = peg$parselparen();
		                          if (s5 !== peg$FAILED) {
		                            s6 = peg$parseexpr();
		                            if (s6 !== peg$FAILED) {
		                              s7 = peg$parseAS();
		                              if (s7 !== peg$FAILED) {
		                                s8 = peg$parsetype_name();
		                                if (s8 !== peg$FAILED) {
		                                  s9 = peg$parserparen();
		                                  if (s9 !== peg$FAILED) {
		                                    s4 = [s4, s5, s6, s7, s8, s9];
		                                    s3 = s4;
		                                  } else {
		                                    peg$currPos = s3;
		                                    s3 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                        if (s3 === peg$FAILED) {
		                          s3 = peg$currPos;
		                          s4 = peg$currPos;
		                          s5 = peg$parseNOT();
		                          if (s5 === peg$FAILED) {
		                            s5 = null;
		                          }
		                          if (s5 !== peg$FAILED) {
		                            s6 = peg$parseEXISTS();
		                            if (s6 !== peg$FAILED) {
		                              s5 = [s5, s6];
		                              s4 = s5;
		                            } else {
		                              peg$currPos = s4;
		                              s4 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s4;
		                            s4 = peg$FAILED;
		                          }
		                          if (s4 === peg$FAILED) {
		                            s4 = null;
		                          }
		                          if (s4 !== peg$FAILED) {
		                            s5 = peg$parselparen();
		                            if (s5 !== peg$FAILED) {
		                              s6 = peg$parseselect_stmt();
		                              if (s6 !== peg$FAILED) {
		                                s7 = peg$parserparen();
		                                if (s7 !== peg$FAILED) {
		                                  s4 = [s4, s5, s6, s7];
		                                  s3 = s4;
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                          if (s3 === peg$FAILED) {
		                            s3 = peg$currPos;
		                            s4 = peg$parseCASE();
		                            if (s4 !== peg$FAILED) {
		                              s5 = peg$parseexpr();
		                              if (s5 === peg$FAILED) {
		                                s5 = null;
		                              }
		                              if (s5 !== peg$FAILED) {
		                                s6 = [];
		                                s7 = peg$currPos;
		                                s8 = peg$parseWHEN();
		                                if (s8 !== peg$FAILED) {
		                                  s9 = peg$parseexpr();
		                                  if (s9 !== peg$FAILED) {
		                                    s10 = peg$parseTHEN();
		                                    if (s10 !== peg$FAILED) {
		                                      s11 = peg$parseexpr();
		                                      if (s11 !== peg$FAILED) {
		                                        s8 = [s8, s9, s10, s11];
		                                        s7 = s8;
		                                      } else {
		                                        peg$currPos = s7;
		                                        s7 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                                if (s7 !== peg$FAILED) {
		                                  while (s7 !== peg$FAILED) {
		                                    s6.push(s7);
		                                    s7 = peg$currPos;
		                                    s8 = peg$parseWHEN();
		                                    if (s8 !== peg$FAILED) {
		                                      s9 = peg$parseexpr();
		                                      if (s9 !== peg$FAILED) {
		                                        s10 = peg$parseTHEN();
		                                        if (s10 !== peg$FAILED) {
		                                          s11 = peg$parseexpr();
		                                          if (s11 !== peg$FAILED) {
		                                            s8 = [s8, s9, s10, s11];
		                                            s7 = s8;
		                                          } else {
		                                            peg$currPos = s7;
		                                            s7 = peg$FAILED;
		                                          }
		                                        } else {
		                                          peg$currPos = s7;
		                                          s7 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s7;
		                                        s7 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  }
		                                } else {
		                                  s6 = peg$FAILED;
		                                }
		                                if (s6 !== peg$FAILED) {
		                                  s7 = peg$currPos;
		                                  s8 = peg$parseELSE();
		                                  if (s8 !== peg$FAILED) {
		                                    s9 = peg$parseexpr();
		                                    if (s9 !== peg$FAILED) {
		                                      s8 = [s8, s9];
		                                      s7 = s8;
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                  if (s7 === peg$FAILED) {
		                                    s7 = null;
		                                  }
		                                  if (s7 !== peg$FAILED) {
		                                    s8 = peg$parseEND();
		                                    if (s8 !== peg$FAILED) {
		                                      s4 = [s4, s5, s6, s7, s8];
		                                      s3 = s4;
		                                    } else {
		                                      peg$currPos = s3;
		                                      s3 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s3;
		                                    s3 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                            if (s3 === peg$FAILED) {
		                              s3 = peg$parseraise_function();
		                            }
		                          }
		                        }
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c8(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseexpr() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsevalue();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsebinary_operator();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseexpr();
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseagg_column_ref();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsebinary_operator();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parsevalue();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseCOLLATE();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsename();
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parsevalue();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parseNOT();
		                if (s5 === peg$FAILED) {
		                  s5 = null;
		                }
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$parseLIKE();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parseGLOB();
		                    if (s6 === peg$FAILED) {
		                      s6 = peg$parseREGEXP();
		                      if (s6 === peg$FAILED) {
		                        s6 = peg$parseMATCH();
		                      }
		                    }
		                  }
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parseexpr();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$currPos;
		                      s9 = peg$parseESCAPE();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parseexpr();
		                        if (s10 !== peg$FAILED) {
		                          s9 = [s9, s10];
		                          s8 = s9;
		                        } else {
		                          peg$currPos = s8;
		                          s8 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                      if (s8 === peg$FAILED) {
		                        s8 = null;
		                      }
		                      if (s8 !== peg$FAILED) {
		                        s4 = [s4, s5, s6, s7, s8];
		                        s3 = s4;
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parsevalue();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseISNULL();
		                  if (s5 === peg$FAILED) {
		                    s5 = peg$parseNOTNULL();
		                    if (s5 === peg$FAILED) {
		                      s5 = peg$currPos;
		                      s6 = peg$parseNOT();
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parseNULL();
		                        if (s7 !== peg$FAILED) {
		                          s6 = [s6, s7];
		                          s5 = s6;
		                        } else {
		                          peg$currPos = s5;
		                          s5 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s5;
		                        s5 = peg$FAILED;
		                      }
		                    }
		                  }
		                  if (s5 !== peg$FAILED) {
		                    s4 = [s4, s5];
		                    s3 = s4;
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parsevalue();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseIS();
		                    if (s5 !== peg$FAILED) {
		                      s6 = peg$parseNOT();
		                      if (s6 === peg$FAILED) {
		                        s6 = null;
		                      }
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parseexpr();
		                        if (s7 !== peg$FAILED) {
		                          s4 = [s4, s5, s6, s7];
		                          s3 = s4;
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$parsevalue();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$parseNOT();
		                      if (s5 === peg$FAILED) {
		                        s5 = null;
		                      }
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parseBETWEEN();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$parsevalue();
		                          if (s7 !== peg$FAILED) {
		                            s8 = peg$parseAND();
		                            if (s8 !== peg$FAILED) {
		                              s9 = peg$parsevalue();
		                              if (s9 !== peg$FAILED) {
		                                s4 = [s4, s5, s6, s7, s8, s9];
		                                s3 = s4;
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$parsevalue();
		                      if (s4 !== peg$FAILED) {
		                        s5 = peg$parseNOT();
		                        if (s5 === peg$FAILED) {
		                          s5 = null;
		                        }
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parseIN();
		                          if (s6 !== peg$FAILED) {
		                            s7 = peg$currPos;
		                            s8 = peg$parselparen();
		                            if (s8 !== peg$FAILED) {
		                              s9 = peg$parseselect_stmt();
		                              if (s9 === peg$FAILED) {
		                                s9 = [];
		                                s10 = peg$currPos;
		                                s11 = peg$parsevalue();
		                                if (s11 !== peg$FAILED) {
		                                  s12 = [];
		                                  s13 = peg$currPos;
		                                  s14 = peg$parsecomma();
		                                  if (s14 !== peg$FAILED) {
		                                    s15 = peg$parsevalue();
		                                    if (s15 !== peg$FAILED) {
		                                      s14 = [s14, s15];
		                                      s13 = s14;
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s13;
		                                    s13 = peg$FAILED;
		                                  }
		                                  while (s13 !== peg$FAILED) {
		                                    s12.push(s13);
		                                    s13 = peg$currPos;
		                                    s14 = peg$parsecomma();
		                                    if (s14 !== peg$FAILED) {
		                                      s15 = peg$parsevalue();
		                                      if (s15 !== peg$FAILED) {
		                                        s14 = [s14, s15];
		                                        s13 = s14;
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                  }
		                                  if (s12 !== peg$FAILED) {
		                                    s11 = [s11, s12];
		                                    s10 = s11;
		                                  } else {
		                                    peg$currPos = s10;
		                                    s10 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s10;
		                                  s10 = peg$FAILED;
		                                }
		                                if (s10 !== peg$FAILED) {
		                                  while (s10 !== peg$FAILED) {
		                                    s9.push(s10);
		                                    s10 = peg$currPos;
		                                    s11 = peg$parsevalue();
		                                    if (s11 !== peg$FAILED) {
		                                      s12 = [];
		                                      s13 = peg$currPos;
		                                      s14 = peg$parsecomma();
		                                      if (s14 !== peg$FAILED) {
		                                        s15 = peg$parsevalue();
		                                        if (s15 !== peg$FAILED) {
		                                          s14 = [s14, s15];
		                                          s13 = s14;
		                                        } else {
		                                          peg$currPos = s13;
		                                          s13 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                      while (s13 !== peg$FAILED) {
		                                        s12.push(s13);
		                                        s13 = peg$currPos;
		                                        s14 = peg$parsecomma();
		                                        if (s14 !== peg$FAILED) {
		                                          s15 = peg$parsevalue();
		                                          if (s15 !== peg$FAILED) {
		                                            s14 = [s14, s15];
		                                            s13 = s14;
		                                          } else {
		                                            peg$currPos = s13;
		                                            s13 = peg$FAILED;
		                                          }
		                                        } else {
		                                          peg$currPos = s13;
		                                          s13 = peg$FAILED;
		                                        }
		                                      }
		                                      if (s12 !== peg$FAILED) {
		                                        s11 = [s11, s12];
		                                        s10 = s11;
		                                      } else {
		                                        peg$currPos = s10;
		                                        s10 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s10;
		                                      s10 = peg$FAILED;
		                                    }
		                                  }
		                                } else {
		                                  s9 = peg$FAILED;
		                                }
		                              }
		                              if (s9 === peg$FAILED) {
		                                s9 = null;
		                              }
		                              if (s9 !== peg$FAILED) {
		                                s10 = peg$parserparen();
		                                if (s10 !== peg$FAILED) {
		                                  s8 = [s8, s9, s10];
		                                  s7 = s8;
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s7;
		                                s7 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s7;
		                              s7 = peg$FAILED;
		                            }
		                            if (s7 === peg$FAILED) {
		                              s7 = peg$parsetable_ref();
		                            }
		                            if (s7 !== peg$FAILED) {
		                              s4 = [s4, s5, s6, s7];
		                              s3 = s4;
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                      if (s3 === peg$FAILED) {
		                        s3 = peg$parsevalue();
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c9(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecall_function() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parselparen();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseDISTINCT();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parseexpr();
		              if (s8 !== peg$FAILED) {
		                s9 = [];
		                s10 = peg$currPos;
		                s11 = peg$parsewhitespace();
		                if (s11 !== peg$FAILED) {
		                  s12 = peg$parsecomma();
		                  if (s12 !== peg$FAILED) {
		                    s13 = peg$parseexpr();
		                    if (s13 !== peg$FAILED) {
		                      s11 = [s11, s12, s13];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s10;
		                  s10 = peg$FAILED;
		                }
		                while (s10 !== peg$FAILED) {
		                  s9.push(s10);
		                  s10 = peg$currPos;
		                  s11 = peg$parsewhitespace();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s13 = peg$parseexpr();
		                      if (s13 !== peg$FAILED) {
		                        s11 = [s11, s12, s13];
		                        s10 = s11;
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s8 = [s8, s9];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                while (s7 !== peg$FAILED) {
		                  s6.push(s7);
		                  s7 = peg$currPos;
		                  s8 = peg$parseexpr();
		                  if (s8 !== peg$FAILED) {
		                    s9 = [];
		                    s10 = peg$currPos;
		                    s11 = peg$parsewhitespace();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsecomma();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parseexpr();
		                        if (s13 !== peg$FAILED) {
		                          s11 = [s11, s12, s13];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parsewhitespace();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parseexpr();
		                          if (s13 !== peg$FAILED) {
		                            s11 = [s11, s12, s13];
		                            s10 = s11;
		                          } else {
		                            peg$currPos = s10;
		                            s10 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                }
		              } else {
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parsewhitespace();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsestar();
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsewhitespace();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parserparen();
		                if (s6 !== peg$FAILED) {
		                  s1 = [s1, s2, s3, s4, s5, s6];
		                  s0 = s1;
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseraise_function() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseRAISE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parselparen();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseIGNORE();
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parseROLLBACK();
		            if (s4 === peg$FAILED) {
		              s4 = peg$parseABORT();
		              if (s4 === peg$FAILED) {
		                s4 = peg$parseFAIL();
		              }
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsecomma();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsestring_literal();
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parserparen();
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseliteral_value() {
		      var s0;

		      s0 = peg$parsenumeric_literal();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsestring_literal();
		        if (s0 === peg$FAILED) {
		          s0 = peg$parsestring_literal();
		          if (s0 === peg$FAILED) {
		            s0 = peg$parseNULL();
		            if (s0 === peg$FAILED) {
		              s0 = peg$parseCURRENT_TIME();
		              if (s0 === peg$FAILED) {
		                s0 = peg$parseCURRENT_DATE();
		                if (s0 === peg$FAILED) {
		                  s0 = peg$parseCURRENT_TIMESTAMP();
		                }
		              }
		            }
		          }
		        }
		      }

		      return s0;
		    }

		    function peg$parsenumeric_literal() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsenumber();
		      if (s2 === peg$FAILED) {
		        s2 = peg$parsecolumn_ref();
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = [];
		        s4 = peg$currPos;
		        s5 = peg$parsewhitespace();
		        if (s5 !== peg$FAILED) {
		          s6 = peg$parseplus();
		          if (s6 === peg$FAILED) {
		            s6 = peg$parseminus();
		            if (s6 === peg$FAILED) {
		              s6 = peg$parsestar();
		              if (s6 === peg$FAILED) {
		                s6 = peg$parsedivide();
		                if (s6 === peg$FAILED) {
		                  s6 = peg$parsemodulo();
		                }
		              }
		            }
		          }
		          if (s6 === peg$FAILED) {
		            s6 = null;
		          }
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsewhitespace();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parsenumber();
		              if (s8 === peg$FAILED) {
		                s8 = peg$parsecolumn_ref();
		              }
		              if (s8 !== peg$FAILED) {
		                s5 = [s5, s6, s7, s8];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s4;
		          s4 = peg$FAILED;
		        }
		        while (s4 !== peg$FAILED) {
		          s3.push(s4);
		          s4 = peg$currPos;
		          s5 = peg$parsewhitespace();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseplus();
		            if (s6 === peg$FAILED) {
		              s6 = peg$parseminus();
		              if (s6 === peg$FAILED) {
		                s6 = peg$parsestar();
		                if (s6 === peg$FAILED) {
		                  s6 = peg$parsedivide();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parsemodulo();
		                  }
		                }
		              }
		            }
		            if (s6 === peg$FAILED) {
		              s6 = null;
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsewhitespace();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parsenumber();
		                if (s8 === peg$FAILED) {
		                  s8 = peg$parsecolumn_ref();
		                }
		                if (s8 !== peg$FAILED) {
		                  s5 = [s5, s6, s7, s8];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c10(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseinsert_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseINSERT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$parseREPLACE();
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseINTO();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsetable_ref();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parselparen();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$currPos;
		              s8 = peg$parsename();
		              if (s8 !== peg$FAILED) {
		                s9 = [];
		                s10 = peg$currPos;
		                s11 = peg$parsecomma();
		                if (s11 !== peg$FAILED) {
		                  s12 = peg$parsename();
		                  if (s12 !== peg$FAILED) {
		                    s11 = [s11, s12];
		                    s10 = s11;
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s10;
		                  s10 = peg$FAILED;
		                }
		                while (s10 !== peg$FAILED) {
		                  s9.push(s10);
		                  s10 = peg$currPos;
		                  s11 = peg$parsecomma();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsename();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s8 = [s8, s9];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseVALUES();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parselparen();
		                if (s8 !== peg$FAILED) {
		                  s9 = [];
		                  s10 = peg$currPos;
		                  s11 = peg$parseexpr();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                  if (s10 !== peg$FAILED) {
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parseexpr();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s11 = [s11, s12];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parserparen();
		                    if (s10 !== peg$FAILED) {
		                      s7 = [s7, s8, s9, s10];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$parseselect_stmt();
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseDEFAULT();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parseVALUES();
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsepragma_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$parsePRAGMA();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsedot();
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseequal();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsepragma_value();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parselparen();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsepragma_value();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s5 = [s5, s6, s7];
		                    s4 = s5;
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsepragma_value() {
		      var s0;

		      s0 = peg$parsesigned_number();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsename();
		        if (s0 === peg$FAILED) {
		          s0 = peg$parsestring_literal();
		        }
		      }

		      return s0;
		    }

		    function peg$parsereindex_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseREINDEX();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parsetable_ref();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseselect_core();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = [];
		        s5 = peg$currPos;
		        s6 = peg$parsecompound_operator();
		        if (s6 !== peg$FAILED) {
		          s7 = peg$parseselect_core();
		          if (s7 !== peg$FAILED) {
		            s6 = [s6, s7];
		            s5 = s6;
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s5;
		          s5 = peg$FAILED;
		        }
		        while (s5 !== peg$FAILED) {
		          s4.push(s5);
		          s5 = peg$currPos;
		          s6 = peg$parsecompound_operator();
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parseselect_core();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		        }
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c11(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseORDER();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseBY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseordering_term();
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsewhitespace();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsecomma();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseordering_term();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsewhitespace();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parseordering_term();
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s3 = [s3, s4, s5, s6];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseLIMIT();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseexpr();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseOFFSET();
		              if (s7 === peg$FAILED) {
		                s7 = peg$parsecomma();
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseexpr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            peg$savedPos = s0;
		            s1 = peg$c12(s1, s2, s3);
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_core() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

		      s0 = peg$currPos;
		      s1 = peg$parseSELECT();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDISTINCT();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parseALL();
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseselect_result();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsewhitespace();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parseselect_result();
		                if (s10 !== peg$FAILED) {
		                  s8 = [s8, s9, s10];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            while (s7 !== peg$FAILED) {
		              s6.push(s7);
		              s7 = peg$currPos;
		              s8 = peg$parsewhitespace();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsecomma();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseselect_result();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            }
		            if (s6 !== peg$FAILED) {
		              peg$savedPos = s5;
		              s6 = peg$c13(s2, s6);
		            }
		            s5 = s6;
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parseFROM();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsejoin_source();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              peg$savedPos = s4;
		              s5 = peg$c14(s2, s3, s5);
		            }
		            s4 = s5;
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parseWHERE();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseexpr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                peg$savedPos = s5;
		                s6 = peg$c15(s2, s3, s4, s6);
		              }
		              s5 = s6;
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseGROUP();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseBY();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parseordering_term();
		                    if (s9 !== peg$FAILED) {
		                      s10 = [];
		                      s11 = peg$currPos;
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsecomma();
		                        if (s13 !== peg$FAILED) {
		                          s14 = peg$parseordering_term();
		                          if (s14 !== peg$FAILED) {
		                            s12 = [s12, s13, s14];
		                            s11 = s12;
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s11;
		                        s11 = peg$FAILED;
		                      }
		                      while (s11 !== peg$FAILED) {
		                        s10.push(s11);
		                        s11 = peg$currPos;
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsecomma();
		                          if (s13 !== peg$FAILED) {
		                            s14 = peg$parseordering_term();
		                            if (s14 !== peg$FAILED) {
		                              s12 = [s12, s13, s14];
		                              s11 = s12;
		                            } else {
		                              peg$currPos = s11;
		                              s11 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                      }
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$currPos;
		                        s12 = peg$parseHAVING();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parseexpr();
		                          if (s13 !== peg$FAILED) {
		                            s12 = [s12, s13];
		                            s11 = s12;
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                        if (s11 === peg$FAILED) {
		                          s11 = null;
		                        }
		                        if (s11 !== peg$FAILED) {
		                          s7 = [s7, s8, s9, s10, s11];
		                          s6 = s7;
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  peg$savedPos = s0;
		                  s1 = peg$c16(s2, s3, s4, s5, s6);
		                  s0 = s1;
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_result() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$currPos;
		        s5 = peg$parseagg_column_ref();
		        if (s5 !== peg$FAILED) {
		          s6 = peg$currPos;
		          s7 = peg$currPos;
		          s8 = peg$parseAS();
		          if (s8 !== peg$FAILED) {
		            s9 = peg$parsewhitespace();
		            if (s9 !== peg$FAILED) {
		              s10 = peg$parsename();
		              if (s10 !== peg$FAILED) {
		                s8 = [s8, s9, s10];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s7;
		            s7 = peg$FAILED;
		          }
		          if (s7 !== peg$FAILED) {
		            peg$savedPos = s6;
		            s7 = peg$c17(s7);
		          }
		          s6 = s7;
		          if (s6 === peg$FAILED) {
		            s6 = null;
		          }
		          if (s6 !== peg$FAILED) {
		            s5 = [s5, s6];
		            s4 = s5;
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s4;
		          s4 = peg$FAILED;
		        }
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c18(s4);
		        }
		        s3 = s4;
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$currPos;
		          s5 = peg$parsecalc_ref();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$currPos;
		            s7 = peg$currPos;
		            s8 = peg$parseAS();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsewhitespace();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsename();
		                if (s10 !== peg$FAILED) {
		                  s8 = [s8, s9, s10];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              peg$savedPos = s6;
		              s7 = peg$c17(s7);
		            }
		            s6 = s7;
		            if (s6 === peg$FAILED) {
		              s6 = null;
		            }
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            peg$savedPos = s3;
		            s4 = peg$c19(s4);
		          }
		          s3 = s4;
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$currPos;
		            s5 = peg$parsehelper_ref();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$currPos;
		              s8 = peg$parseAS();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsename();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                peg$savedPos = s6;
		                s7 = peg$c17(s7);
		              }
		              s6 = s7;
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s3;
		              s4 = peg$c20(s4);
		            }
		            s3 = s4;
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$currPos;
		              s5 = peg$parsecolumn_ref();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$currPos;
		                s8 = peg$parseAS();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsename();
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		                if (s7 !== peg$FAILED) {
		                  peg$savedPos = s6;
		                  s7 = peg$c17(s7);
		                }
		                s6 = s7;
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		              if (s4 !== peg$FAILED) {
		                peg$savedPos = s3;
		                s4 = peg$c18(s4);
		              }
		              s3 = s4;
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$currPos;
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$parsedot();
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parsestar();
		                    if (s7 !== peg$FAILED) {
		                      s5 = [s5, s6, s7];
		                      s4 = s5;
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c21(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parsestar();
		                  if (s4 !== peg$FAILED) {
		                    peg$savedPos = s3;
		                    s4 = peg$c22();
		                  }
		                  s3 = s4;
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$currPos;
		                    s5 = peg$parsestring_literal();
		                    if (s5 !== peg$FAILED) {
		                      s6 = peg$currPos;
		                      s7 = peg$currPos;
		                      s8 = peg$parseAS();
		                      if (s8 !== peg$FAILED) {
		                        s9 = peg$parsewhitespace();
		                        if (s9 !== peg$FAILED) {
		                          s10 = peg$parsename();
		                          if (s10 !== peg$FAILED) {
		                            s8 = [s8, s9, s10];
		                            s7 = s8;
		                          } else {
		                            peg$currPos = s7;
		                            s7 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s7;
		                        s7 = peg$FAILED;
		                      }
		                      if (s7 !== peg$FAILED) {
		                        peg$savedPos = s6;
		                        s7 = peg$c17(s7);
		                      }
		                      s6 = s7;
		                      if (s6 === peg$FAILED) {
		                        s6 = null;
		                      }
		                      if (s6 !== peg$FAILED) {
		                        s5 = [s5, s6];
		                        s4 = s5;
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                    if (s4 !== peg$FAILED) {
		                      peg$savedPos = s3;
		                      s4 = peg$c23(s4);
		                    }
		                    s3 = s4;
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$currPos;
		                      s5 = peg$parsenumeric_literal();
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$currPos;
		                        s7 = peg$currPos;
		                        s8 = peg$parseAS();
		                        if (s8 !== peg$FAILED) {
		                          s9 = peg$parsewhitespace();
		                          if (s9 !== peg$FAILED) {
		                            s10 = peg$parsename();
		                            if (s10 !== peg$FAILED) {
		                              s8 = [s8, s9, s10];
		                              s7 = s8;
		                            } else {
		                              peg$currPos = s7;
		                              s7 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s7;
		                            s7 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                        if (s7 !== peg$FAILED) {
		                          peg$savedPos = s6;
		                          s7 = peg$c17(s7);
		                        }
		                        s6 = s7;
		                        if (s6 === peg$FAILED) {
		                          s6 = null;
		                        }
		                        if (s6 !== peg$FAILED) {
		                          s5 = [s5, s6];
		                          s4 = s5;
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                      if (s4 !== peg$FAILED) {
		                        peg$savedPos = s3;
		                        s4 = peg$c24(s4);
		                      }
		                      s3 = s4;
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c25(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsejoin_source() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsesingle_source();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$parsejoin_op();
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsewhitespace();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parsesingle_source();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsejoin_constraint();
		                if (s9 !== peg$FAILED) {
		                  s6 = [s6, s7, s8, s9];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          while (s5 !== peg$FAILED) {
		            s4.push(s5);
		            s5 = peg$currPos;
		            s6 = peg$parsejoin_op();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsewhitespace();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parsesingle_source();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsejoin_constraint();
		                  if (s9 !== peg$FAILED) {
		                    s6 = [s6, s7, s8, s9];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          }
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c26(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsesingle_source() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsename();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsedot();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseAS();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsewhitespace1();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsename();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c27(s1);
		      }
		      s0 = s1;
		      if (s0 === peg$FAILED) {
		        s0 = peg$currPos;
		        s1 = peg$currPos;
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsedot();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsename();
		            if (s4 !== peg$FAILED) {
		              s2 = [s2, s3, s4];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		        if (s1 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c28(s1);
		        }
		        s0 = s1;
		        if (s0 === peg$FAILED) {
		          s0 = peg$currPos;
		          s1 = peg$currPos;
		          s2 = peg$parsename();
		          if (s2 !== peg$FAILED) {
		            s3 = peg$parseAS();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parsewhitespace1();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		          if (s1 !== peg$FAILED) {
		            peg$savedPos = s0;
		            s1 = peg$c29(s1);
		          }
		          s0 = s1;
		          if (s0 === peg$FAILED) {
		            s0 = peg$currPos;
		            s1 = peg$parsename();
		            if (s1 !== peg$FAILED) {
		              peg$savedPos = s0;
		              s1 = peg$c30(s1);
		            }
		            s0 = s1;
		            if (s0 === peg$FAILED) {
		              s0 = peg$currPos;
		              s1 = peg$currPos;
		              s2 = peg$currPos;
		              s3 = peg$currPos;
		              s4 = peg$parsetable_ref();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$currPos;
		                s6 = peg$currPos;
		                s7 = peg$parseAS();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parsewhitespace1();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsename();
		                    if (s9 !== peg$FAILED) {
		                      s7 = [s7, s8, s9];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 !== peg$FAILED) {
		                  peg$savedPos = s5;
		                  s6 = peg$c17(s6);
		                }
		                s5 = s6;
		                if (s5 === peg$FAILED) {
		                  s5 = null;
		                }
		                if (s5 !== peg$FAILED) {
		                  s4 = [s4, s5];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		              if (s3 !== peg$FAILED) {
		                peg$savedPos = s2;
		                s3 = peg$c31(s3);
		              }
		              s2 = s3;
		              if (s2 !== peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$currPos;
		                s5 = peg$parseINDEXED();
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$parseBY();
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parsewhitespace();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parsename();
		                      if (s8 !== peg$FAILED) {
		                        s5 = [s5, s6, s7, s8];
		                        s4 = s5;
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c32(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parseNOT();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseINDEXED();
		                    if (s5 !== peg$FAILED) {
		                      peg$savedPos = s3;
		                      s4 = peg$c33();
		                      s3 = s4;
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = null;
		                }
		                if (s3 !== peg$FAILED) {
		                  s2 = [s2, s3];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		              if (s1 !== peg$FAILED) {
		                peg$savedPos = s0;
		                s1 = peg$c34(s1);
		              }
		              s0 = s1;
		              if (s0 === peg$FAILED) {
		                s0 = peg$currPos;
		                s1 = peg$currPos;
		                s2 = peg$parselparen();
		                if (s2 !== peg$FAILED) {
		                  s3 = peg$parseselect_stmt();
		                  if (s3 !== peg$FAILED) {
		                    s4 = peg$parserparen();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$currPos;
		                      s6 = peg$currPos;
		                      s7 = peg$parseAS();
		                      if (s7 !== peg$FAILED) {
		                        s8 = peg$parsewhitespace();
		                        if (s8 !== peg$FAILED) {
		                          s9 = peg$parsename();
		                          if (s9 !== peg$FAILED) {
		                            s7 = [s7, s8, s9];
		                            s6 = s7;
		                          } else {
		                            peg$currPos = s6;
		                            s6 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                      if (s6 !== peg$FAILED) {
		                        peg$savedPos = s5;
		                        s6 = peg$c17(s6);
		                      }
		                      s5 = s6;
		                      if (s5 === peg$FAILED) {
		                        s5 = null;
		                      }
		                      if (s5 !== peg$FAILED) {
		                        s2 = [s2, s3, s4, s5];
		                        s1 = s2;
		                      } else {
		                        peg$currPos = s1;
		                        s1 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s1;
		                      s1 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		                if (s1 !== peg$FAILED) {
		                  peg$savedPos = s0;
		                  s1 = peg$c35(s1);
		                }
		                s0 = s1;
		                if (s0 === peg$FAILED) {
		                  s0 = peg$currPos;
		                  s1 = peg$currPos;
		                  s2 = peg$parselparen();
		                  if (s2 !== peg$FAILED) {
		                    s3 = peg$parsejoin_source();
		                    if (s3 !== peg$FAILED) {
		                      s4 = peg$parserparen();
		                      if (s4 !== peg$FAILED) {
		                        s2 = [s2, s3, s4];
		                        s1 = s2;
		                      } else {
		                        peg$currPos = s1;
		                        s1 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s1;
		                      s1 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                  if (s1 !== peg$FAILED) {
		                    peg$savedPos = s0;
		                    s1 = peg$c36(s1);
		                  }
		                  s0 = s1;
		                }
		              }
		            }
		          }
		        }
		      }

		      return s0;
		    }

		    function peg$parsejoin_op() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsecomma();
		        if (s3 !== peg$FAILED) {
		          peg$savedPos = s1;
		          s2 = peg$c37();
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$currPos;
		        s3 = peg$parseNATURAL();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parseLEFT();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseOUTER();
		            if (s6 === peg$FAILED) {
		              s6 = null;
		            }
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseRIGHT();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseOUTER();
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseFULL();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parseOUTER();
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		              if (s4 === peg$FAILED) {
		                s4 = peg$parseINNER();
		                if (s4 === peg$FAILED) {
		                  s4 = peg$parseCROSS();
		                }
		              }
		            }
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseJOIN();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s1;
		          s2 = peg$c38(s2);
		        }
		        s1 = s2;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c39(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsejoin_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseON();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseexpr();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parseUSING();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsewhitespace();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parselparen();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$parsewhitespace();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsename();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parsewhitespace();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsename();
		                        if (s13 !== peg$FAILED) {
		                          s10 = [s10, s11, s12, s13];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  while (s9 !== peg$FAILED) {
		                    s8.push(s9);
		                    s9 = peg$currPos;
		                    s10 = peg$parsewhitespace();
		                    if (s10 !== peg$FAILED) {
		                      s11 = peg$parsecomma();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsename();
		                          if (s13 !== peg$FAILED) {
		                            s10 = [s10, s11, s12, s13];
		                            s9 = s10;
		                          } else {
		                            peg$currPos = s9;
		                            s9 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s6 = [s6, s7, s8];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsewhitespace();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s2 = [s2, s3, s4, s5, s6, s7];
		                    s1 = s2;
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c40(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseordering_term() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseexpr();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parseCOLLATE();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsename();
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseASC();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseDESC();
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecompound_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUNION();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseALL();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parseINTERSECT();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseALL();
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s2 = [s2, s3];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		        if (s1 === peg$FAILED) {
		          s1 = peg$currPos;
		          s2 = peg$parseEXCEPT();
		          if (s2 !== peg$FAILED) {
		            s3 = peg$parseALL();
		            if (s3 === peg$FAILED) {
		              s3 = null;
		            }
		            if (s3 !== peg$FAILED) {
		              s2 = [s2, s3];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c41(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseupdate_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUPDATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsequalified_table_name();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseSET();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$currPos;
		          s7 = peg$parsename();
		          if (s7 !== peg$FAILED) {
		            s8 = peg$parseequal();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parseexpr();
		              if (s9 !== peg$FAILED) {
		                s7 = [s7, s8, s9];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s6;
		            s6 = peg$FAILED;
		          }
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsecomma();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parsename();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseequal();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsecomma();
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseWHERE();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseupdate_stmt_limited() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUPDATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsequalified_table_name();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseSET();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$currPos;
		          s7 = peg$parsename();
		          if (s7 !== peg$FAILED) {
		            s8 = peg$parseequal();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parseexpr();
		              if (s9 !== peg$FAILED) {
		                s7 = [s7, s8, s9];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s6;
		            s6 = peg$FAILED;
		          }
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsecomma();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parsename();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseequal();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsecomma();
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseWHERE();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$currPos;
		          s5 = peg$parseORDER();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseBY();
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parseordering_term();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsecomma();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parseordering_term();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsecomma();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s5 = [s5, s6, s7];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseLIMIT();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$currPos;
		                s9 = peg$parseOFFSET();
		                if (s9 === peg$FAILED) {
		                  s9 = peg$parsecomma();
		                }
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseexpr();
		                  if (s10 !== peg$FAILED) {
		                    s9 = [s9, s10];
		                    s8 = s9;
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 === peg$FAILED) {
		                  s8 = null;
		                }
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsequalified_table_name() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parsetable_ref();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseINDEXED();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseBY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseNOT();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseINDEXED();
		            if (s4 !== peg$FAILED) {
		              s3 = [s3, s4];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsetable_ref() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      s4 = peg$parsename();
		      if (s4 !== peg$FAILED) {
		        s5 = peg$parsedot();
		        if (s5 !== peg$FAILED) {
		          s4 = [s4, s5];
		          s3 = s4;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        peg$savedPos = s2;
		        s3 = peg$c42(s3);
		      }
		      s2 = s3;
		      if (s2 === peg$FAILED) {
		        s2 = null;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c30(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c43(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecolumn_ref() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      s4 = peg$parsename();
		      if (s4 !== peg$FAILED) {
		        s5 = peg$parsedot();
		        if (s5 !== peg$FAILED) {
		          s4 = [s4, s5];
		          s3 = s4;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        peg$savedPos = s2;
		        s3 = peg$c44(s3);
		      }
		      s2 = s3;
		      if (s2 === peg$FAILED) {
		        s2 = null;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c45(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c43(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseagg_column_ref() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseagg_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsecolumn_ref();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parserparen();
		              if (s6 !== peg$FAILED) {
		                s2 = [s2, s3, s4, s5, s6];
		                s1 = s2;
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c46(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecalc_ref() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsecalc_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsenumeric_literal();
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsenumeric_literal();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecomma();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsenumeric_literal();
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parserparen();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c47(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsehelper_ref() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsehelper_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsestring_literal();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parsecolumn_ref();
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsestring_literal();
		                  if (s10 === peg$FAILED) {
		                    s10 = peg$parsecolumn_ref();
		                  }
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecomma();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsestring_literal();
		                    if (s10 === peg$FAILED) {
		                      s10 = peg$parsecolumn_ref();
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parserparen();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c48(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsedot() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 46) {
		        s0 = peg$c49;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c50); }
		      }

		      return s0;
		    }

		    function peg$parsecomma() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 44) {
		        s0 = peg$c51;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c52); }
		      }

		      return s0;
		    }

		    function peg$parsesemicolon() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 59) {
		        s0 = peg$c53;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c54); }
		      }

		      return s0;
		    }

		    function peg$parseminusminus() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c55) {
		        s0 = peg$c55;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c56); }
		      }

		      return s0;
		    }

		    function peg$parseminus() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 45) {
		        s0 = peg$c57;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c58); }
		      }

		      return s0;
		    }

		    function peg$parseplus() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 43) {
		        s0 = peg$c59;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c60); }
		      }

		      return s0;
		    }

		    function peg$parsedivide() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 47) {
		        s0 = peg$c61;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c62); }
		      }

		      return s0;
		    }

		    function peg$parsemodulo() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 37) {
		        s0 = peg$c63;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c64); }
		      }

		      return s0;
		    }

		    function peg$parselparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 40) {
		        s0 = peg$c65;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c66); }
		      }

		      return s0;
		    }

		    function peg$parserparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 41) {
		        s0 = peg$c67;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c68); }
		      }

		      return s0;
		    }

		    function peg$parsestar() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 42) {
		        s0 = peg$c69;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c70); }
		      }

		      return s0;
		    }

		    function peg$parsenewline() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 10) {
		        s0 = peg$c71;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c72); }
		      }

		      return s0;
		    }

		    function peg$parseanything_except_newline() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c73.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c74); }
		      }
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        if (peg$c73.test(input.charAt(peg$currPos))) {
		          s1 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s1 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c74); }
		        }
		      }

		      return s0;
		    }

		    function peg$parsecomment_beg() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c75) {
		        s0 = peg$c75;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c76); }
		      }

		      return s0;
		    }

		    function peg$parsecomment_end() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c77) {
		        s0 = peg$c77;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c78); }
		      }

		      return s0;
		    }

		    function peg$parseanything_except_comment_end() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = [];
		      if (input.length > peg$currPos) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c79); }
		      }
		      while (s2 !== peg$FAILED) {
		        s1.push(s2);
		        if (input.length > peg$currPos) {
		          s2 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c79); }
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        peg$silentFails++;
		        if (input.substr(peg$currPos, 2) === peg$c77) {
		          s3 = peg$c77;
		          peg$currPos += 2;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c78); }
		        }
		        peg$silentFails--;
		        if (s3 !== peg$FAILED) {
		          peg$currPos = s2;
		          s2 = void 0;
		        } else {
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsestring_literal() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 34) {
		        s1 = peg$c80;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c81); }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$parseescape_char();
		        if (s3 === peg$FAILED) {
		          if (peg$c82.test(input.charAt(peg$currPos))) {
		            s3 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c83); }
		          }
		        }
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          s3 = peg$parseescape_char();
		          if (s3 === peg$FAILED) {
		            if (peg$c82.test(input.charAt(peg$currPos))) {
		              s3 = input.charAt(peg$currPos);
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c83); }
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 34) {
		            s3 = peg$c80;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c81); }
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseescape_char() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 92) {
		        s1 = peg$c84;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c85); }
		      }
		      if (s1 !== peg$FAILED) {
		        if (input.length > peg$currPos) {
		          s2 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c79); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsenil() {
		      var s0;

		      s0 = peg$c86;

		      return s0;
		    }

		    function peg$parsewhitespace() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c87.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c88); }
		      }
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        if (peg$c87.test(input.charAt(peg$currPos))) {
		          s1 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s1 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c88); }
		        }
		      }

		      return s0;
		    }

		    function peg$parsewhitespace1() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c87.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c88); }
		      }
		      if (s1 !== peg$FAILED) {
		        while (s1 !== peg$FAILED) {
		          s0.push(s1);
		          if (peg$c87.test(input.charAt(peg$currPos))) {
		            s1 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s1 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c88); }
		          }
		        }
		      } else {
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseunary_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.charCodeAt(peg$currPos) === 45) {
		          s3 = peg$c57;
		          peg$currPos++;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c58); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 43) {
		            s3 = peg$c59;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c60); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.charCodeAt(peg$currPos) === 126) {
		              s3 = peg$c89;
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c90); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {
		                s3 = input.substr(peg$currPos, 3);
		                peg$currPos += 3;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c92); }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c93(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsebinary_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2) === peg$c94) {
		          s3 = peg$c94;
		          peg$currPos += 2;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c95); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 42) {
		            s3 = peg$c69;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c70); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.charCodeAt(peg$currPos) === 47) {
		              s3 = peg$c61;
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c62); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.charCodeAt(peg$currPos) === 37) {
		                s3 = peg$c63;
		                peg$currPos++;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c64); }
		              }
		              if (s3 === peg$FAILED) {
		                if (input.charCodeAt(peg$currPos) === 43) {
		                  s3 = peg$c59;
		                  peg$currPos++;
		                } else {
		                  s3 = peg$FAILED;
		                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
		                }
		                if (s3 === peg$FAILED) {
		                  if (input.charCodeAt(peg$currPos) === 45) {
		                    s3 = peg$c57;
		                    peg$currPos++;
		                  } else {
		                    s3 = peg$FAILED;
		                    if (peg$silentFails === 0) { peg$fail(peg$c58); }
		                  }
		                  if (s3 === peg$FAILED) {
		                    if (input.substr(peg$currPos, 2) === peg$c96) {
		                      s3 = peg$c96;
		                      peg$currPos += 2;
		                    } else {
		                      s3 = peg$FAILED;
		                      if (peg$silentFails === 0) { peg$fail(peg$c97); }
		                    }
		                    if (s3 === peg$FAILED) {
		                      if (input.substr(peg$currPos, 2) === peg$c98) {
		                        s3 = peg$c98;
		                        peg$currPos += 2;
		                      } else {
		                        s3 = peg$FAILED;
		                        if (peg$silentFails === 0) { peg$fail(peg$c99); }
		                      }
		                      if (s3 === peg$FAILED) {
		                        if (input.charCodeAt(peg$currPos) === 38) {
		                          s3 = peg$c100;
		                          peg$currPos++;
		                        } else {
		                          s3 = peg$FAILED;
		                          if (peg$silentFails === 0) { peg$fail(peg$c101); }
		                        }
		                        if (s3 === peg$FAILED) {
		                          if (input.charCodeAt(peg$currPos) === 124) {
		                            s3 = peg$c102;
		                            peg$currPos++;
		                          } else {
		                            s3 = peg$FAILED;
		                            if (peg$silentFails === 0) { peg$fail(peg$c103); }
		                          }
		                          if (s3 === peg$FAILED) {
		                            if (input.substr(peg$currPos, 2) === peg$c104) {
		                              s3 = peg$c104;
		                              peg$currPos += 2;
		                            } else {
		                              s3 = peg$FAILED;
		                              if (peg$silentFails === 0) { peg$fail(peg$c105); }
		                            }
		                            if (s3 === peg$FAILED) {
		                              if (input.substr(peg$currPos, 2) === peg$c106) {
		                                s3 = peg$c106;
		                                peg$currPos += 2;
		                              } else {
		                                s3 = peg$FAILED;
		                                if (peg$silentFails === 0) { peg$fail(peg$c107); }
		                              }
		                              if (s3 === peg$FAILED) {
		                                if (input.charCodeAt(peg$currPos) === 60) {
		                                  s3 = peg$c108;
		                                  peg$currPos++;
		                                } else {
		                                  s3 = peg$FAILED;
		                                  if (peg$silentFails === 0) { peg$fail(peg$c109); }
		                                }
		                                if (s3 === peg$FAILED) {
		                                  if (input.charCodeAt(peg$currPos) === 62) {
		                                    s3 = peg$c110;
		                                    peg$currPos++;
		                                  } else {
		                                    s3 = peg$FAILED;
		                                    if (peg$silentFails === 0) { peg$fail(peg$c111); }
		                                  }
		                                  if (s3 === peg$FAILED) {
		                                    if (input.charCodeAt(peg$currPos) === 61) {
		                                      s3 = peg$c112;
		                                      peg$currPos++;
		                                    } else {
		                                      s3 = peg$FAILED;
		                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
		                                    }
		                                    if (s3 === peg$FAILED) {
		                                      if (input.substr(peg$currPos, 2) === peg$c114) {
		                                        s3 = peg$c114;
		                                        peg$currPos += 2;
		                                      } else {
		                                        s3 = peg$FAILED;
		                                        if (peg$silentFails === 0) { peg$fail(peg$c115); }
		                                      }
		                                      if (s3 === peg$FAILED) {
		                                        if (input.substr(peg$currPos, 2) === peg$c116) {
		                                          s3 = peg$c116;
		                                          peg$currPos += 2;
		                                        } else {
		                                          s3 = peg$FAILED;
		                                          if (peg$silentFails === 0) { peg$fail(peg$c117); }
		                                        }
		                                        if (s3 === peg$FAILED) {
		                                          if (input.substr(peg$currPos, 2) === peg$c118) {
		                                            s3 = peg$c118;
		                                            peg$currPos += 2;
		                                          } else {
		                                            s3 = peg$FAILED;
		                                            if (peg$silentFails === 0) { peg$fail(peg$c119); }
		                                          }
		                                          if (s3 === peg$FAILED) {
		                                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c120) {
		                                              s3 = input.substr(peg$currPos, 2);
		                                              peg$currPos += 2;
		                                            } else {
		                                              s3 = peg$FAILED;
		                                              if (peg$silentFails === 0) { peg$fail(peg$c121); }
		                                            }
		                                            if (s3 === peg$FAILED) {
		                                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c122) {
		                                                s3 = input.substr(peg$currPos, 6);
		                                                peg$currPos += 6;
		                                              } else {
		                                                s3 = peg$FAILED;
		                                                if (peg$silentFails === 0) { peg$fail(peg$c123); }
		                                              }
		                                              if (s3 === peg$FAILED) {
		                                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {
		                                                  s3 = input.substr(peg$currPos, 2);
		                                                  peg$currPos += 2;
		                                                } else {
		                                                  s3 = peg$FAILED;
		                                                  if (peg$silentFails === 0) { peg$fail(peg$c125); }
		                                                }
		                                                if (s3 === peg$FAILED) {
		                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c126) {
		                                                    s3 = input.substr(peg$currPos, 4);
		                                                    peg$currPos += 4;
		                                                  } else {
		                                                    s3 = peg$FAILED;
		                                                    if (peg$silentFails === 0) { peg$fail(peg$c127); }
		                                                  }
		                                                  if (s3 === peg$FAILED) {
		                                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
		                                                      s3 = input.substr(peg$currPos, 4);
		                                                      peg$currPos += 4;
		                                                    } else {
		                                                      s3 = peg$FAILED;
		                                                      if (peg$silentFails === 0) { peg$fail(peg$c129); }
		                                                    }
		                                                    if (s3 === peg$FAILED) {
		                                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c130) {
		                                                        s3 = input.substr(peg$currPos, 5);
		                                                        peg$currPos += 5;
		                                                      } else {
		                                                        s3 = peg$FAILED;
		                                                        if (peg$silentFails === 0) { peg$fail(peg$c131); }
		                                                      }
		                                                      if (s3 === peg$FAILED) {
		                                                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c132) {
		                                                          s3 = input.substr(peg$currPos, 6);
		                                                          peg$currPos += 6;
		                                                        } else {
		                                                          s3 = peg$FAILED;
		                                                          if (peg$silentFails === 0) { peg$fail(peg$c133); }
		                                                        }
		                                                        if (s3 === peg$FAILED) {
		                                                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
		                                                            s3 = input.substr(peg$currPos, 3);
		                                                            peg$currPos += 3;
		                                                          } else {
		                                                            s3 = peg$FAILED;
		                                                            if (peg$silentFails === 0) { peg$fail(peg$c135); }
		                                                          }
		                                                          if (s3 === peg$FAILED) {
		                                                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c136) {
		                                                              s3 = input.substr(peg$currPos, 2);
		                                                              peg$currPos += 2;
		                                                            } else {
		                                                              s3 = peg$FAILED;
		                                                              if (peg$silentFails === 0) { peg$fail(peg$c137); }
		                                                            }
		                                                          }
		                                                        }
		                                                      }
		                                                    }
		                                                  }
		                                                }
		                                              }
		                                            }
		                                          }
		                                        }
		                                      }
		                                    }
		                                  }
		                                }
		                              }
		                            }
		                          }
		                        }
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c93(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseagg_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c138) {
		          s3 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c139); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {
		            s3 = input.substr(peg$currPos, 3);
		            peg$currPos += 3;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c141); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {
		              s3 = input.substr(peg$currPos, 3);
		              peg$currPos += 3;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c143); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {
		                s3 = input.substr(peg$currPos, 3);
		                peg$currPos += 3;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c145); }
		              }
		              if (s3 === peg$FAILED) {
		                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
		                  s3 = input.substr(peg$currPos, 3);
		                  peg$currPos += 3;
		                } else {
		                  s3 = peg$FAILED;
		                  if (peg$silentFails === 0) { peg$fail(peg$c147); }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c93(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsehelper_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c148) {
		          s3 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c149); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c150) {
		            s3 = input.substr(peg$currPos, 3);
		            peg$currPos += 3;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c151); }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c93(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecalc_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c152) {
		          s3 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c153); }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c93(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsedigit() {
		      var s0;

		      if (peg$c154.test(input.charAt(peg$currPos))) {
		        s0 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c155); }
		      }

		      return s0;
		    }

		    function peg$parsenumber() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$parsedigit();
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          s2 = peg$parsedigit();
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsedot();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$parsedigit();
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$parsedigit();
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }
		      if (s0 === peg$FAILED) {
		        s0 = peg$currPos;
		        s1 = peg$parsedot();
		        if (s1 !== peg$FAILED) {
		          s2 = [];
		          s3 = peg$parsedigit();
		          if (s3 !== peg$FAILED) {
		            while (s3 !== peg$FAILED) {
		              s2.push(s3);
		              s3 = peg$parsedigit();
		            }
		          } else {
		            s2 = peg$FAILED;
		          }
		          if (s2 !== peg$FAILED) {
		            s1 = [s1, s2];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      }

		      return s0;
		    }

		    function peg$parseequal() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 61) {
		        s0 = peg$c112;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c113); }
		      }

		      return s0;
		    }

		    function peg$parsename() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c156.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c157); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c156.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c157); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c158(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsebind_parameter() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 63) {
		        s1 = peg$c159;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c160); }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_TIME() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c161) {
		        s0 = peg$c161;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c162); }
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_DATE() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c161) {
		        s0 = peg$c161;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c162); }
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_TIMESTAMP() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c161) {
		        s0 = peg$c161;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c162); }
		      }

		      return s0;
		    }

		    function peg$parseend_of_input() {
		      var s0;

		      s0 = peg$c86;

		      return s0;
		    }

		    function peg$parseABORT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c164); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseACTION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c165) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c166); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseADD() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c150) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c151); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAFTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c167) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c168); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseALL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c169) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c170); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseALTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c171) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c172); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseANALYZE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c173) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c174); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAND() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c135); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c175) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c176); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseASC() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c178); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseATTACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c179) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c180); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAUTOINCREMENT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c181) {
		          s2 = input.substr(peg$currPos, 13);
		          peg$currPos += 13;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c182); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBEFORE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c183) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c184); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBEGIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c185) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c186); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBETWEEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c187) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c188); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c189) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c190); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCASCADE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c191) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c192); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c193) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c194); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCAST() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c195) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c196); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCHECK() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c197) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c198); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOLLATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c199) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c200); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOLUMN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c201) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c202); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOMMIT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c203) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c204); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCONFLICT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c205) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c206); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCONSTRAINT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c207) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c208); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCREATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c210); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCROSS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c211) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c212); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDATABASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c213) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c214); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFAULT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c215) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c216); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFERRABLE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c217) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c218); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFERRED() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c219) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c220); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDELETE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c221) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c222); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDESC() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c224); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDETACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c226); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDISTINCT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c228); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDROP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c229) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c230); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseE() {
		      var s0;

		      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c231) {
		        s0 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c232); }
		      }

		      return s0;
		    }

		    function peg$parseEACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c233) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c234); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseELSE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c236); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEND() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c237) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c238); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseESCAPE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c239) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c240); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXCEPT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c241) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c242); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXCLUSIVE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c243) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c244); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXISTS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c245) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c246); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXPLAIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c247) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c248); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFAIL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c249) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c250); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFOR() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c251) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c252); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFOREIGN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c253) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c254); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFROM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c255) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c256); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c257) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c258); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseGLOB() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c129); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseGROUP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c259) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c260); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseHAVING() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c261) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c262); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIF() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c263) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c264); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIGNORE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c265) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c266); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIMMEDIATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c267) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c268); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c124) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c125); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINDEX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c269) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c270); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINDEXED() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c271) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c272); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINITIALLY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c273) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c274); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINNER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c275) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c276); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINSERT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c277) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c278); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINSTEAD() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c279) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c280); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINTERSECT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c281) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c282); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINTO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c283) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c284); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c120) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c121); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseISNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c285) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c286); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseJOIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c287) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c288); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseKEY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c289) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c290); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLEFT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c291) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c292); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLIKE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c126) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c127); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLIMIT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c293) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c294); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMATCH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c130) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c131); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNATURAL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c295) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c296); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c297) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c298); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNOT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c91) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c92); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNOTNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c299) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c300); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c301) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c302); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOF() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c303) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c304); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOFFSET() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c305) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c306); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseON() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c307) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c308); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOR() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c136) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c137); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseORDER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c309) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c310); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOUTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c311) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c312); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePLAN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c313) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c314); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePRAGMA() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c315) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c316); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePRIMARY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c317) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c318); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseQUERY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c319) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c320); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRAISE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c321) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c322); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREFERENCES() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c323) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c324); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREGEXP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c132) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c133); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREINDEX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c325) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c326); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRELEASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c327) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c328); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRENAME() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c329) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c330); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREPLACE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c331) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c332); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRESTRICT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c333) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c334); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRIGHT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c335) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c336); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseROLLBACK() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c337) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c338); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseROW() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c339) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c340); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSAVEPOINT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c341) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c342); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSELECT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c343) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c344); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSET() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c345) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c346); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTABLE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c347) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c348); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTEMP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c349) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c350); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTEMPORARY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c351) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c352); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTHEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c353) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c354); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c355) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c356); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTRANSACTION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c357) {
		          s2 = input.substr(peg$currPos, 11);
		          peg$currPos += 11;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c358); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTRIGGER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c359) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c360); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUNION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c362); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUNIQUE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c363) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c364); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUPDATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c365) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c366); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUSING() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c367) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c368); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVACUUM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c369) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c370); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVALUES() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c371) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c372); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVIEW() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c373) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c374); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVIRTUAL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c375) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c376); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWHEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c377) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c378); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWHERE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c379) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c380); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOUNT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c138) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c139); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSUM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c141); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c144) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c145); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMAX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c147); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAVG() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c143); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWITH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c381) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c382); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }


		      // Header/utility functions for sql.pegjs grammar match bodies.
		      //
		      function append(arr, x) {
		        arr[arr.length] = x;
		        return arr;
		      }

		      function flatten(x, rejectSpace, acc) {
		        acc = acc || [];
		        if (x == null || x == undefined) {
		          if (!rejectSpace) {
		            return append(acc, x);
		          }
		          return acc;
		        }
		        if (x.length == undefined) { // Just an object, not a string or array.
		          return append(acc, x);
		        }
		        if (rejectSpace &&
		          ((x.length == 0) ||
		           (typeof(x) == "string" &&
		            x.match(/^\s*$/)))) {
		          return acc;
		        }
		        if (typeof(x) == "string") {
		          return append(acc, x);
		        }
		        for (var i = 0; i < x.length; i++) {
		          flatten(x[i], rejectSpace, acc);
		        }
		        return acc;
		      }

		      function flatstr(x, rejectSpace, joinChar) {
		        return flatten(x, rejectSpace, []).join(joinChar || '');
		      }

		      function filter(arr, x) {
		        var acc = [];
		        for (var i = 0; i < arr.length; i++) {
		          if (arr[i] != x) {
		            acc[acc.length] = arr[i];
		          }
		        }
		        return acc;
		      }

		      function nonempty(x) {             // Ex: nonempty("") == null;
		        if (x == null || x.length > 0) { // Ex: nonempty(null) == null;
		          return x;
		        }
		        return null;
		       }

		      function put_if_not_null(m, key, val) {
		        if (val) {
		          m[key] = val;
		        }
		        return m;
		      }
		      function merge(src, dst) {
		        for (var k in src) {
		          dst[k] = src[k];
		        }
		        return dst;
		      }


		    peg$result = peg$startRuleFunction();

		    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		      return peg$result;
		    } else {
		      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
		        peg$fail({ type: "end", description: "end of input" });
		      }

		      throw peg$buildException(
		        null,
		        peg$maxFailExpected,
		        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
		        peg$maxFailPos < input.length
		          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
		          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		      );
		    }
		  }

		  return {
		    SyntaxError: peg$SyntaxError,
		    parse:       peg$parse
		  };
		})();