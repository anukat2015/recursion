(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	module.exports = (function() {
		  "use strict";

		  /*
		   * Generated by PEG.js 0.9.0.
		   *
		   * http://pegjs.org/
		   */

		  function peg$subclass(child, parent) {
		    function ctor() { this.constructor = child; }
		    ctor.prototype = parent.prototype;
		    child.prototype = new ctor();
		  }

		  function peg$SyntaxError(message, expected, found, location) {
		    this.message  = message;
		    this.expected = expected;
		    this.found    = found;
		    this.location = location;
		    this.name     = "SyntaxError";

		    if (typeof Error.captureStackTrace === "function") {
		      Error.captureStackTrace(this, peg$SyntaxError);
		    }
		  }

		  peg$subclass(peg$SyntaxError, Error);

		  function peg$parse(input) {
		    var options = arguments.length > 1 ? arguments[1] : {},
		        parser  = this,

		        peg$FAILED = {},

		        peg$startRuleFunctions = { start: peg$parsestart },
		        peg$startRuleFunction  = peg$parsestart,

		        peg$c0 = function(g, d, e, t) {	
		            	var db = {};
		            	db.group = g;
		                db.desc = d;
		                db.example = e;
		                db.wrongType = false;
		                db.table = t; 
		                for(var i in db.table){
		                	if(db.table[i].wrongType){
		                    	db.wrongType = true;
		                        break;
		                    }
		                }
		                return db;
		            },
		        peg$c1 = function(g) {return g[4]},
		        peg$c2 = function(d) {if(d == null){
		            	return null;
		            }
		            else{
		            	var desc = {};
		                desc.desc1 = d[0][4];
		                desc.src = d[0][5] == null ? null : d[0][5][1];
		                desc.url = d[0][6] == null ? null : d[0][6][2];
		                desc.desc2 = d[0][7];
		                return desc;
		            }
		        	},
		        peg$c3 = function(e1) { return e1;},
		        peg$c4 = "]]",
		        peg$c5 = { type: "literal", value: "]]", description: "\"]]\"" },
		        peg$c6 = { type: "any", description: "any character" },
		        peg$c7 = function(e) {
		        	var fixed = [];
		        		for(var i in e){
		                	fixed.push(e[i][1]);
		                }
		            	
		            var res = fixed.join("").split(";");
		            for(var i in res){
		            	res[i] = res[i].trim();
		            }
		            return res.reverse();
		        },
		        peg$c8 = function(d) {return d[4];},
		        peg$c9 = function(t, d) {return {name:t,header:d.head,wrongType:d.wrongType,data:d.entry}},
		        peg$c10 = function(h, e) {	var data = {};
		            	data.head = h.head;
		                data.wrongType = h.wrongType;
		            	data.entry = e;
		            	return data;
		            },
		        peg$c11 = function(h1, h2) {	var headFull = {};
		            	headFull.head = [];
		                headFull.wrongType = false;
		            	var head = headFull.head;
		                if(h1[2] == null){
		                	head.push({name:h1[0]})
		                }
		                else{
		                	if(h1[2][2][1] instanceof Array){
		                    	head.push({name:h1[0],type:"string"});
		                        headFull.wrongType = true;
		                    }
		                    else{
		                		head.push({name:h1[0],type:h1[2][2][1]});
		        			}
		                }
		                
		                for(var i in h2){
		                	if(h2[i][4] == null){
		                    	head.push({name:h2[i][2]});
		                    }
		                    else{
		                    	if(h2[i][4][2][1] instanceof Array){
		                        	head.push({name:h2[i][2],type:"string"});
		                            headFull.wrongType = true;
		                        }
		                        else{
		                			head.push({name:h2[i][2],type:h2[i][4][2][1]});
		        				}
		        			}
		                }
		            	return headFull;
		            },
		        peg$c12 = function(e1, e2) {
		            	var data = [];
		                data.push(e1[0]);
		                for(var i in e2){
		                	data.push(e2[i][2]);
		                }
		                return data;
		            },
		        peg$c13 = /^[A-Za-z_\xC4\xE4\xD6\xF6\xDC\xFC]/,
		        peg$c14 = { type: "class", value: "[A-Za-z_\xC4\xE4\xD6\xF6\xDC\xFC]", description: "[A-Za-z_\xC4\xE4\xD6\xF6\xDC\xFC]" },
		        peg$c15 = function(str) { return str.join('') },
		        peg$c16 = /^[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC\/,:\-.() ]/,
		        peg$c17 = { type: "class", value: "[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC/,:\\-\\.\\(\\) ]", description: "[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC/,:\\-\\.\\(\\) ]" },
		        peg$c18 = function(str) { return str.join("").trim() },
		        peg$c19 = /^[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC\/,:\-. ]/,
		        peg$c20 = { type: "class", value: "[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC/,:\\-\\. ]", description: "[A-Za-z0-9\xC4\xE4\xD6\xF6\xDC\xFC/,:\\-\\. ]" },
		        peg$c21 = /^[^\n]/,
		        peg$c22 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
		        peg$c23 = function(d) {return d.join("");},
		        peg$c24 = function(d) { 
		            var fixed = [];
		        		for(var i in d){
		                	fixed.push(d[i][1]);
		                }
		               return fixed.join("");
		            },
		        peg$c25 = function(str) {return str.join('')},
		        peg$c26 = /^[0-9]/,
		        peg$c27 = { type: "class", value: "[0-9]", description: "[0-9]" },
		        peg$c28 = function(digits) { var x = flatstr(digits);
		            if (x.indexOf('.') >= 0) {
		              return parseFloat(x);
		            }
		            return parseInt(x);
		          },
		        peg$c29 = /^[a-zA-Z0-9\-.]/,
		        peg$c30 = { type: "class", value: "[a-zA-Z0-9\\-.]", description: "[a-zA-Z0-9\\-.]" },
		        peg$c31 = function(o) {
		            var str = o.join("");
		            if(isNaN(str)){
		            	return str;
		            }
		            else{
		            	if(str.indexOf('.') >= 0){
		                	return parseFloat(str);
		                }
		                else{
		                	return parseInt(str);   
		        		}
		            }
		        	},
		        peg$c32 = /^[ \t\n\r]/,
		        peg$c33 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
		        peg$c34 = /^[\n]/,
		        peg$c35 = { type: "class", value: "[\\n]", description: "[\\n]" },
		        peg$c36 = ".",
		        peg$c37 = { type: "literal", value: ".", description: "\".\"" },
		        peg$c38 = ",",
		        peg$c39 = { type: "literal", value: ",", description: "\",\"" },
		        peg$c40 = ":",
		        peg$c41 = { type: "literal", value: ":", description: "\":\"" },
		        peg$c42 = ";",
		        peg$c43 = { type: "literal", value: ";", description: "\";\"" },
		        peg$c44 = "(",
		        peg$c45 = { type: "literal", value: "(", description: "\"(\"" },
		        peg$c46 = ")",
		        peg$c47 = { type: "literal", value: ")", description: "\")\"" },
		        peg$c48 = "[",
		        peg$c49 = { type: "literal", value: "[", description: "\"[\"" },
		        peg$c50 = "]",
		        peg$c51 = { type: "literal", value: "]", description: "\"]\"" },
		        peg$c52 = "{",
		        peg$c53 = { type: "literal", value: "{", description: "\"{\"" },
		        peg$c54 = "}",
		        peg$c55 = { type: "literal", value: "}", description: "\"}\"" },
		        peg$c56 = "=",
		        peg$c57 = { type: "literal", value: "=", description: "\"=\"" },
		        peg$c58 = "'",
		        peg$c59 = { type: "literal", value: "'", description: "\"'\"" },
		        peg$c60 = "number",
		        peg$c61 = { type: "literal", value: "NUMBER", description: "\"NUMBER\"" },
		        peg$c62 = "string",
		        peg$c63 = { type: "literal", value: "STRING", description: "\"STRING\"" },
		        peg$c64 = /^[a-zA-Z]/,
		        peg$c65 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
		        peg$c66 = "group",
		        peg$c67 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
		        peg$c68 = "description",
		        peg$c69 = { type: "literal", value: "DESCRIPTION", description: "\"DESCRIPTION\"" },
		        peg$c70 = "example",
		        peg$c71 = { type: "literal", value: "EXAMPLE", description: "\"EXAMPLE\"" },

		        peg$currPos          = 0,
		        peg$savedPos         = 0,
		        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
		        peg$maxFailPos       = 0,
		        peg$maxFailExpected  = [],
		        peg$silentFails      = 0,

		        peg$result;

		    if ("startRule" in options) {
		      if (!(options.startRule in peg$startRuleFunctions)) {
		        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
		      }

		      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		    }

		    function text() {
		      return input.substring(peg$savedPos, peg$currPos);
		    }

		    function location() {
		      return peg$computeLocation(peg$savedPos, peg$currPos);
		    }

		    function expected(description) {
		      throw peg$buildException(
		        null,
		        [{ type: "other", description: description }],
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function error(message) {
		      throw peg$buildException(
		        message,
		        null,
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function peg$computePosDetails(pos) {
		      var details = peg$posDetailsCache[pos],
		          p, ch;

		      if (details) {
		        return details;
		      } else {
		        p = pos - 1;
		        while (!peg$posDetailsCache[p]) {
		          p--;
		        }

		        details = peg$posDetailsCache[p];
		        details = {
		          line:   details.line,
		          column: details.column,
		          seenCR: details.seenCR
		        };

		        while (p < pos) {
		          ch = input.charAt(p);
		          if (ch === "\n") {
		            if (!details.seenCR) { details.line++; }
		            details.column = 1;
		            details.seenCR = false;
		          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
		            details.line++;
		            details.column = 1;
		            details.seenCR = true;
		          } else {
		            details.column++;
		            details.seenCR = false;
		          }

		          p++;
		        }

		        peg$posDetailsCache[pos] = details;
		        return details;
		      }
		    }

		    function peg$computeLocation(startPos, endPos) {
		      var startPosDetails = peg$computePosDetails(startPos),
		          endPosDetails   = peg$computePosDetails(endPos);

		      return {
		        start: {
		          offset: startPos,
		          line:   startPosDetails.line,
		          column: startPosDetails.column
		        },
		        end: {
		          offset: endPos,
		          line:   endPosDetails.line,
		          column: endPosDetails.column
		        }
		      };
		    }

		    function peg$fail(expected) {
		      if (peg$currPos < peg$maxFailPos) { return; }

		      if (peg$currPos > peg$maxFailPos) {
		        peg$maxFailPos = peg$currPos;
		        peg$maxFailExpected = [];
		      }

		      peg$maxFailExpected.push(expected);
		    }

		    function peg$buildException(message, expected, found, location) {
		      function cleanupExpected(expected) {
		        var i = 1;

		        expected.sort(function(a, b) {
		          if (a.description < b.description) {
		            return -1;
		          } else if (a.description > b.description) {
		            return 1;
		          } else {
		            return 0;
		          }
		        });

		        while (i < expected.length) {
		          if (expected[i - 1] === expected[i]) {
		            expected.splice(i, 1);
		          } else {
		            i++;
		          }
		        }
		      }

		      function buildMessage(expected, found) {
		        function stringEscape(s) {
		          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

		          return s
		            .replace(/\\/g,   '\\\\')
		            .replace(/"/g,    '\\"')
		            .replace(/\x08/g, '\\b')
		            .replace(/\t/g,   '\\t')
		            .replace(/\n/g,   '\\n')
		            .replace(/\f/g,   '\\f')
		            .replace(/\r/g,   '\\r')
		            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
		            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
		            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
		            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
		        }

		        var expectedDescs = new Array(expected.length),
		            expectedDesc, foundDesc, i;

		        for (i = 0; i < expected.length; i++) {
		          expectedDescs[i] = expected[i].description;
		        }

		        expectedDesc = expected.length > 1
		          ? expectedDescs.slice(0, -1).join(", ")
		              + " or "
		              + expectedDescs[expected.length - 1]
		          : expectedDescs[0];

		        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

		        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
		      }

		      if (expected !== null) {
		        cleanupExpected(expected);
		      }

		      return new peg$SyntaxError(
		        message !== null ? message : buildMessage(expected, found),
		        expected,
		        found,
		        location
		      );
		    }

		    function peg$parsestart() {
		      var s0;

		      s0 = peg$parsedatabase();

		      return s0;
		    }

		    function peg$parsedatabase() {
		      var s0;

		      s0 = peg$parsemultiDatabase();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsesingleDatabase();
		      }

		      return s0;
		    }

		    function peg$parsemultiDatabase() {
		      var s0, s1;

		      s0 = [];
		      s1 = peg$parsesingleDatabase();
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        s1 = peg$parsesingleDatabase();
		      }

		      return s0;
		    }

		    function peg$parsesingleDatabase() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$parseparseGroup();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseparseDescMarkdownSingle();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parseparseDescMarkdownMulti();
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseparseExamples();
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseparseTables();
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s0;
		              s1 = peg$c0(s1, s2, s3, s4);
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseparseGroup() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseGROUP();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsecolon();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsewhitespace();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsegroupName();
		              if (s6 !== peg$FAILED) {
		                s2 = [s2, s3, s4, s5, s6];
		                s1 = s2;
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace1();
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c1(s1);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseparseDesc() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = peg$parseDESC();
		      if (s3 !== peg$FAILED) {
		        s4 = peg$parsewhitespace();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsecolon();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsewhitespace();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsegroupDesc();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$currPos;
		                s9 = peg$parselsquare();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsegroupDesc();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsersquare();
		                    if (s11 !== peg$FAILED) {
		                      s9 = [s9, s10, s11];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 === peg$FAILED) {
		                  s8 = null;
		                }
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$currPos;
		                  s10 = peg$parsewhitespace();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parselparen();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsegroupDesc();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parserparen();
		                        if (s13 !== peg$FAILED) {
		                          s10 = [s10, s11, s12, s13];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 === peg$FAILED) {
		                    s9 = null;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsegroupDesc();
		                    if (s10 === peg$FAILED) {
		                      s10 = null;
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s2;
		        s2 = peg$FAILED;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace1();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c2(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseparseExamples() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

		      s0 = peg$currPos;
		      s1 = peg$parseEXAMPLE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parselsquare();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parselsquare();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseexample();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsersquare();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parsersquare();
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parsewhitespace1();
		                    if (s8 !== peg$FAILED) {
		                      peg$savedPos = s0;
		                      s1 = peg$c3(s5);
		                      s0 = s1;
		                    } else {
		                      peg$currPos = s0;
		                      s0 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s0;
		                    s0 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseexample() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      peg$silentFails++;
		      if (input.substr(peg$currPos, 2) === peg$c4) {
		        s4 = peg$c4;
		        peg$currPos += 2;
		      } else {
		        s4 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c5); }
		      }
		      peg$silentFails--;
		      if (s4 === peg$FAILED) {
		        s3 = void 0;
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        if (input.length > peg$currPos) {
		          s4 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s4 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c6); }
		        }
		        if (s4 !== peg$FAILED) {
		          s3 = [s3, s4];
		          s2 = s3;
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s2;
		        s2 = peg$FAILED;
		      }
		      while (s2 !== peg$FAILED) {
		        s1.push(s2);
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        peg$silentFails++;
		        if (input.substr(peg$currPos, 2) === peg$c4) {
		          s4 = peg$c4;
		          peg$currPos += 2;
		        } else {
		          s4 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c5); }
		        }
		        peg$silentFails--;
		        if (s4 === peg$FAILED) {
		          s3 = void 0;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 !== peg$FAILED) {
		          if (input.length > peg$currPos) {
		            s4 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s4 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c6); }
		          }
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c7(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseparseDescMarkdownSingle() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseDESC();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsecolon();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsewhitespace();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsegroupDescSingle();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsewhitespace1();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c8(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseparseDescMarkdownMulti() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseDESC();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselsquare();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parselsquare();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsegroupDescMulti();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsersquare();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parsersquare();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsewhitespace1();
		                    if (s9 !== peg$FAILED) {
		                      s2 = [s2, s3, s4, s5, s6, s7, s8, s9];
		                      s1 = s2;
		                    } else {
		                      peg$currPos = s1;
		                      s1 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c8(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseparseTables() {
		      var s0, s1;

		      s0 = [];
		      s1 = peg$parseparseTable();
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        s1 = peg$parseparseTable();
		      }

		      return s0;
		    }

		    function peg$parseparseTable() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseequals();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsewhitespace();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parselcurly();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsewhitespace();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parseparseData();
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parsewhitespace();
		                    if (s8 !== peg$FAILED) {
		                      s9 = peg$parsercurly();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parsewhitespace();
		                        if (s10 !== peg$FAILED) {
		                          peg$savedPos = s0;
		                          s1 = peg$c9(s1, s7);
		                          s0 = s1;
		                        } else {
		                          peg$currPos = s0;
		                          s0 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s0;
		                        s0 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s0;
		                      s0 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s0;
		                    s0 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseparseData() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseparseDataHead();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseparseDataEntry();
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c10(s1, s2);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseparseDataHead() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsename();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parsecolon();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsewhitespace();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseSTRING();
		              if (s7 === peg$FAILED) {
		                s7 = peg$parseNUMBER();
		                if (s7 === peg$FAILED) {
		                  s7 = peg$parseOTHER();
		                }
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parsewhitespace();
		                if (s8 !== peg$FAILED) {
		                  s5 = [s5, s6, s7, s8];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$currPos;
		        s4 = peg$parsecomma();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsewhitespace();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsename();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsewhitespace();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$currPos;
		                s9 = peg$parsecolon();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsewhitespace();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parseSTRING();
		                    if (s11 === peg$FAILED) {
		                      s11 = peg$parseNUMBER();
		                      if (s11 === peg$FAILED) {
		                        s11 = peg$parseOTHER();
		                      }
		                    }
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s9 = [s9, s10, s11, s12];
		                        s8 = s9;
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 === peg$FAILED) {
		                  s8 = null;
		                }
		                if (s8 !== peg$FAILED) {
		                  s4 = [s4, s5, s6, s7, s8];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          s3 = peg$currPos;
		          s4 = peg$parsecomma();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsewhitespace();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsewhitespace();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$currPos;
		                  s9 = peg$parsecolon();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsewhitespace();
		                    if (s10 !== peg$FAILED) {
		                      s11 = peg$parseSTRING();
		                      if (s11 === peg$FAILED) {
		                        s11 = peg$parseNUMBER();
		                        if (s11 === peg$FAILED) {
		                          s11 = peg$parseOTHER();
		                        }
		                      }
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s9 = [s9, s10, s11, s12];
		                          s8 = s9;
		                        } else {
		                          peg$currPos = s8;
		                          s8 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                  if (s8 === peg$FAILED) {
		                    s8 = null;
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s4 = [s4, s5, s6, s7, s8];
		                    s3 = s4;
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c11(s1, s2);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseparseDataEntry() {
		      var s0, s1;

		      s0 = [];
		      s1 = peg$parseparseDataEntryLine();
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        s1 = peg$parseparseDataEntryLine();
		      }

		      return s0;
		    }

		    function peg$parseparseDataEntryLine() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsedataString();
		      if (s2 === peg$FAILED) {
		        s2 = peg$parsedataOther();
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$currPos;
		        s4 = peg$parsecomma();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsewhitespace();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsedataString();
		            if (s6 === peg$FAILED) {
		              s6 = peg$parsedataOther();
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsewhitespace();
		              if (s7 !== peg$FAILED) {
		                s4 = [s4, s5, s6, s7];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          s3 = peg$currPos;
		          s4 = peg$parsecomma();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsewhitespace();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedataString();
		              if (s6 === peg$FAILED) {
		                s6 = peg$parsedataOther();
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsewhitespace();
		                if (s7 !== peg$FAILED) {
		                  s4 = [s4, s5, s6, s7];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c12(s1, s2);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsename() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c13.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c14); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c13.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c14); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c15(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsegroupName() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c16.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c17); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c16.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c17); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c18(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsegroupDesc() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c19.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c20); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c19.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c20); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c18(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsegroupDescSingle() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c21.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c22); }
		      }
		      while (s2 !== peg$FAILED) {
		        s1.push(s2);
		        if (peg$c21.test(input.charAt(peg$currPos))) {
		          s2 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c22); }
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c23(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsegroupDescMulti() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      peg$silentFails++;
		      if (input.substr(peg$currPos, 2) === peg$c4) {
		        s4 = peg$c4;
		        peg$currPos += 2;
		      } else {
		        s4 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c5); }
		      }
		      peg$silentFails--;
		      if (s4 === peg$FAILED) {
		        s3 = void 0;
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        if (input.length > peg$currPos) {
		          s4 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s4 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c6); }
		        }
		        if (s4 !== peg$FAILED) {
		          s3 = [s3, s4];
		          s2 = s3;
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s2;
		        s2 = peg$FAILED;
		      }
		      while (s2 !== peg$FAILED) {
		        s1.push(s2);
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        peg$silentFails++;
		        if (input.substr(peg$currPos, 2) === peg$c4) {
		          s4 = peg$c4;
		          peg$currPos += 2;
		        } else {
		          s4 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c5); }
		        }
		        peg$silentFails--;
		        if (s4 === peg$FAILED) {
		          s3 = void 0;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 !== peg$FAILED) {
		          if (input.length > peg$currPos) {
		            s4 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s4 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c6); }
		          }
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c24(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsedouble_close() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c4) {
		        s0 = peg$c4;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c5); }
		      }

		      return s0;
		    }

		    function peg$parsedataString() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parsequote();
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$parsegroupName();
		        if (s3 !== peg$FAILED) {
		          while (s3 !== peg$FAILED) {
		            s2.push(s3);
		            s3 = peg$parsegroupName();
		          }
		        } else {
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsequote();
		          if (s3 !== peg$FAILED) {
		            peg$savedPos = s0;
		            s1 = peg$c25(s2);
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedigit() {
		      var s0;

		      if (peg$c26.test(input.charAt(peg$currPos))) {
		        s0 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c27); }
		      }

		      return s0;
		    }

		    function peg$parsedataNumber() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = [];
		      s3 = peg$parsedigit();
		      if (s3 !== peg$FAILED) {
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          s3 = peg$parsedigit();
		        }
		      } else {
		        s2 = peg$FAILED;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsedot();
		        if (s4 !== peg$FAILED) {
		          s5 = [];
		          s6 = peg$parsedigit();
		          if (s6 !== peg$FAILED) {
		            while (s6 !== peg$FAILED) {
		              s5.push(s6);
		              s6 = peg$parsedigit();
		            }
		          } else {
		            s5 = peg$FAILED;
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parsedot();
		        if (s2 !== peg$FAILED) {
		          s3 = [];
		          s4 = peg$parsedigit();
		          if (s4 !== peg$FAILED) {
		            while (s4 !== peg$FAILED) {
		              s3.push(s4);
		              s4 = peg$parsedigit();
		            }
		          } else {
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s2 = [s2, s3];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c28(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsedataOther() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c29.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c30); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c29.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c30); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c31(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsewhitespace() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c32.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c33); }
		      }
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        if (peg$c32.test(input.charAt(peg$currPos))) {
		          s1 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s1 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c33); }
		        }
		      }

		      return s0;
		    }

		    function peg$parsewhitespace1() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c32.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c33); }
		      }
		      if (s1 !== peg$FAILED) {
		        while (s1 !== peg$FAILED) {
		          s0.push(s1);
		          if (peg$c32.test(input.charAt(peg$currPos))) {
		            s1 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s1 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c33); }
		          }
		        }
		      } else {
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsenewline() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c34.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c35); }
		      }
		      if (s1 !== peg$FAILED) {
		        while (s1 !== peg$FAILED) {
		          s0.push(s1);
		          if (peg$c34.test(input.charAt(peg$currPos))) {
		            s1 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s1 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c35); }
		          }
		        }
		      } else {
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedot() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 46) {
		        s0 = peg$c36;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c37); }
		      }

		      return s0;
		    }

		    function peg$parsecomma() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 44) {
		        s0 = peg$c38;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c39); }
		      }

		      return s0;
		    }

		    function peg$parsecolon() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 58) {
		        s0 = peg$c40;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c41); }
		      }

		      return s0;
		    }

		    function peg$parsesemicolon() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 59) {
		        s0 = peg$c42;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c43); }
		      }

		      return s0;
		    }

		    function peg$parselparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 40) {
		        s0 = peg$c44;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c45); }
		      }

		      return s0;
		    }

		    function peg$parserparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 41) {
		        s0 = peg$c46;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c47); }
		      }

		      return s0;
		    }

		    function peg$parselsquare() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 91) {
		        s0 = peg$c48;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c49); }
		      }

		      return s0;
		    }

		    function peg$parsersquare() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 93) {
		        s0 = peg$c50;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c51); }
		      }

		      return s0;
		    }

		    function peg$parselcurly() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 123) {
		        s0 = peg$c52;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c53); }
		      }

		      return s0;
		    }

		    function peg$parsercurly() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 125) {
		        s0 = peg$c54;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c55); }
		      }

		      return s0;
		    }

		    function peg$parseequals() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 61) {
		        s0 = peg$c56;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c57); }
		      }

		      return s0;
		    }

		    function peg$parsequote() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 39) {
		        s0 = peg$c58;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c59); }
		      }

		      return s0;
		    }

		    function peg$parseNUMBER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c60) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c61); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSTRING() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c62) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c63); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOTHER() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        if (peg$c64.test(input.charAt(peg$currPos))) {
		          s3 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c65); }
		        }
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          if (peg$c64.test(input.charAt(peg$currPos))) {
		            s3 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c65); }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseGROUP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c66) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c67); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDESC() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c68) {
		          s2 = input.substr(peg$currPos, 11);
		          peg$currPos += 11;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c69); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXAMPLE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c70) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c71); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }


		    function append(arr, x) {
		        arr[arr.length] = x;
		        return arr;
		      }

		    function flatten(x, rejectSpace, acc) {
		        acc = acc || [];
		        if (x == null || x == undefined) {
		          if (!rejectSpace) {
		            return append(acc, x);
		          }
		          return acc;
		        }
		        if (x.length == undefined) { // Just an object, not a string or array.
		          return append(acc, x);
		        }
		        if (rejectSpace &&
		          ((x.length == 0) ||
		           (typeof(x) == "string" &&
		            x.match(/^\s*$/)))) {
		          return acc;
		        }
		        if (typeof(x) == "string") {
		          return append(acc, x);
		        }
		        for (var i = 0; i < x.length; i++) {
		          flatten(x[i], rejectSpace, acc);
		        }
		        return acc;
		      }

		    function flatstr(x, rejectSpace, joinChar) {
		        return flatten(x, rejectSpace, []).join(joinChar || '');
		     }


		    peg$result = peg$startRuleFunction();

		    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		      return peg$result;
		    } else {
		      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
		        peg$fail({ type: "end", description: "end of input" });
		      }

		      throw peg$buildException(
		        null,
		        peg$maxFailExpected,
		        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
		        peg$maxFailPos < input.length
		          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
		          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		      );
		    }
		  }

		  return {
		    SyntaxError: peg$SyntaxError,
		    parse:       peg$parse
		  };
		})();
	//TODO this todo just serves as an indicator to find the start/end of the parsers
},{}],2:[function(require,module,exports){
	module.exports = (function() {
		  "use strict";

		  /*
		   * Generated by PEG.js 0.9.0.
		   *
		   * http://pegjs.org/
		   */

		  function peg$subclass(child, parent) {
		    function ctor() { this.constructor = child; }
		    ctor.prototype = parent.prototype;
		    child.prototype = new ctor();
		  }

		  function peg$SyntaxError(message, expected, found, location) {
		    this.message  = message;
		    this.expected = expected;
		    this.found    = found;
		    this.location = location;
		    this.name     = "SyntaxError";

		    if (typeof Error.captureStackTrace === "function") {
		      Error.captureStackTrace(this, peg$SyntaxError);
		    }
		  }

		  peg$subclass(peg$SyntaxError, Error);

		  function peg$parse(input) {
		    var options = arguments.length > 1 ? arguments[1] : {},
		        parser  = this,

		        peg$FAILED = {},

		        peg$startRuleFunctions = { start: peg$parsestart },
		        peg$startRuleFunction  = peg$parsestart,

		        peg$c0 = function(r) { return filter(flatten(r, true), ';') },
		        peg$c1 = function(explain, stmt) { return put_if_not_null(stmt, "explain", nonempty(flatstr(explain))) },
		        peg$c2 = function(clause_def, cname, clause_att, query_def, outer_query) { var res = {};
		            	res.clause_name = cname;
		                res.clause_att = filter(flatten(clause_att),',');
		                res.query_def = query_def;
		                res.outer_query = outer_query;
		            	return res;
		            },
		        peg$c3 = function(n) { 
		          if(n[0] != null){
		          	n[1][0][0].unshift(n[0]);
		          }
		          return n[1];},
		        peg$c4 = function(x) { return { literal: x } },
		        peg$c5 = function(c) {return c;},
		        peg$c6 = function(b) { return { bind: b } },
		        peg$c7 = function(t) { return { column: t[2], table: t[0] } },
		        peg$c8 = function(c) { return { column: c } },
		        peg$c9 = function(v) { return v[1] },
		        peg$c10 = function(e) { return e[1]; },
		        peg$c11 = function(v) {return v[1]},
		        peg$c12 = function(e) {return e[1]},
		        peg$c13 = function(digits) { var x = flatstr(digits);
		        	return x;
		            if (x.indexOf('.') >= 0) {
		              return parseFloat(x);
		            }
		            return parseInt(x);
		          },
		        peg$c14 = function(digits) { 
		          
		          return digits; 
		          var x = flatstr(digits);
		          
		          	return x;
		            if (x.indexOf('.') >= 0) {
		              return parseFloat(x);
		            }
		            return parseInt(x);
		          },
		        peg$c15 = function(sc) { var acc = [];
		                                    for (var i = 0; i < sc.length; i++) {
		                                      acc[i] = merge(sc[i][0], sc[i][1]);
		                                    }
		                                    return acc;
		                                  },
		        peg$c16 = function(select_cores, order_by, limit) { var res = { stmt: "select",
		                        select_cores: flatten(select_cores, true) };
		            res = put_if_not_null(res, "order_by", nonempty(order_by));
		            res = put_if_not_null(res, "limit", nonempty(limit));
		            return res;
		          },
		        peg$c17 = function(d, cx) { var acc = [];
		                                for (var i = 0; i < cx.length; i++) {
		                                  acc[i] = cx[i][2];
		                                }
		                                return acc;
		                              },
		        peg$c18 = function(d, c, j) { return j ? j[1] : [] },
		        peg$c19 = function(d, c, f, e) { return e ? e[1] : [] },
		        peg$c20 = function(d, c, f, w, g) { c[1].unshift(c[0]);
		            var res = { results: c[1] };
		            res = put_if_not_null(res, "distinct", nonempty(flatstr(d)));
		            res = put_if_not_null(res, "from", nonempty(f));
		            res = put_if_not_null(res, "where", nonempty(w));
		            res = put_if_not_null(res, "group_by", nonempty(g));
		            return res;
		          },
		        peg$c21 = function(a) { return { alias: a[2] } },
		        peg$c22 = function(c) { return merge(c[1], c[0]) },
		        peg$c23 = function(c) {
		                         return merge(c[1],c[0]);
		                        },
		        peg$c24 = function(c) {
		                        
		                        return merge(c[1],c[0]);
		                        
		                        
		                        var flat = flatten(c,true)
		                        var ret = {};
		                        ret.func = c[0][0];
		                        ret.att = [];
		                        var first = c[0][3][1].join("");
		                        ret.att.push(first);
		                        
		                        var temp = c[0][4]
		                        for(var i in temp){
		                        	ret.att.push(temp[i][1][1].join(""));
		                        }
		                        return merge(c[1],ret);
		                        },
		        peg$c25 = function() { return { column: '*' } },
		        peg$c26 = function(c) {return merge(c[1],{numeric:c[0]})},
		        peg$c27 = function(c) { return { table: c[0],
		                                 column: '*' } },
		        peg$c28 = function(c) {return merge(c[1],{string:c[0][1].join("")}) },
		        peg$c29 = function(r) { return r[1] },
		        peg$c30 = function(s) { var acc = [s[1]];
		            var rest = s[2];
		            for (var i = 0; rest != null && i < rest.length; i++) {
		              acc[acc.length] = merge(merge(rest[i][0], rest[i][2]), rest[i][3]);
		            }
		            return acc;
		          },
		        peg$c31 = function(x) { return { database: x[0], table: x[2], alias: x[5] } },
		        peg$c32 = function(x) { return { database: x[0], table: x[2] } },
		        peg$c33 = function(x) { return { table: x[0], alias: x[3] } },
		        peg$c34 = function(x) { return { table: x } },
		        peg$c35 = function(t) { return merge(t[1], t[0]) },
		        peg$c36 = function(idx) { return { indexed_by: idx[3] } },
		        peg$c37 = function() { return { indexed_by: null } },
		        peg$c38 = function(s) { return merge(s[1], s[0]) },
		        peg$c39 = function(p) { return merge(p[3], p[1]) },
		        peg$c40 = function(j) { return j[1] },
		        peg$c41 = function() { return "JOIN" },
		        peg$c42 = function(j) { return flatstr(j) },
		        peg$c43 = function(r) { return { join_op: r } },
		        peg$c44 = function(r) { return { join_constraint: nonempty(r) } },
		        peg$c45 = function(o) { return { compound_operator: flatstr(o) } },
		        peg$c46 = function(d) { return { database: d[0] } },
		        peg$c47 = function(r) { return merge(r[1], r[0]) },
		        peg$c48 = function(t) { return { table: t[0] } },
		        peg$c49 = function(x) { return { column: x } },
		        peg$c50 = function(r) { return merge(r[0], r[1]) },
		        peg$c51 = function(a) { return merge(a[3],{ agg: a[0] } ) },
		        peg$c52 = function(c) {var ret = {};
		            ret.func = c[0];
		            var first = c[3][0];

		        	if(!first.hasOwnProperty("column")){
		        		first = flatstr(first);
		            }
		            
		        	ret.att = [];
		            ret.att.push(first);
		            ret.att.push(c[3][2]); //op1
		            var second = c[3][4]; //lit2
		            if(!second.hasOwnProperty("column")){
		        		second = flatstr(second);
		            }
		            ret.att.push(second);
		            
		            var rest = c[3][5];
		            
		            for(var i in rest){
		        		ret.att.push(flatstr(rest[i][1]));
		                if(!rest[i][3].hasOwnProperty("column")){
		                	ret.att.push(flatstr(rest[i][3]));
		                }
		            	else{
		                	ret.att.push(rest[i][3]);
		                }
		            }
		            

		            return ret;
		            },
		        peg$c53 = function(h) {var ret = {};
		            ret.func = h[0];
		        	ret.att = [];
		            
		            if(h[3].hasOwnProperty("column")){
		            	ret.att.push(h[3]);
		            }
		            else{
		            	ret.att.push(h[3][1].join(""));
		            }
		            
		            for(var i = 0; i < h[4].length; i++){
		            	if(h[4][i][2].hasOwnProperty("column")){
		                	ret.att.push(h[4][i][2]);
		                }
		                else{
		            		ret.att.push(h[4][i][2][1].join(""));
		                }
		            }
		            
		            return ret; },
		        peg$c54 = ".",
		        peg$c55 = { type: "literal", value: ".", description: "\".\"" },
		        peg$c56 = ",",
		        peg$c57 = { type: "literal", value: ",", description: "\",\"" },
		        peg$c58 = ";",
		        peg$c59 = { type: "literal", value: ";", description: "\";\"" },
		        peg$c60 = "--",
		        peg$c61 = { type: "literal", value: "--", description: "\"--\"" },
		        peg$c62 = "-",
		        peg$c63 = { type: "literal", value: "-", description: "\"-\"" },
		        peg$c64 = "+",
		        peg$c65 = { type: "literal", value: "+", description: "\"+\"" },
		        peg$c66 = "/",
		        peg$c67 = { type: "literal", value: "/", description: "\"/\"" },
		        peg$c68 = "%",
		        peg$c69 = { type: "literal", value: "%", description: "\"%\"" },
		        peg$c70 = "(",
		        peg$c71 = { type: "literal", value: "(", description: "\"(\"" },
		        peg$c72 = ")",
		        peg$c73 = { type: "literal", value: ")", description: "\")\"" },
		        peg$c74 = "*",
		        peg$c75 = { type: "literal", value: "*", description: "\"*\"" },
		        peg$c76 = "\n",
		        peg$c77 = { type: "literal", value: "\n", description: "\"\\n\"" },
		        peg$c78 = /^[^\n]/,
		        peg$c79 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
		        peg$c80 = "/*",
		        peg$c81 = { type: "literal", value: "/*", description: "\"/*\"" },
		        peg$c82 = "*/",
		        peg$c83 = { type: "literal", value: "*/", description: "\"*/\"" },
		        peg$c84 = { type: "any", description: "any character" },
		        peg$c85 = "\"",
		        peg$c86 = { type: "literal", value: "\"", description: "\"\\\"\"" },
		        peg$c87 = /^[^"]/,
		        peg$c88 = { type: "class", value: "[^\"]", description: "[^\"]" },
		        peg$c89 = "\\",
		        peg$c90 = { type: "literal", value: "\\", description: "\"\\\\\"" },
		        peg$c91 = "",
		        peg$c92 = /^[ \t\n\r]/,
		        peg$c93 = { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
		        peg$c94 = "~",
		        peg$c95 = { type: "literal", value: "~", description: "\"~\"" },
		        peg$c96 = "not",
		        peg$c97 = { type: "literal", value: "NOT", description: "\"NOT\"" },
		        peg$c98 = function(x) { return x[1] },
		        peg$c99 = "||",
		        peg$c100 = { type: "literal", value: "||", description: "\"||\"" },
		        peg$c101 = "<<",
		        peg$c102 = { type: "literal", value: "<<", description: "\"<<\"" },
		        peg$c103 = ">>",
		        peg$c104 = { type: "literal", value: ">>", description: "\">>\"" },
		        peg$c105 = "&",
		        peg$c106 = { type: "literal", value: "&", description: "\"&\"" },
		        peg$c107 = "|",
		        peg$c108 = { type: "literal", value: "|", description: "\"|\"" },
		        peg$c109 = "<=",
		        peg$c110 = { type: "literal", value: "<=", description: "\"<=\"" },
		        peg$c111 = ">=",
		        peg$c112 = { type: "literal", value: ">=", description: "\">=\"" },
		        peg$c113 = "<",
		        peg$c114 = { type: "literal", value: "<", description: "\"<\"" },
		        peg$c115 = ">",
		        peg$c116 = { type: "literal", value: ">", description: "\">\"" },
		        peg$c117 = "=",
		        peg$c118 = { type: "literal", value: "=", description: "\"=\"" },
		        peg$c119 = "==",
		        peg$c120 = { type: "literal", value: "==", description: "\"==\"" },
		        peg$c121 = "!=",
		        peg$c122 = { type: "literal", value: "!=", description: "\"!=\"" },
		        peg$c123 = "<>",
		        peg$c124 = { type: "literal", value: "<>", description: "\"<>\"" },
		        peg$c125 = "is",
		        peg$c126 = { type: "literal", value: "IS", description: "\"IS\"" },
		        peg$c127 = "is not",
		        peg$c128 = { type: "literal", value: "IS NOT", description: "\"IS NOT\"" },
		        peg$c129 = "in",
		        peg$c130 = { type: "literal", value: "IN", description: "\"IN\"" },
		        peg$c131 = "like",
		        peg$c132 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
		        peg$c133 = "glob",
		        peg$c134 = { type: "literal", value: "GLOB", description: "\"GLOB\"" },
		        peg$c135 = "match",
		        peg$c136 = { type: "literal", value: "MATCH", description: "\"MATCH\"" },
		        peg$c137 = "regexp",
		        peg$c138 = { type: "literal", value: "REGEXP", description: "\"REGEXP\"" },
		        peg$c139 = "and",
		        peg$c140 = { type: "literal", value: "AND", description: "\"AND\"" },
		        peg$c141 = "or",
		        peg$c142 = { type: "literal", value: "OR", description: "\"OR\"" },
		        peg$c143 = "count",
		        peg$c144 = { type: "literal", value: "COUNT", description: "\"COUNT\"" },
		        peg$c145 = "sum",
		        peg$c146 = { type: "literal", value: "SUM", description: "\"SUM\"" },
		        peg$c147 = "avg",
		        peg$c148 = { type: "literal", value: "AVG", description: "\"AVG\"" },
		        peg$c149 = "min",
		        peg$c150 = { type: "literal", value: "MIN", description: "\"MIN\"" },
		        peg$c151 = "max",
		        peg$c152 = { type: "literal", value: "MAX", description: "\"MAX\"" },
		        peg$c153 = "concat",
		        peg$c154 = { type: "literal", value: "CONCAT", description: "\"CONCAT\"" },
		        peg$c155 = "add",
		        peg$c156 = { type: "literal", value: "ADD", description: "\"ADD\"" },
		        peg$c157 = "calc",
		        peg$c158 = { type: "literal", value: "CALC", description: "\"CALC\"" },
		        peg$c159 = /^[0-9]/,
		        peg$c160 = { type: "class", value: "[0-9]", description: "[0-9]" },
		        peg$c161 = /^[A-Za-z_]/,
		        peg$c162 = { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
		        peg$c163 = function(str) { return str.join('') },
		        peg$c164 = "?",
		        peg$c165 = { type: "literal", value: "?", description: "\"?\"" },
		        peg$c166 = "now",
		        peg$c167 = { type: "literal", value: "now", description: "\"now\"" },
		        peg$c168 = "abort",
		        peg$c169 = { type: "literal", value: "ABORT", description: "\"ABORT\"" },
		        peg$c170 = "action",
		        peg$c171 = { type: "literal", value: "ACTION", description: "\"ACTION\"" },
		        peg$c172 = "after",
		        peg$c173 = { type: "literal", value: "AFTER", description: "\"AFTER\"" },
		        peg$c174 = "all",
		        peg$c175 = { type: "literal", value: "ALL", description: "\"ALL\"" },
		        peg$c176 = "alter",
		        peg$c177 = { type: "literal", value: "ALTER", description: "\"ALTER\"" },
		        peg$c178 = "analyze",
		        peg$c179 = { type: "literal", value: "ANALYZE", description: "\"ANALYZE\"" },
		        peg$c180 = "as",
		        peg$c181 = { type: "literal", value: "AS", description: "\"AS\"" },
		        peg$c182 = "asc",
		        peg$c183 = { type: "literal", value: "ASC", description: "\"ASC\"" },
		        peg$c184 = "attach",
		        peg$c185 = { type: "literal", value: "ATTACH", description: "\"ATTACH\"" },
		        peg$c186 = "autoincrement",
		        peg$c187 = { type: "literal", value: "AUTOINCREMENT", description: "\"AUTOINCREMENT\"" },
		        peg$c188 = "before",
		        peg$c189 = { type: "literal", value: "BEFORE", description: "\"BEFORE\"" },
		        peg$c190 = "begin",
		        peg$c191 = { type: "literal", value: "BEGIN", description: "\"BEGIN\"" },
		        peg$c192 = "between",
		        peg$c193 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
		        peg$c194 = "by",
		        peg$c195 = { type: "literal", value: "BY", description: "\"BY\"" },
		        peg$c196 = "cascade",
		        peg$c197 = { type: "literal", value: "CASCADE", description: "\"CASCADE\"" },
		        peg$c198 = "case",
		        peg$c199 = { type: "literal", value: "CASE", description: "\"CASE\"" },
		        peg$c200 = "cast",
		        peg$c201 = { type: "literal", value: "CAST", description: "\"CAST\"" },
		        peg$c202 = "check",
		        peg$c203 = { type: "literal", value: "CHECK", description: "\"CHECK\"" },
		        peg$c204 = "collate",
		        peg$c205 = { type: "literal", value: "COLLATE", description: "\"COLLATE\"" },
		        peg$c206 = "column",
		        peg$c207 = { type: "literal", value: "COLUMN", description: "\"COLUMN\"" },
		        peg$c208 = "commit",
		        peg$c209 = { type: "literal", value: "COMMIT", description: "\"COMMIT\"" },
		        peg$c210 = "conflict",
		        peg$c211 = { type: "literal", value: "CONFLICT", description: "\"CONFLICT\"" },
		        peg$c212 = "constraint",
		        peg$c213 = { type: "literal", value: "CONSTRAINT", description: "\"CONSTRAINT\"" },
		        peg$c214 = "create",
		        peg$c215 = { type: "literal", value: "CREATE", description: "\"CREATE\"" },
		        peg$c216 = "cross",
		        peg$c217 = { type: "literal", value: "CROSS", description: "\"CROSS\"" },
		        peg$c218 = "database",
		        peg$c219 = { type: "literal", value: "DATABASE", description: "\"DATABASE\"" },
		        peg$c220 = "default",
		        peg$c221 = { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
		        peg$c222 = "deferrable",
		        peg$c223 = { type: "literal", value: "DEFERRABLE", description: "\"DEFERRABLE\"" },
		        peg$c224 = "deferred",
		        peg$c225 = { type: "literal", value: "DEFERRED", description: "\"DEFERRED\"" },
		        peg$c226 = "delete",
		        peg$c227 = { type: "literal", value: "DELETE", description: "\"DELETE\"" },
		        peg$c228 = "desc",
		        peg$c229 = { type: "literal", value: "DESC", description: "\"DESC\"" },
		        peg$c230 = "detach",
		        peg$c231 = { type: "literal", value: "DETACH", description: "\"DETACH\"" },
		        peg$c232 = "distinct",
		        peg$c233 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
		        peg$c234 = "drop",
		        peg$c235 = { type: "literal", value: "DROP", description: "\"DROP\"" },
		        peg$c236 = "e",
		        peg$c237 = { type: "literal", value: "E", description: "\"E\"" },
		        peg$c238 = "each",
		        peg$c239 = { type: "literal", value: "EACH", description: "\"EACH\"" },
		        peg$c240 = "else",
		        peg$c241 = { type: "literal", value: "ELSE", description: "\"ELSE\"" },
		        peg$c242 = "end",
		        peg$c243 = { type: "literal", value: "END", description: "\"END\"" },
		        peg$c244 = "escape",
		        peg$c245 = { type: "literal", value: "ESCAPE", description: "\"ESCAPE\"" },
		        peg$c246 = "except",
		        peg$c247 = { type: "literal", value: "EXCEPT", description: "\"EXCEPT\"" },
		        peg$c248 = "exclusive",
		        peg$c249 = { type: "literal", value: "EXCLUSIVE", description: "\"EXCLUSIVE\"" },
		        peg$c250 = "exists",
		        peg$c251 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
		        peg$c252 = "explain",
		        peg$c253 = { type: "literal", value: "EXPLAIN", description: "\"EXPLAIN\"" },
		        peg$c254 = "fail",
		        peg$c255 = { type: "literal", value: "FAIL", description: "\"FAIL\"" },
		        peg$c256 = "for",
		        peg$c257 = { type: "literal", value: "FOR", description: "\"FOR\"" },
		        peg$c258 = "foreign",
		        peg$c259 = { type: "literal", value: "FOREIGN", description: "\"FOREIGN\"" },
		        peg$c260 = "from",
		        peg$c261 = { type: "literal", value: "FROM", description: "\"FROM\"" },
		        peg$c262 = "full",
		        peg$c263 = { type: "literal", value: "FULL", description: "\"FULL\"" },
		        peg$c264 = "group",
		        peg$c265 = { type: "literal", value: "GROUP", description: "\"GROUP\"" },
		        peg$c266 = "having",
		        peg$c267 = { type: "literal", value: "HAVING", description: "\"HAVING\"" },
		        peg$c268 = "if",
		        peg$c269 = { type: "literal", value: "IF", description: "\"IF\"" },
		        peg$c270 = "ignore",
		        peg$c271 = { type: "literal", value: "IGNORE", description: "\"IGNORE\"" },
		        peg$c272 = "immediate",
		        peg$c273 = { type: "literal", value: "IMMEDIATE", description: "\"IMMEDIATE\"" },
		        peg$c274 = "index",
		        peg$c275 = { type: "literal", value: "INDEX", description: "\"INDEX\"" },
		        peg$c276 = "indexed",
		        peg$c277 = { type: "literal", value: "INDEXED", description: "\"INDEXED\"" },
		        peg$c278 = "initially",
		        peg$c279 = { type: "literal", value: "INITIALLY", description: "\"INITIALLY\"" },
		        peg$c280 = "inner",
		        peg$c281 = { type: "literal", value: "INNER", description: "\"INNER\"" },
		        peg$c282 = "insert",
		        peg$c283 = { type: "literal", value: "INSERT", description: "\"INSERT\"" },
		        peg$c284 = "instead",
		        peg$c285 = { type: "literal", value: "INSTEAD", description: "\"INSTEAD\"" },
		        peg$c286 = "intersect",
		        peg$c287 = { type: "literal", value: "INTERSECT", description: "\"INTERSECT\"" },
		        peg$c288 = "into",
		        peg$c289 = { type: "literal", value: "INTO", description: "\"INTO\"" },
		        peg$c290 = "isnull",
		        peg$c291 = { type: "literal", value: "ISNULL", description: "\"ISNULL\"" },
		        peg$c292 = "join",
		        peg$c293 = { type: "literal", value: "JOIN", description: "\"JOIN\"" },
		        peg$c294 = "key",
		        peg$c295 = { type: "literal", value: "KEY", description: "\"KEY\"" },
		        peg$c296 = "left",
		        peg$c297 = { type: "literal", value: "LEFT", description: "\"LEFT\"" },
		        peg$c298 = "limit",
		        peg$c299 = { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
		        peg$c300 = "natural",
		        peg$c301 = { type: "literal", value: "NATURAL", description: "\"NATURAL\"" },
		        peg$c302 = "no",
		        peg$c303 = { type: "literal", value: "NO", description: "\"NO\"" },
		        peg$c304 = "notnull",
		        peg$c305 = { type: "literal", value: "NOTNULL", description: "\"NOTNULL\"" },
		        peg$c306 = "null",
		        peg$c307 = { type: "literal", value: "NULL", description: "\"NULL\"" },
		        peg$c308 = "of",
		        peg$c309 = { type: "literal", value: "OF", description: "\"OF\"" },
		        peg$c310 = "offset",
		        peg$c311 = { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
		        peg$c312 = "on",
		        peg$c313 = { type: "literal", value: "ON", description: "\"ON\"" },
		        peg$c314 = "order",
		        peg$c315 = { type: "literal", value: "ORDER", description: "\"ORDER\"" },
		        peg$c316 = "outer",
		        peg$c317 = { type: "literal", value: "OUTER", description: "\"OUTER\"" },
		        peg$c318 = "plan",
		        peg$c319 = { type: "literal", value: "PLAN", description: "\"PLAN\"" },
		        peg$c320 = "pragma",
		        peg$c321 = { type: "literal", value: "PRAGMA", description: "\"PRAGMA\"" },
		        peg$c322 = "primary",
		        peg$c323 = { type: "literal", value: "PRIMARY", description: "\"PRIMARY\"" },
		        peg$c324 = "query",
		        peg$c325 = { type: "literal", value: "QUERY", description: "\"QUERY\"" },
		        peg$c326 = "raise",
		        peg$c327 = { type: "literal", value: "RAISE", description: "\"RAISE\"" },
		        peg$c328 = "references",
		        peg$c329 = { type: "literal", value: "REFERENCES", description: "\"REFERENCES\"" },
		        peg$c330 = "reindex",
		        peg$c331 = { type: "literal", value: "REINDEX", description: "\"REINDEX\"" },
		        peg$c332 = "release",
		        peg$c333 = { type: "literal", value: "RELEASE", description: "\"RELEASE\"" },
		        peg$c334 = "rename",
		        peg$c335 = { type: "literal", value: "RENAME", description: "\"RENAME\"" },
		        peg$c336 = "replace",
		        peg$c337 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
		        peg$c338 = "restrict",
		        peg$c339 = { type: "literal", value: "RESTRICT", description: "\"RESTRICT\"" },
		        peg$c340 = "right",
		        peg$c341 = { type: "literal", value: "RIGHT", description: "\"RIGHT\"" },
		        peg$c342 = "rollback",
		        peg$c343 = { type: "literal", value: "ROLLBACK", description: "\"ROLLBACK\"" },
		        peg$c344 = "row",
		        peg$c345 = { type: "literal", value: "ROW", description: "\"ROW\"" },
		        peg$c346 = "savepoint",
		        peg$c347 = { type: "literal", value: "SAVEPOINT", description: "\"SAVEPOINT\"" },
		        peg$c348 = "select",
		        peg$c349 = { type: "literal", value: "SELECT", description: "\"SELECT\"" },
		        peg$c350 = "set",
		        peg$c351 = { type: "literal", value: "SET", description: "\"SET\"" },
		        peg$c352 = "table",
		        peg$c353 = { type: "literal", value: "TABLE", description: "\"TABLE\"" },
		        peg$c354 = "temp",
		        peg$c355 = { type: "literal", value: "TEMP", description: "\"TEMP\"" },
		        peg$c356 = "temporary",
		        peg$c357 = { type: "literal", value: "TEMPORARY", description: "\"TEMPORARY\"" },
		        peg$c358 = "then",
		        peg$c359 = { type: "literal", value: "THEN", description: "\"THEN\"" },
		        peg$c360 = "to",
		        peg$c361 = { type: "literal", value: "TO", description: "\"TO\"" },
		        peg$c362 = "transaction",
		        peg$c363 = { type: "literal", value: "TRANSACTION", description: "\"TRANSACTION\"" },
		        peg$c364 = "trigger",
		        peg$c365 = { type: "literal", value: "TRIGGER", description: "\"TRIGGER\"" },
		        peg$c366 = "union",
		        peg$c367 = { type: "literal", value: "UNION", description: "\"UNION\"" },
		        peg$c368 = "unique",
		        peg$c369 = { type: "literal", value: "UNIQUE", description: "\"UNIQUE\"" },
		        peg$c370 = "update",
		        peg$c371 = { type: "literal", value: "UPDATE", description: "\"UPDATE\"" },
		        peg$c372 = "using",
		        peg$c373 = { type: "literal", value: "USING", description: "\"USING\"" },
		        peg$c374 = "vacuum",
		        peg$c375 = { type: "literal", value: "VACUUM", description: "\"VACUUM\"" },
		        peg$c376 = "values",
		        peg$c377 = { type: "literal", value: "VALUES", description: "\"VALUES\"" },
		        peg$c378 = "view",
		        peg$c379 = { type: "literal", value: "VIEW", description: "\"VIEW\"" },
		        peg$c380 = "virtual",
		        peg$c381 = { type: "literal", value: "VIRTUAL", description: "\"VIRTUAL\"" },
		        peg$c382 = "when",
		        peg$c383 = { type: "literal", value: "WHEN", description: "\"WHEN\"" },
		        peg$c384 = "where",
		        peg$c385 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
		        peg$c386 = "with",
		        peg$c387 = { type: "literal", value: "WITH", description: "\"WITH\"" },

		        peg$currPos          = 0,
		        peg$savedPos         = 0,
		        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
		        peg$maxFailPos       = 0,
		        peg$maxFailExpected  = [],
		        peg$silentFails      = 0,

		        peg$result;

		    if ("startRule" in options) {
		      if (!(options.startRule in peg$startRuleFunctions)) {
		        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
		      }

		      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		    }

		    function text() {
		      return input.substring(peg$savedPos, peg$currPos);
		    }

		    function location() {
		      return peg$computeLocation(peg$savedPos, peg$currPos);
		    }

		    function expected(description) {
		      throw peg$buildException(
		        null,
		        [{ type: "other", description: description }],
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function error(message) {
		      throw peg$buildException(
		        message,
		        null,
		        input.substring(peg$savedPos, peg$currPos),
		        peg$computeLocation(peg$savedPos, peg$currPos)
		      );
		    }

		    function peg$computePosDetails(pos) {
		      var details = peg$posDetailsCache[pos],
		          p, ch;

		      if (details) {
		        return details;
		      } else {
		        p = pos - 1;
		        while (!peg$posDetailsCache[p]) {
		          p--;
		        }

		        details = peg$posDetailsCache[p];
		        details = {
		          line:   details.line,
		          column: details.column,
		          seenCR: details.seenCR
		        };

		        while (p < pos) {
		          ch = input.charAt(p);
		          if (ch === "\n") {
		            if (!details.seenCR) { details.line++; }
		            details.column = 1;
		            details.seenCR = false;
		          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
		            details.line++;
		            details.column = 1;
		            details.seenCR = true;
		          } else {
		            details.column++;
		            details.seenCR = false;
		          }

		          p++;
		        }

		        peg$posDetailsCache[pos] = details;
		        return details;
		      }
		    }

		    function peg$computeLocation(startPos, endPos) {
		      var startPosDetails = peg$computePosDetails(startPos),
		          endPosDetails   = peg$computePosDetails(endPos);

		      return {
		        start: {
		          offset: startPos,
		          line:   startPosDetails.line,
		          column: startPosDetails.column
		        },
		        end: {
		          offset: endPos,
		          line:   endPosDetails.line,
		          column: endPosDetails.column
		        }
		      };
		    }

		    function peg$fail(expected) {
		      if (peg$currPos < peg$maxFailPos) { return; }

		      if (peg$currPos > peg$maxFailPos) {
		        peg$maxFailPos = peg$currPos;
		        peg$maxFailExpected = [];
		      }

		      peg$maxFailExpected.push(expected);
		    }

		    function peg$buildException(message, expected, found, location) {
		      function cleanupExpected(expected) {
		        var i = 1;

		        expected.sort(function(a, b) {
		          if (a.description < b.description) {
		            return -1;
		          } else if (a.description > b.description) {
		            return 1;
		          } else {
		            return 0;
		          }
		        });

		        while (i < expected.length) {
		          if (expected[i - 1] === expected[i]) {
		            expected.splice(i, 1);
		          } else {
		            i++;
		          }
		        }
		      }

		      function buildMessage(expected, found) {
		        function stringEscape(s) {
		          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

		          return s
		            .replace(/\\/g,   '\\\\')
		            .replace(/"/g,    '\\"')
		            .replace(/\x08/g, '\\b')
		            .replace(/\t/g,   '\\t')
		            .replace(/\n/g,   '\\n')
		            .replace(/\f/g,   '\\f')
		            .replace(/\r/g,   '\\r')
		            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
		            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
		            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
		            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
		        }

		        var expectedDescs = new Array(expected.length),
		            expectedDesc, foundDesc, i;

		        for (i = 0; i < expected.length; i++) {
		          expectedDescs[i] = expected[i].description;
		        }

		        expectedDesc = expected.length > 1
		          ? expectedDescs.slice(0, -1).join(", ")
		              + " or "
		              + expectedDescs[expected.length - 1]
		          : expectedDescs[0];

		        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

		        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
		      }

		      if (expected !== null) {
		        cleanupExpected(expected);
		      }

		      return new peg$SyntaxError(
		        message !== null ? message : buildMessage(expected, found),
		        expected,
		        found,
		        location
		      );
		    }

		    function peg$parsestart() {
		      var s0;

		      s0 = peg$parsesql_stmt_list();

		      return s0;
		    }

		    function peg$parsesql_stmt_list() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewith_clause();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsewhitespace();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsesql_stmt();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsewhitespace();
		            if (s4 !== peg$FAILED) {
		              s2 = [s2, s3, s4];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c0(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsesql_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseEXPLAIN();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseQUERY();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsePLAN();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseselect_stmt();
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c1(s1, s2);
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsewith_clause() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

		      s0 = peg$currPos;
		      s1 = peg$parseWITH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace1();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsewhitespace();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parselparen();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsewhitespace();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$currPos;
		                  s8 = peg$parsename();
		                  if (s8 !== peg$FAILED) {
		                    s9 = [];
		                    s10 = peg$currPos;
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsename();
		                        if (s13 !== peg$FAILED) {
		                          s11 = [s11, s12, s13];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parsecomma();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsename();
		                          if (s13 !== peg$FAILED) {
		                            s11 = [s11, s12, s13];
		                            s10 = s11;
		                          } else {
		                            peg$currPos = s10;
		                            s10 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parserparen();
		                    if (s8 !== peg$FAILED) {
		                      s9 = peg$parseAS();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parsewhitespace();
		                        if (s10 !== peg$FAILED) {
		                          s11 = peg$parselparen();
		                          if (s11 !== peg$FAILED) {
		                            s12 = peg$parsewhitespace();
		                            if (s12 !== peg$FAILED) {
		                              s13 = peg$parseselect_stmt();
		                              if (s13 !== peg$FAILED) {
		                                s14 = peg$parsewhitespace();
		                                if (s14 !== peg$FAILED) {
		                                  s15 = peg$parserparen();
		                                  if (s15 !== peg$FAILED) {
		                                    s16 = peg$parseselect_stmt();
		                                    if (s16 !== peg$FAILED) {
		                                      peg$savedPos = s0;
		                                      s1 = peg$c2(s1, s3, s7, s13, s16);
		                                      s0 = s1;
		                                    } else {
		                                      peg$currPos = s0;
		                                      s0 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s0;
		                                    s0 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s0;
		                                  s0 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s0;
		                                s0 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s0;
		                              s0 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s0;
		                            s0 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s0;
		                          s0 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s0;
		                        s0 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s0;
		                      s0 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s0;
		                    s0 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsealter_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseALTER();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTABLE();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsetable_ref();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseRENAME();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTO();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseADD();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseCOLUMN();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsecolumn_def();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseanalyze_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseANALYZE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parsename();
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parsename();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parsedot();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s3 = [s3, s4, s5];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseattach_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseATTACH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDATABASE();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseexpr();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseAS();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsebegin_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseBEGIN();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDEFERRED();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parseIMMEDIATE();
		          if (s2 === peg$FAILED) {
		            s2 = peg$parseEXCLUSIVE();
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseTRANSACTION();
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecommit_stmt() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseCOMMIT();
		      if (s1 === peg$FAILED) {
		        s1 = peg$parseEND();
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRANSACTION();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parserollback_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseROLLBACK();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRANSACTION();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseTO();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseSAVEPOINT();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsesavepoint_stmt() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parseSAVEPOINT();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parserelease_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseRELEASE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseSAVEPOINT();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_index_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseUNIQUE();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseINDEX();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseON();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parselparen();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parseindexed_column();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s10 = [s10, s11];
		                      s9 = s10;
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    while (s9 !== peg$FAILED) {
		                      s8.push(s9);
		                      s9 = peg$currPos;
		                      s10 = peg$parseindexed_column();
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$parsecomma();
		                        if (s11 !== peg$FAILED) {
		                          s10 = [s10, s11];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s8 = peg$FAILED;
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parserparen();
		                    if (s9 !== peg$FAILED) {
		                      s3 = [s3, s4, s5, s6, s7, s8, s9];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseindexed_column() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseCOLLATE();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseASC();
		          if (s3 === peg$FAILED) {
		            s3 = peg$parseDESC();
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTABLE();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsetable_ref();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parselparen();
		          if (s5 !== peg$FAILED) {
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsecolumn_def();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s8 = [s8, s9];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecolumn_def();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s8 = [s8, s9];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		            } else {
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsetable_constraint();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsetable_constraint();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s5 = [s5, s6, s7, s8];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseAS();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseselect_stmt();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecolumn_def() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsetype_name();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = [];
		          s4 = peg$parsecolumn_constraint();
		          if (s4 !== peg$FAILED) {
		            while (s4 !== peg$FAILED) {
		              s3.push(s4);
		              s4 = peg$parsecolumn_constraint();
		            }
		          } else {
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsetype_name() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$parsename();
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          s2 = peg$parsename();
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parselparen();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsesigned_number();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parserparen();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parselparen();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsesigned_number();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsecomma();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsesigned_number();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s3 = [s3, s4, s5, s6, s7];
		                    s2 = s3;
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecolumn_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCONSTRAINT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsePRIMARY();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseKEY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseASC();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseDESC();
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseconflict_clause();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parseAUTOINCREMENT();
		                if (s7 === peg$FAILED) {
		                  s7 = null;
		                }
		                if (s7 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6, s7];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseNOT();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseNULL();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseconflict_clause();
		              if (s5 !== peg$FAILED) {
		                s3 = [s3, s4, s5];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parseUNIQUE();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parseconflict_clause();
		              if (s4 !== peg$FAILED) {
		                s3 = [s3, s4];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		            if (s2 === peg$FAILED) {
		              s2 = peg$currPos;
		              s3 = peg$parseCHECK();
		              if (s3 !== peg$FAILED) {
		                s4 = peg$parselparen();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseexpr();
		                  if (s5 !== peg$FAILED) {
		                    s6 = peg$parserparen();
		                    if (s6 !== peg$FAILED) {
		                      s3 = [s3, s4, s5, s6];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		              if (s2 === peg$FAILED) {
		                s2 = peg$currPos;
		                s3 = peg$parseDEFAULT();
		                if (s3 !== peg$FAILED) {
		                  s4 = peg$parsesigned_number();
		                  if (s4 === peg$FAILED) {
		                    s4 = peg$parseliteral_value();
		                    if (s4 === peg$FAILED) {
		                      s4 = peg$currPos;
		                      s5 = peg$parselparen();
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parseexpr();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$parserparen();
		                          if (s7 !== peg$FAILED) {
		                            s5 = [s5, s6, s7];
		                            s4 = s5;
		                          } else {
		                            peg$currPos = s4;
		                            s4 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    }
		                  }
		                  if (s4 !== peg$FAILED) {
		                    s3 = [s3, s4];
		                    s2 = s3;
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		                if (s2 === peg$FAILED) {
		                  s2 = peg$currPos;
		                  s3 = peg$parseCOLLATE();
		                  if (s3 !== peg$FAILED) {
		                    s4 = peg$parsename();
		                    if (s4 !== peg$FAILED) {
		                      s3 = [s3, s4];
		                      s2 = s3;
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                  if (s2 === peg$FAILED) {
		                    s2 = peg$parseforeign_key_clause();
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsesigned_number() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseplus();
		      if (s2 === peg$FAILED) {
		        s2 = peg$parseminus();
		      }
		      if (s2 === peg$FAILED) {
		        s2 = null;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsenumeric_literal();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c3(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsetable_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCONSTRAINT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsePRIMARY();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseKEY();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseUNIQUE();
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = [];
		            s6 = peg$currPos;
		            s7 = peg$parseindexed_column();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s7 = [s7, s8];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              while (s6 !== peg$FAILED) {
		                s5.push(s6);
		                s6 = peg$currPos;
		                s7 = peg$parseindexed_column();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parsecomma();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              }
		            } else {
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parserparen();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parseconflict_clause();
		                if (s7 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6, s7];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseCHECK();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parselparen();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseexpr();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parserparen();
		                if (s6 !== peg$FAILED) {
		                  s3 = [s3, s4, s5, s6];
		                  s2 = s3;
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		          if (s2 === peg$FAILED) {
		            s2 = peg$currPos;
		            s3 = peg$parseFOREIGN();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parseKEY();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parselparen();
		                if (s5 !== peg$FAILED) {
		                  s6 = [];
		                  s7 = peg$currPos;
		                  s8 = peg$parsename();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsecomma();
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                  if (s7 !== peg$FAILED) {
		                    while (s7 !== peg$FAILED) {
		                      s6.push(s7);
		                      s7 = peg$currPos;
		                      s8 = peg$parsename();
		                      if (s8 !== peg$FAILED) {
		                        s9 = peg$parsecomma();
		                        if (s9 !== peg$FAILED) {
		                          s8 = [s8, s9];
		                          s7 = s8;
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s7;
		                        s7 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s6 = peg$FAILED;
		                  }
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parserparen();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parseforeign_key_clause();
		                      if (s8 !== peg$FAILED) {
		                        s3 = [s3, s4, s5, s6, s7, s8];
		                        s2 = s3;
		                      } else {
		                        peg$currPos = s2;
		                        s2 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s2;
		                      s2 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s2;
		                    s2 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s2;
		                  s2 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseforeign_key_clause() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseREFERENCES();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parselparen();
		          if (s5 !== peg$FAILED) {
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsename();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s8 = [s8, s9];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsename();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s8 = [s8, s9];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		            } else {
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parserparen();
		              if (s7 !== peg$FAILED) {
		                s5 = [s5, s6, s7];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$currPos;
		        s4 = peg$parseON();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseDELETE();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseUPDATE();
		          }
		          if (s5 !== peg$FAILED) {
		            s6 = peg$currPos;
		            s7 = peg$parseSET();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parseNULL();
		              if (s8 !== peg$FAILED) {
		                s7 = [s7, s8];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		            if (s6 === peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseSET();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseDEFAULT();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$parseCASCADE();
		                if (s6 === peg$FAILED) {
		                  s6 = peg$parseRESTRICT();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$currPos;
		                    s7 = peg$parseNO();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parseACTION();
		                      if (s8 !== peg$FAILED) {
		                        s7 = [s7, s8];
		                        s6 = s7;
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  }
		                }
		              }
		            }
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseMATCH();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          while (s3 !== peg$FAILED) {
		            s2.push(s3);
		            s3 = peg$currPos;
		            s4 = peg$parseON();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseDELETE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseUPDATE();
		              }
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseSET();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseNULL();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = peg$currPos;
		                  s7 = peg$parseSET();
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$parseDEFAULT();
		                    if (s8 !== peg$FAILED) {
		                      s7 = [s7, s8];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parseCASCADE();
		                    if (s6 === peg$FAILED) {
		                      s6 = peg$parseRESTRICT();
		                      if (s6 === peg$FAILED) {
		                        s6 = peg$currPos;
		                        s7 = peg$parseNO();
		                        if (s7 !== peg$FAILED) {
		                          s8 = peg$parseACTION();
		                          if (s8 !== peg$FAILED) {
		                            s7 = [s7, s8];
		                            s6 = s7;
		                          } else {
		                            peg$currPos = s6;
		                            s6 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      }
		                    }
		                  }
		                }
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parseMATCH();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s4 = [s4, s5];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            }
		          }
		        } else {
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseNOT();
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseDEFERRABLE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseINITIALLY();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseDEFERRED();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseINITIALLY();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseIMMEDIATE();
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseconflict_clause() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseON();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseCONFLICT();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseROLLBACK();
		          if (s3 === peg$FAILED) {
		            s3 = peg$parseABORT();
		            if (s3 === peg$FAILED) {
		              s3 = peg$parseFAIL();
		              if (s3 === peg$FAILED) {
		                s3 = peg$parseIGNORE();
		                if (s3 === peg$FAILED) {
		                  s3 = peg$parseREPLACE();
		                }
		              }
		            }
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }
		      if (s0 === peg$FAILED) {
		        s0 = null;
		      }

		      return s0;
		    }

		    function peg$parsecreate_trigger_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTRIGGER();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseBEFORE();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseAFTER();
		              if (s5 === peg$FAILED) {
		                s5 = peg$currPos;
		                s6 = peg$parseINSTEAD();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parseOF();
		                  if (s7 !== peg$FAILED) {
		                    s6 = [s6, s7];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              }
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseDELETE();
		          if (s4 === peg$FAILED) {
		            s4 = peg$parseINSERT();
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseUPDATE();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseOF();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parsename();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s10 = [s10, s11];
		                      s9 = s10;
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    while (s9 !== peg$FAILED) {
		                      s8.push(s9);
		                      s9 = peg$currPos;
		                      s10 = peg$parsename();
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$parsecomma();
		                        if (s11 !== peg$FAILED) {
		                          s10 = [s10, s11];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s8 = peg$FAILED;
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s7 = [s7, s8];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseON();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsename();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parseFOR();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseEACH();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseROW();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseWHEN();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseexpr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$parseBEGIN();
		              if (s6 !== peg$FAILED) {
		                s7 = [];
		                s8 = peg$currPos;
		                s9 = peg$parseupdate_stmt();
		                if (s9 === peg$FAILED) {
		                  s9 = peg$parseinsert_stmt();
		                  if (s9 === peg$FAILED) {
		                    s9 = peg$parsedelete_stmt();
		                    if (s9 === peg$FAILED) {
		                      s9 = peg$parseselect_stmt();
		                    }
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsesemicolon();
		                  if (s10 !== peg$FAILED) {
		                    s9 = [s9, s10];
		                    s8 = s9;
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 !== peg$FAILED) {
		                  while (s8 !== peg$FAILED) {
		                    s7.push(s8);
		                    s8 = peg$currPos;
		                    s9 = peg$parseupdate_stmt();
		                    if (s9 === peg$FAILED) {
		                      s9 = peg$parseinsert_stmt();
		                      if (s9 === peg$FAILED) {
		                        s9 = peg$parsedelete_stmt();
		                        if (s9 === peg$FAILED) {
		                          s9 = peg$parseselect_stmt();
		                        }
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s10 = peg$parsesemicolon();
		                      if (s10 !== peg$FAILED) {
		                        s9 = [s9, s10];
		                        s8 = s9;
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  }
		                } else {
		                  s7 = peg$FAILED;
		                }
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseEND();
		                  if (s8 !== peg$FAILED) {
		                    s6 = [s6, s7, s8];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_view_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseTEMP();
		        if (s3 === peg$FAILED) {
		          s3 = peg$parseTEMPORARY();
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseVIEW();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseIF();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseNOT();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseEXISTS();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsedot();
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseAS();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseselect_stmt();
		              if (s6 !== peg$FAILED) {
		                s3 = [s3, s4, s5, s6];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecreate_virtual_table_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseCREATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseVIRTUAL();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseTABLE();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsetable_ref();
		            if (s5 !== peg$FAILED) {
		              s2 = [s2, s3, s4, s5];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseUSING();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parselparen();
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parsename();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsecomma();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parsename();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsecomma();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedelete_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDELETE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseFROM();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsequalified_table_name();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseWHERE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedelete_stmt_limited() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$parseDELETE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseFROM();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsequalified_table_name();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseWHERE();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parseORDER();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseBY();
		                if (s8 !== peg$FAILED) {
		                  s9 = [];
		                  s10 = peg$currPos;
		                  s11 = peg$parseordering_term();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                  if (s10 !== peg$FAILED) {
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parseordering_term();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s11 = [s11, s12];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$currPos;
		                s8 = peg$parseLIMIT();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$currPos;
		                    s11 = peg$parseOFFSET();
		                    if (s11 === peg$FAILED) {
		                      s11 = peg$parsecomma();
		                    }
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parseexpr();
		                      if (s12 !== peg$FAILED) {
		                        s11 = [s11, s12];
		                        s10 = s11;
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    if (s10 === peg$FAILED) {
		                      s10 = null;
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 === peg$FAILED) {
		                s5 = null;
		              }
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedetach_stmt() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseDETACH();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDATABASE();
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_index_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseINDEX();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_table_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTABLE();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsetable_ref();
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_trigger_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseTRIGGER();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsedrop_view_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseDROP();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseVIEW();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseIF();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseEXISTS();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s1 = [s1, s2, s3, s4, s5];
		                s0 = s1;
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsevalue() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseliteral_value();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c4(s4);
		        }
		        s3 = s4;
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parsecolumn_ref();
		          if (s4 !== peg$FAILED) {
		            peg$savedPos = s3;
		            s4 = peg$c5(s4);
		          }
		          s3 = s4;
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parsebind_parameter();
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s3;
		              s4 = peg$c6(s4);
		            }
		            s3 = s4;
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$currPos;
		              s5 = peg$parsename();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsedot();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parsename();
		                  if (s7 !== peg$FAILED) {
		                    s5 = [s5, s6, s7];
		                    s4 = s5;
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		              if (s4 !== peg$FAILED) {
		                peg$savedPos = s3;
		                s4 = peg$c7(s4);
		              }
		              s3 = s4;
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parsename();
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c8(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parseunary_operator();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseexpr();
		                    if (s5 !== peg$FAILED) {
		                      s4 = [s4, s5];
		                      s3 = s4;
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$parsecall_function();
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$parsewhitespace();
		                      if (s4 !== peg$FAILED) {
		                        s5 = peg$parselparen();
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parseexpr();
		                          if (s6 !== peg$FAILED) {
		                            s7 = peg$parsewhitespace();
		                            if (s7 !== peg$FAILED) {
		                              s8 = peg$parserparen();
		                              if (s8 !== peg$FAILED) {
		                                s4 = [s4, s5, s6, s7, s8];
		                                s3 = s4;
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                      if (s3 === peg$FAILED) {
		                        s3 = peg$currPos;
		                        s4 = peg$parseCAST();
		                        if (s4 !== peg$FAILED) {
		                          s5 = peg$parselparen();
		                          if (s5 !== peg$FAILED) {
		                            s6 = peg$parseexpr();
		                            if (s6 !== peg$FAILED) {
		                              s7 = peg$parseAS();
		                              if (s7 !== peg$FAILED) {
		                                s8 = peg$parsetype_name();
		                                if (s8 !== peg$FAILED) {
		                                  s9 = peg$parserparen();
		                                  if (s9 !== peg$FAILED) {
		                                    s4 = [s4, s5, s6, s7, s8, s9];
		                                    s3 = s4;
		                                  } else {
		                                    peg$currPos = s3;
		                                    s3 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                        if (s3 === peg$FAILED) {
		                          s3 = peg$currPos;
		                          s4 = peg$currPos;
		                          s5 = peg$parseNOT();
		                          if (s5 === peg$FAILED) {
		                            s5 = null;
		                          }
		                          if (s5 !== peg$FAILED) {
		                            s6 = peg$parseEXISTS();
		                            if (s6 !== peg$FAILED) {
		                              s5 = [s5, s6];
		                              s4 = s5;
		                            } else {
		                              peg$currPos = s4;
		                              s4 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s4;
		                            s4 = peg$FAILED;
		                          }
		                          if (s4 === peg$FAILED) {
		                            s4 = null;
		                          }
		                          if (s4 !== peg$FAILED) {
		                            s5 = peg$parselparen();
		                            if (s5 !== peg$FAILED) {
		                              s6 = peg$parseselect_stmt();
		                              if (s6 !== peg$FAILED) {
		                                s7 = peg$parserparen();
		                                if (s7 !== peg$FAILED) {
		                                  s4 = [s4, s5, s6, s7];
		                                  s3 = s4;
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                          if (s3 === peg$FAILED) {
		                            s3 = peg$currPos;
		                            s4 = peg$parseCASE();
		                            if (s4 !== peg$FAILED) {
		                              s5 = peg$parseexpr();
		                              if (s5 === peg$FAILED) {
		                                s5 = null;
		                              }
		                              if (s5 !== peg$FAILED) {
		                                s6 = [];
		                                s7 = peg$currPos;
		                                s8 = peg$parseWHEN();
		                                if (s8 !== peg$FAILED) {
		                                  s9 = peg$parseexpr();
		                                  if (s9 !== peg$FAILED) {
		                                    s10 = peg$parseTHEN();
		                                    if (s10 !== peg$FAILED) {
		                                      s11 = peg$parseexpr();
		                                      if (s11 !== peg$FAILED) {
		                                        s8 = [s8, s9, s10, s11];
		                                        s7 = s8;
		                                      } else {
		                                        peg$currPos = s7;
		                                        s7 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                                if (s7 !== peg$FAILED) {
		                                  while (s7 !== peg$FAILED) {
		                                    s6.push(s7);
		                                    s7 = peg$currPos;
		                                    s8 = peg$parseWHEN();
		                                    if (s8 !== peg$FAILED) {
		                                      s9 = peg$parseexpr();
		                                      if (s9 !== peg$FAILED) {
		                                        s10 = peg$parseTHEN();
		                                        if (s10 !== peg$FAILED) {
		                                          s11 = peg$parseexpr();
		                                          if (s11 !== peg$FAILED) {
		                                            s8 = [s8, s9, s10, s11];
		                                            s7 = s8;
		                                          } else {
		                                            peg$currPos = s7;
		                                            s7 = peg$FAILED;
		                                          }
		                                        } else {
		                                          peg$currPos = s7;
		                                          s7 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s7;
		                                        s7 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  }
		                                } else {
		                                  s6 = peg$FAILED;
		                                }
		                                if (s6 !== peg$FAILED) {
		                                  s7 = peg$currPos;
		                                  s8 = peg$parseELSE();
		                                  if (s8 !== peg$FAILED) {
		                                    s9 = peg$parseexpr();
		                                    if (s9 !== peg$FAILED) {
		                                      s8 = [s8, s9];
		                                      s7 = s8;
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                  if (s7 === peg$FAILED) {
		                                    s7 = null;
		                                  }
		                                  if (s7 !== peg$FAILED) {
		                                    s8 = peg$parseEND();
		                                    if (s8 !== peg$FAILED) {
		                                      s4 = [s4, s5, s6, s7, s8];
		                                      s3 = s4;
		                                    } else {
		                                      peg$currPos = s3;
		                                      s3 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s3;
		                                    s3 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                            if (s3 === peg$FAILED) {
		                              s3 = peg$parseraise_function();
		                            }
		                          }
		                        }
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c9(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseexpr() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsevalue();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsebinary_operator();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseboolean_operator();
		          }
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseexpr();
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseagg_column_ref();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsebinary_operator();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseboolean_operator();
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseexpr();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parsevalue();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseCOLLATE();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsename();
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parsevalue();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parseNOT();
		                if (s5 === peg$FAILED) {
		                  s5 = null;
		                }
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$parseLIKE();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parseGLOB();
		                    if (s6 === peg$FAILED) {
		                      s6 = peg$parseREGEXP();
		                      if (s6 === peg$FAILED) {
		                        s6 = peg$parseMATCH();
		                      }
		                    }
		                  }
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parseexpr();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$currPos;
		                      s9 = peg$parseESCAPE();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parseexpr();
		                        if (s10 !== peg$FAILED) {
		                          s9 = [s9, s10];
		                          s8 = s9;
		                        } else {
		                          peg$currPos = s8;
		                          s8 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                      if (s8 === peg$FAILED) {
		                        s8 = null;
		                      }
		                      if (s8 !== peg$FAILED) {
		                        s4 = [s4, s5, s6, s7, s8];
		                        s3 = s4;
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parsevalue();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseISNULL();
		                  if (s5 === peg$FAILED) {
		                    s5 = peg$parseNOTNULL();
		                    if (s5 === peg$FAILED) {
		                      s5 = peg$currPos;
		                      s6 = peg$parseNOT();
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parseNULL();
		                        if (s7 !== peg$FAILED) {
		                          s6 = [s6, s7];
		                          s5 = s6;
		                        } else {
		                          peg$currPos = s5;
		                          s5 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s5;
		                        s5 = peg$FAILED;
		                      }
		                    }
		                  }
		                  if (s5 !== peg$FAILED) {
		                    s4 = [s4, s5];
		                    s3 = s4;
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parsevalue();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseIS();
		                    if (s5 !== peg$FAILED) {
		                      s6 = peg$parseNOT();
		                      if (s6 === peg$FAILED) {
		                        s6 = null;
		                      }
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parseexpr();
		                        if (s7 !== peg$FAILED) {
		                          s4 = [s4, s5, s6, s7];
		                          s3 = s4;
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$parsevalue();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$parseNOT();
		                      if (s5 === peg$FAILED) {
		                        s5 = null;
		                      }
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parseBETWEEN();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$parsevalue();
		                          if (s7 !== peg$FAILED) {
		                            s8 = peg$parseAND();
		                            if (s8 !== peg$FAILED) {
		                              s9 = peg$parsevalue();
		                              if (s9 !== peg$FAILED) {
		                                s4 = [s4, s5, s6, s7, s8, s9];
		                                s3 = s4;
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$parsevalue();
		                      if (s4 !== peg$FAILED) {
		                        s5 = peg$parseNOT();
		                        if (s5 === peg$FAILED) {
		                          s5 = null;
		                        }
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parseIN();
		                          if (s6 !== peg$FAILED) {
		                            s7 = peg$currPos;
		                            s8 = peg$parselparen();
		                            if (s8 !== peg$FAILED) {
		                              s9 = peg$parseselect_stmt();
		                              if (s9 === peg$FAILED) {
		                                s9 = [];
		                                s10 = peg$currPos;
		                                s11 = peg$parsevalue();
		                                if (s11 !== peg$FAILED) {
		                                  s12 = [];
		                                  s13 = peg$currPos;
		                                  s14 = peg$parsecomma();
		                                  if (s14 !== peg$FAILED) {
		                                    s15 = peg$parsevalue();
		                                    if (s15 !== peg$FAILED) {
		                                      s14 = [s14, s15];
		                                      s13 = s14;
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s13;
		                                    s13 = peg$FAILED;
		                                  }
		                                  while (s13 !== peg$FAILED) {
		                                    s12.push(s13);
		                                    s13 = peg$currPos;
		                                    s14 = peg$parsecomma();
		                                    if (s14 !== peg$FAILED) {
		                                      s15 = peg$parsevalue();
		                                      if (s15 !== peg$FAILED) {
		                                        s14 = [s14, s15];
		                                        s13 = s14;
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                  }
		                                  if (s12 !== peg$FAILED) {
		                                    s11 = [s11, s12];
		                                    s10 = s11;
		                                  } else {
		                                    peg$currPos = s10;
		                                    s10 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s10;
		                                  s10 = peg$FAILED;
		                                }
		                                if (s10 !== peg$FAILED) {
		                                  while (s10 !== peg$FAILED) {
		                                    s9.push(s10);
		                                    s10 = peg$currPos;
		                                    s11 = peg$parsevalue();
		                                    if (s11 !== peg$FAILED) {
		                                      s12 = [];
		                                      s13 = peg$currPos;
		                                      s14 = peg$parsecomma();
		                                      if (s14 !== peg$FAILED) {
		                                        s15 = peg$parsevalue();
		                                        if (s15 !== peg$FAILED) {
		                                          s14 = [s14, s15];
		                                          s13 = s14;
		                                        } else {
		                                          peg$currPos = s13;
		                                          s13 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                      while (s13 !== peg$FAILED) {
		                                        s12.push(s13);
		                                        s13 = peg$currPos;
		                                        s14 = peg$parsecomma();
		                                        if (s14 !== peg$FAILED) {
		                                          s15 = peg$parsevalue();
		                                          if (s15 !== peg$FAILED) {
		                                            s14 = [s14, s15];
		                                            s13 = s14;
		                                          } else {
		                                            peg$currPos = s13;
		                                            s13 = peg$FAILED;
		                                          }
		                                        } else {
		                                          peg$currPos = s13;
		                                          s13 = peg$FAILED;
		                                        }
		                                      }
		                                      if (s12 !== peg$FAILED) {
		                                        s11 = [s11, s12];
		                                        s10 = s11;
		                                      } else {
		                                        peg$currPos = s10;
		                                        s10 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s10;
		                                      s10 = peg$FAILED;
		                                    }
		                                  }
		                                } else {
		                                  s9 = peg$FAILED;
		                                }
		                              }
		                              if (s9 === peg$FAILED) {
		                                s9 = null;
		                              }
		                              if (s9 !== peg$FAILED) {
		                                s10 = peg$parserparen();
		                                if (s10 !== peg$FAILED) {
		                                  s8 = [s8, s9, s10];
		                                  s7 = s8;
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s7;
		                                s7 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s7;
		                              s7 = peg$FAILED;
		                            }
		                            if (s7 === peg$FAILED) {
		                              s7 = peg$parsetable_ref();
		                            }
		                            if (s7 !== peg$FAILED) {
		                              s4 = [s4, s5, s6, s7];
		                              s3 = s4;
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                      if (s3 === peg$FAILED) {
		                        s3 = peg$parsevalue();
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c10(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsewhere_value() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsewhere_literal_value();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c4(s4);
		        }
		        s3 = s4;
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parsebind_parameter();
		          if (s4 !== peg$FAILED) {
		            peg$savedPos = s3;
		            s4 = peg$c6(s4);
		          }
		          s3 = s4;
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$currPos;
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsedot();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsename();
		                if (s7 !== peg$FAILED) {
		                  s5 = [s5, s6, s7];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s3;
		              s4 = peg$c7(s4);
		            }
		            s3 = s4;
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parsename();
		              if (s4 !== peg$FAILED) {
		                peg$savedPos = s3;
		                s4 = peg$c8(s4);
		              }
		              s3 = s4;
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parseunary_operator();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseexpr();
		                  if (s5 !== peg$FAILED) {
		                    s4 = [s4, s5];
		                    s3 = s4;
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = peg$parsecall_function();
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$parsewhitespace();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$parselparen();
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parsewhere_expr();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$parsewhitespace();
		                          if (s7 !== peg$FAILED) {
		                            s8 = peg$parserparen();
		                            if (s8 !== peg$FAILED) {
		                              s4 = [s4, s5, s6, s7, s8];
		                              s3 = s4;
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$parseCAST();
		                      if (s4 !== peg$FAILED) {
		                        s5 = peg$parselparen();
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parsewhere_expr();
		                          if (s6 !== peg$FAILED) {
		                            s7 = peg$parseAS();
		                            if (s7 !== peg$FAILED) {
		                              s8 = peg$parsetype_name();
		                              if (s8 !== peg$FAILED) {
		                                s9 = peg$parserparen();
		                                if (s9 !== peg$FAILED) {
		                                  s4 = [s4, s5, s6, s7, s8, s9];
		                                  s3 = s4;
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                      if (s3 === peg$FAILED) {
		                        s3 = peg$currPos;
		                        s4 = peg$currPos;
		                        s5 = peg$parseNOT();
		                        if (s5 === peg$FAILED) {
		                          s5 = null;
		                        }
		                        if (s5 !== peg$FAILED) {
		                          s6 = peg$parseEXISTS();
		                          if (s6 !== peg$FAILED) {
		                            s5 = [s5, s6];
		                            s4 = s5;
		                          } else {
		                            peg$currPos = s4;
		                            s4 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                        if (s4 === peg$FAILED) {
		                          s4 = null;
		                        }
		                        if (s4 !== peg$FAILED) {
		                          s5 = peg$parselparen();
		                          if (s5 !== peg$FAILED) {
		                            s6 = peg$parseselect_stmt();
		                            if (s6 !== peg$FAILED) {
		                              s7 = peg$parserparen();
		                              if (s7 !== peg$FAILED) {
		                                s4 = [s4, s5, s6, s7];
		                                s3 = s4;
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                        if (s3 === peg$FAILED) {
		                          s3 = peg$currPos;
		                          s4 = peg$parseCASE();
		                          if (s4 !== peg$FAILED) {
		                            s5 = peg$parsewhere_expr();
		                            if (s5 === peg$FAILED) {
		                              s5 = null;
		                            }
		                            if (s5 !== peg$FAILED) {
		                              s6 = [];
		                              s7 = peg$currPos;
		                              s8 = peg$parseWHEN();
		                              if (s8 !== peg$FAILED) {
		                                s9 = peg$parsewhere_expr();
		                                if (s9 !== peg$FAILED) {
		                                  s10 = peg$parseTHEN();
		                                  if (s10 !== peg$FAILED) {
		                                    s11 = peg$parsewhere_expr();
		                                    if (s11 !== peg$FAILED) {
		                                      s8 = [s8, s9, s10, s11];
		                                      s7 = s8;
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s7;
		                                s7 = peg$FAILED;
		                              }
		                              if (s7 !== peg$FAILED) {
		                                while (s7 !== peg$FAILED) {
		                                  s6.push(s7);
		                                  s7 = peg$currPos;
		                                  s8 = peg$parseWHEN();
		                                  if (s8 !== peg$FAILED) {
		                                    s9 = peg$parsewhere_expr();
		                                    if (s9 !== peg$FAILED) {
		                                      s10 = peg$parseTHEN();
		                                      if (s10 !== peg$FAILED) {
		                                        s11 = peg$parsewhere_expr();
		                                        if (s11 !== peg$FAILED) {
		                                          s8 = [s8, s9, s10, s11];
		                                          s7 = s8;
		                                        } else {
		                                          peg$currPos = s7;
		                                          s7 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s7;
		                                        s7 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s7;
		                                      s7 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                }
		                              } else {
		                                s6 = peg$FAILED;
		                              }
		                              if (s6 !== peg$FAILED) {
		                                s7 = peg$currPos;
		                                s8 = peg$parseELSE();
		                                if (s8 !== peg$FAILED) {
		                                  s9 = peg$parsewhere_expr();
		                                  if (s9 !== peg$FAILED) {
		                                    s8 = [s8, s9];
		                                    s7 = s8;
		                                  } else {
		                                    peg$currPos = s7;
		                                    s7 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s7;
		                                  s7 = peg$FAILED;
		                                }
		                                if (s7 === peg$FAILED) {
		                                  s7 = null;
		                                }
		                                if (s7 !== peg$FAILED) {
		                                  s8 = peg$parseEND();
		                                  if (s8 !== peg$FAILED) {
		                                    s4 = [s4, s5, s6, s7, s8];
		                                    s3 = s4;
		                                  } else {
		                                    peg$currPos = s3;
		                                    s3 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s3;
		                                  s3 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s3;
		                                s3 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                          if (s3 === peg$FAILED) {
		                            s3 = peg$parseraise_function();
		                          }
		                        }
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c11(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsewhere_expr() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsewhere_value();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parsebinary_operator();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseboolean_operator();
		          }
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsewhere_expr();
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseagg_column_ref();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsebinary_operator();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseboolean_operator();
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsewhere_expr();
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parsewhere_value();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parseNOT();
		              if (s5 === peg$FAILED) {
		                s5 = null;
		              }
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parseLIKE();
		                if (s6 === peg$FAILED) {
		                  s6 = peg$parseGLOB();
		                  if (s6 === peg$FAILED) {
		                    s6 = peg$parseREGEXP();
		                    if (s6 === peg$FAILED) {
		                      s6 = peg$parseMATCH();
		                    }
		                  }
		                }
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parseexpr();
		                  if (s7 !== peg$FAILED) {
		                    s8 = peg$currPos;
		                    s9 = peg$parseESCAPE();
		                    if (s9 !== peg$FAILED) {
		                      s10 = peg$parseexpr();
		                      if (s10 !== peg$FAILED) {
		                        s9 = [s9, s10];
		                        s8 = s9;
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                    if (s8 === peg$FAILED) {
		                      s8 = null;
		                    }
		                    if (s8 !== peg$FAILED) {
		                      s4 = [s4, s5, s6, s7, s8];
		                      s3 = s4;
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parsewhere_value();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parseISNULL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseNOTNULL();
		                  if (s5 === peg$FAILED) {
		                    s5 = peg$currPos;
		                    s6 = peg$parseNOT();
		                    if (s6 !== peg$FAILED) {
		                      s7 = peg$parseNULL();
		                      if (s7 !== peg$FAILED) {
		                        s6 = [s6, s7];
		                        s5 = s6;
		                      } else {
		                        peg$currPos = s5;
		                        s5 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s5;
		                      s5 = peg$FAILED;
		                    }
		                  }
		                }
		                if (s5 !== peg$FAILED) {
		                  s4 = [s4, s5];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$parsewhere_value();
		                if (s4 !== peg$FAILED) {
		                  s5 = peg$parseIS();
		                  if (s5 !== peg$FAILED) {
		                    s6 = peg$parseNOT();
		                    if (s6 === peg$FAILED) {
		                      s6 = null;
		                    }
		                    if (s6 !== peg$FAILED) {
		                      s7 = peg$parsewhere_expr();
		                      if (s7 !== peg$FAILED) {
		                        s4 = [s4, s5, s6, s7];
		                        s3 = s4;
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parsewhere_value();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseNOT();
		                    if (s5 === peg$FAILED) {
		                      s5 = null;
		                    }
		                    if (s5 !== peg$FAILED) {
		                      s6 = peg$parseBETWEEN();
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parsewhere_value();
		                        if (s7 !== peg$FAILED) {
		                          s8 = peg$parseAND();
		                          if (s8 !== peg$FAILED) {
		                            s9 = peg$parsewhere_value();
		                            if (s9 !== peg$FAILED) {
		                              s4 = [s4, s5, s6, s7, s8, s9];
		                              s3 = s4;
		                            } else {
		                              peg$currPos = s3;
		                              s3 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$parsewhere_value();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$parseNOT();
		                      if (s5 === peg$FAILED) {
		                        s5 = null;
		                      }
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$parseIN();
		                        if (s6 !== peg$FAILED) {
		                          s7 = peg$currPos;
		                          s8 = peg$parselparen();
		                          if (s8 !== peg$FAILED) {
		                            s9 = peg$parseselect_stmt();
		                            if (s9 === peg$FAILED) {
		                              s9 = [];
		                              s10 = peg$currPos;
		                              s11 = peg$parsewhere_value();
		                              if (s11 !== peg$FAILED) {
		                                s12 = [];
		                                s13 = peg$currPos;
		                                s14 = peg$parsecomma();
		                                if (s14 !== peg$FAILED) {
		                                  s15 = peg$parsewhere_value();
		                                  if (s15 !== peg$FAILED) {
		                                    s14 = [s14, s15];
		                                    s13 = s14;
		                                  } else {
		                                    peg$currPos = s13;
		                                    s13 = peg$FAILED;
		                                  }
		                                } else {
		                                  peg$currPos = s13;
		                                  s13 = peg$FAILED;
		                                }
		                                while (s13 !== peg$FAILED) {
		                                  s12.push(s13);
		                                  s13 = peg$currPos;
		                                  s14 = peg$parsecomma();
		                                  if (s14 !== peg$FAILED) {
		                                    s15 = peg$parsewhere_value();
		                                    if (s15 !== peg$FAILED) {
		                                      s14 = [s14, s15];
		                                      s13 = s14;
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s13;
		                                    s13 = peg$FAILED;
		                                  }
		                                }
		                                if (s12 !== peg$FAILED) {
		                                  s11 = [s11, s12];
		                                  s10 = s11;
		                                } else {
		                                  peg$currPos = s10;
		                                  s10 = peg$FAILED;
		                                }
		                              } else {
		                                peg$currPos = s10;
		                                s10 = peg$FAILED;
		                              }
		                              if (s10 !== peg$FAILED) {
		                                while (s10 !== peg$FAILED) {
		                                  s9.push(s10);
		                                  s10 = peg$currPos;
		                                  s11 = peg$parsewhere_value();
		                                  if (s11 !== peg$FAILED) {
		                                    s12 = [];
		                                    s13 = peg$currPos;
		                                    s14 = peg$parsecomma();
		                                    if (s14 !== peg$FAILED) {
		                                      s15 = peg$parsewhere_value();
		                                      if (s15 !== peg$FAILED) {
		                                        s14 = [s14, s15];
		                                        s13 = s14;
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                    } else {
		                                      peg$currPos = s13;
		                                      s13 = peg$FAILED;
		                                    }
		                                    while (s13 !== peg$FAILED) {
		                                      s12.push(s13);
		                                      s13 = peg$currPos;
		                                      s14 = peg$parsecomma();
		                                      if (s14 !== peg$FAILED) {
		                                        s15 = peg$parsewhere_value();
		                                        if (s15 !== peg$FAILED) {
		                                          s14 = [s14, s15];
		                                          s13 = s14;
		                                        } else {
		                                          peg$currPos = s13;
		                                          s13 = peg$FAILED;
		                                        }
		                                      } else {
		                                        peg$currPos = s13;
		                                        s13 = peg$FAILED;
		                                      }
		                                    }
		                                    if (s12 !== peg$FAILED) {
		                                      s11 = [s11, s12];
		                                      s10 = s11;
		                                    } else {
		                                      peg$currPos = s10;
		                                      s10 = peg$FAILED;
		                                    }
		                                  } else {
		                                    peg$currPos = s10;
		                                    s10 = peg$FAILED;
		                                  }
		                                }
		                              } else {
		                                s9 = peg$FAILED;
		                              }
		                            }
		                            if (s9 === peg$FAILED) {
		                              s9 = null;
		                            }
		                            if (s9 !== peg$FAILED) {
		                              s10 = peg$parserparen();
		                              if (s10 !== peg$FAILED) {
		                                s8 = [s8, s9, s10];
		                                s7 = s8;
		                              } else {
		                                peg$currPos = s7;
		                                s7 = peg$FAILED;
		                              }
		                            } else {
		                              peg$currPos = s7;
		                              s7 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s7;
		                            s7 = peg$FAILED;
		                          }
		                          if (s7 === peg$FAILED) {
		                            s7 = peg$parsetable_ref();
		                          }
		                          if (s7 !== peg$FAILED) {
		                            s4 = [s4, s5, s6, s7];
		                            s3 = s4;
		                          } else {
		                            peg$currPos = s3;
		                            s3 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s3;
		                          s3 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s3;
		                        s3 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$parsewhere_value();
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c12(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsewhere_literal_value() {
		      var s0;

		      s0 = peg$parsewhere_numeric_literal();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsestring_literal();
		        if (s0 === peg$FAILED) {
		          s0 = peg$parseNULL();
		          if (s0 === peg$FAILED) {
		            s0 = peg$parseCURRENT_TIME();
		            if (s0 === peg$FAILED) {
		              s0 = peg$parseCURRENT_DATE();
		              if (s0 === peg$FAILED) {
		                s0 = peg$parseCURRENT_TIMESTAMP();
		              }
		            }
		          }
		        }
		      }

		      return s0;
		    }

		    function peg$parsewhere_numeric_literal() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = [];
		      s4 = peg$parsedigit();
		      if (s4 !== peg$FAILED) {
		        while (s4 !== peg$FAILED) {
		          s3.push(s4);
		          s4 = peg$parsedigit();
		        }
		      } else {
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        s4 = peg$currPos;
		        s5 = peg$parsedot();
		        if (s5 !== peg$FAILED) {
		          s6 = [];
		          s7 = peg$parsedigit();
		          if (s7 !== peg$FAILED) {
		            while (s7 !== peg$FAILED) {
		              s6.push(s7);
		              s7 = peg$parsedigit();
		            }
		          } else {
		            s6 = peg$FAILED;
		          }
		          if (s6 !== peg$FAILED) {
		            s5 = [s5, s6];
		            s4 = s5;
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s4;
		          s4 = peg$FAILED;
		        }
		        if (s4 === peg$FAILED) {
		          s4 = null;
		        }
		        if (s4 !== peg$FAILED) {
		          s3 = [s3, s4];
		          s2 = s3;
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s2;
		        s2 = peg$FAILED;
		      }
		      if (s2 === peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsedot();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$parsedigit();
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$parsedigit();
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseE();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseplus();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseminus();
		          }
		          if (s5 === peg$FAILED) {
		            s5 = null;
		          }
		          if (s5 !== peg$FAILED) {
		            s6 = [];
		            s7 = peg$parsedigit();
		            if (s7 !== peg$FAILED) {
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$parsedigit();
		              }
		            } else {
		              s6 = peg$FAILED;
		            }
		            if (s6 !== peg$FAILED) {
		              s4 = [s4, s5, s6];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c13(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecall_function() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

		      s0 = peg$currPos;
		      s1 = peg$parsename();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsewhitespace();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parselparen();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseDISTINCT();
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parseexpr();
		              if (s8 !== peg$FAILED) {
		                s9 = [];
		                s10 = peg$currPos;
		                s11 = peg$parsewhitespace();
		                if (s11 !== peg$FAILED) {
		                  s12 = peg$parsecomma();
		                  if (s12 !== peg$FAILED) {
		                    s13 = peg$parseexpr();
		                    if (s13 !== peg$FAILED) {
		                      s11 = [s11, s12, s13];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s10;
		                  s10 = peg$FAILED;
		                }
		                while (s10 !== peg$FAILED) {
		                  s9.push(s10);
		                  s10 = peg$currPos;
		                  s11 = peg$parsewhitespace();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s13 = peg$parseexpr();
		                      if (s13 !== peg$FAILED) {
		                        s11 = [s11, s12, s13];
		                        s10 = s11;
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s8 = [s8, s9];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                while (s7 !== peg$FAILED) {
		                  s6.push(s7);
		                  s7 = peg$currPos;
		                  s8 = peg$parseexpr();
		                  if (s8 !== peg$FAILED) {
		                    s9 = [];
		                    s10 = peg$currPos;
		                    s11 = peg$parsewhitespace();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsecomma();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parseexpr();
		                        if (s13 !== peg$FAILED) {
		                          s11 = [s11, s12, s13];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parsewhitespace();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parseexpr();
		                          if (s13 !== peg$FAILED) {
		                            s11 = [s11, s12, s13];
		                            s10 = s11;
		                          } else {
		                            peg$currPos = s10;
		                            s10 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                    if (s9 !== peg$FAILED) {
		                      s8 = [s8, s9];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                }
		              } else {
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parsewhitespace();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsestar();
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsewhitespace();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parserparen();
		                if (s6 !== peg$FAILED) {
		                  s1 = [s1, s2, s3, s4, s5, s6];
		                  s0 = s1;
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseraise_function() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parseRAISE();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parselparen();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseIGNORE();
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$parseROLLBACK();
		            if (s4 === peg$FAILED) {
		              s4 = peg$parseABORT();
		              if (s4 === peg$FAILED) {
		                s4 = peg$parseFAIL();
		              }
		            }
		            if (s4 !== peg$FAILED) {
		              s5 = peg$parsecomma();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsestring_literal();
		                if (s6 !== peg$FAILED) {
		                  s4 = [s4, s5, s6];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parserparen();
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseliteral_value() {
		      var s0;

		      s0 = peg$parsenumeric_literal();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsestring_literal();
		        if (s0 === peg$FAILED) {
		          s0 = peg$parsestring_literal();
		          if (s0 === peg$FAILED) {
		            s0 = peg$parseNULL();
		            if (s0 === peg$FAILED) {
		              s0 = peg$parseCURRENT_TIME();
		              if (s0 === peg$FAILED) {
		                s0 = peg$parseCURRENT_DATE();
		                if (s0 === peg$FAILED) {
		                  s0 = peg$parseCURRENT_TIMESTAMP();
		                }
		              }
		            }
		          }
		        }
		      }

		      return s0;
		    }

		    function peg$parsenumeric_literal() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsenumber();
		      if (s2 === peg$FAILED) {
		        s2 = peg$parsecolumn_ref();
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseplus();
		          if (s4 === peg$FAILED) {
		            s4 = peg$parseminus();
		            if (s4 === peg$FAILED) {
		              s4 = peg$parsestar();
		              if (s4 === peg$FAILED) {
		                s4 = peg$parsedivide();
		                if (s4 === peg$FAILED) {
		                  s4 = peg$parsemodulo();
		                }
		              }
		            }
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsewhitespace();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsenumber();
		              if (s6 === peg$FAILED) {
		                s6 = peg$parsecolumn_ref();
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = [];
		                s8 = peg$currPos;
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseplus();
		                  if (s10 === peg$FAILED) {
		                    s10 = peg$parseminus();
		                    if (s10 === peg$FAILED) {
		                      s10 = peg$parsestar();
		                      if (s10 === peg$FAILED) {
		                        s10 = peg$parsedivide();
		                        if (s10 === peg$FAILED) {
		                          s10 = peg$parsemodulo();
		                        }
		                      }
		                    }
		                  }
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsewhitespace();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsenumber();
		                      if (s12 === peg$FAILED) {
		                        s12 = peg$parsecolumn_ref();
		                      }
		                      if (s12 !== peg$FAILED) {
		                        s9 = [s9, s10, s11, s12];
		                        s8 = s9;
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parseplus();
		                    if (s10 === peg$FAILED) {
		                      s10 = peg$parseminus();
		                      if (s10 === peg$FAILED) {
		                        s10 = peg$parsestar();
		                        if (s10 === peg$FAILED) {
		                          s10 = peg$parsedivide();
		                          if (s10 === peg$FAILED) {
		                            s10 = peg$parsemodulo();
		                          }
		                        }
		                      }
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s11 = peg$parsewhitespace();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsenumber();
		                        if (s12 === peg$FAILED) {
		                          s12 = peg$parsecolumn_ref();
		                        }
		                        if (s12 !== peg$FAILED) {
		                          s9 = [s9, s10, s11, s12];
		                          s8 = s9;
		                        } else {
		                          peg$currPos = s8;
		                          s8 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s8;
		                        s8 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$parsenumber();
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c14(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseinsert_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseINSERT();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$parseREPLACE();
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseINTO();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsetable_ref();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parselparen();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$currPos;
		              s8 = peg$parsename();
		              if (s8 !== peg$FAILED) {
		                s9 = [];
		                s10 = peg$currPos;
		                s11 = peg$parsecomma();
		                if (s11 !== peg$FAILED) {
		                  s12 = peg$parsename();
		                  if (s12 !== peg$FAILED) {
		                    s11 = [s11, s12];
		                    s10 = s11;
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s10;
		                  s10 = peg$FAILED;
		                }
		                while (s10 !== peg$FAILED) {
		                  s9.push(s10);
		                  s10 = peg$currPos;
		                  s11 = peg$parsecomma();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsename();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                }
		                if (s9 !== peg$FAILED) {
		                  s8 = [s8, s9];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parserparen();
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseVALUES();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parselparen();
		                if (s8 !== peg$FAILED) {
		                  s9 = [];
		                  s10 = peg$currPos;
		                  s11 = peg$parseexpr();
		                  if (s11 !== peg$FAILED) {
		                    s12 = peg$parsecomma();
		                    if (s12 !== peg$FAILED) {
		                      s11 = [s11, s12];
		                      s10 = s11;
		                    } else {
		                      peg$currPos = s10;
		                      s10 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s10;
		                    s10 = peg$FAILED;
		                  }
		                  if (s10 !== peg$FAILED) {
		                    while (s10 !== peg$FAILED) {
		                      s9.push(s10);
		                      s10 = peg$currPos;
		                      s11 = peg$parseexpr();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsecomma();
		                        if (s12 !== peg$FAILED) {
		                          s11 = [s11, s12];
		                          s10 = s11;
		                        } else {
		                          peg$currPos = s10;
		                          s10 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s10;
		                        s10 = peg$FAILED;
		                      }
		                    }
		                  } else {
		                    s9 = peg$FAILED;
		                  }
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parserparen();
		                    if (s10 !== peg$FAILED) {
		                      s7 = [s7, s8, s9, s10];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = peg$parseselect_stmt();
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseDEFAULT();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parseVALUES();
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsepragma_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7;

		      s0 = peg$currPos;
		      s1 = peg$parsePRAGMA();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsename();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsedot();
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsename();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseequal();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsepragma_value();
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parselparen();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsepragma_value();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s5 = [s5, s6, s7];
		                    s4 = s5;
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            }
		            if (s4 === peg$FAILED) {
		              s4 = null;
		            }
		            if (s4 !== peg$FAILED) {
		              s1 = [s1, s2, s3, s4];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsepragma_value() {
		      var s0;

		      s0 = peg$parsesigned_number();
		      if (s0 === peg$FAILED) {
		        s0 = peg$parsename();
		        if (s0 === peg$FAILED) {
		          s0 = peg$parsestring_literal();
		        }
		      }

		      return s0;
		    }

		    function peg$parsereindex_stmt() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parseREINDEX();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parsetable_ref();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseselect_core();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = [];
		        s5 = peg$currPos;
		        s6 = peg$parsecompound_operator();
		        if (s6 !== peg$FAILED) {
		          s7 = peg$parseselect_core();
		          if (s7 !== peg$FAILED) {
		            s6 = [s6, s7];
		            s5 = s6;
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s5;
		          s5 = peg$FAILED;
		        }
		        while (s5 !== peg$FAILED) {
		          s4.push(s5);
		          s5 = peg$currPos;
		          s6 = peg$parsecompound_operator();
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parseselect_core();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		        }
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c15(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseORDER();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseBY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseordering_term();
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsewhitespace();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsecomma();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseordering_term();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsewhitespace();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsecomma();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parseordering_term();
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s3 = [s3, s4, s5, s6];
		                s2 = s3;
		              } else {
		                peg$currPos = s2;
		                s2 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseLIMIT();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseexpr();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$parseOFFSET();
		              if (s7 === peg$FAILED) {
		                s7 = peg$parsecomma();
		              }
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseexpr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s4 = [s4, s5, s6];
		                s3 = s4;
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            peg$savedPos = s0;
		            s1 = peg$c16(s1, s2, s3);
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_core() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

		      s0 = peg$currPos;
		      s1 = peg$parseSELECT();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseDISTINCT();
		        if (s2 === peg$FAILED) {
		          s2 = peg$parseALL();
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$parseselect_result();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = [];
		            s7 = peg$currPos;
		            s8 = peg$parsewhitespace();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsecomma();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parseselect_result();
		                if (s10 !== peg$FAILED) {
		                  s8 = [s8, s9, s10];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            while (s7 !== peg$FAILED) {
		              s6.push(s7);
		              s7 = peg$currPos;
		              s8 = peg$parsewhitespace();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsecomma();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseselect_result();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            }
		            if (s6 !== peg$FAILED) {
		              peg$savedPos = s5;
		              s6 = peg$c17(s2, s6);
		            }
		            s5 = s6;
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 !== peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$currPos;
		            s6 = peg$parseFROM();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsejoin_source();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              peg$savedPos = s4;
		              s5 = peg$c18(s2, s3, s5);
		            }
		            s4 = s5;
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parseWHERE();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parsewhere_expr();
		                if (s8 !== peg$FAILED) {
		                  s7 = [s7, s8];
		                  s6 = s7;
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                peg$savedPos = s5;
		                s6 = peg$c19(s2, s3, s4, s6);
		              }
		              s5 = s6;
		              if (s5 !== peg$FAILED) {
		                s6 = peg$currPos;
		                s7 = peg$parseGROUP();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parseBY();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parseordering_term();
		                    if (s9 !== peg$FAILED) {
		                      s10 = [];
		                      s11 = peg$currPos;
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsecomma();
		                        if (s13 !== peg$FAILED) {
		                          s14 = peg$parseordering_term();
		                          if (s14 !== peg$FAILED) {
		                            s12 = [s12, s13, s14];
		                            s11 = s12;
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s11;
		                        s11 = peg$FAILED;
		                      }
		                      while (s11 !== peg$FAILED) {
		                        s10.push(s11);
		                        s11 = peg$currPos;
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsecomma();
		                          if (s13 !== peg$FAILED) {
		                            s14 = peg$parseordering_term();
		                            if (s14 !== peg$FAILED) {
		                              s12 = [s12, s13, s14];
		                              s11 = s12;
		                            } else {
		                              peg$currPos = s11;
		                              s11 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                      }
		                      if (s10 !== peg$FAILED) {
		                        s11 = peg$currPos;
		                        s12 = peg$parseHAVING();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsewhere_expr();
		                          if (s13 !== peg$FAILED) {
		                            s12 = [s12, s13];
		                            s11 = s12;
		                          } else {
		                            peg$currPos = s11;
		                            s11 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s11;
		                          s11 = peg$FAILED;
		                        }
		                        if (s11 === peg$FAILED) {
		                          s11 = null;
		                        }
		                        if (s11 !== peg$FAILED) {
		                          s7 = [s7, s8, s9, s10, s11];
		                          s6 = s7;
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  peg$savedPos = s0;
		                  s1 = peg$c20(s2, s3, s4, s5, s6);
		                  s0 = s1;
		                } else {
		                  peg$currPos = s0;
		                  s0 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s0;
		                s0 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseselect_result() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$currPos;
		        s5 = peg$parseagg_column_ref();
		        if (s5 !== peg$FAILED) {
		          s6 = peg$currPos;
		          s7 = peg$currPos;
		          s8 = peg$parseAS();
		          if (s8 !== peg$FAILED) {
		            s9 = peg$parsewhitespace1();
		            if (s9 !== peg$FAILED) {
		              s10 = peg$parsename();
		              if (s10 !== peg$FAILED) {
		                s8 = [s8, s9, s10];
		                s7 = s8;
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s7;
		            s7 = peg$FAILED;
		          }
		          if (s7 !== peg$FAILED) {
		            peg$savedPos = s6;
		            s7 = peg$c21(s7);
		          }
		          s6 = s7;
		          if (s6 === peg$FAILED) {
		            s6 = null;
		          }
		          if (s6 !== peg$FAILED) {
		            s5 = [s5, s6];
		            s4 = s5;
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s4;
		          s4 = peg$FAILED;
		        }
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c22(s4);
		        }
		        s3 = s4;
		        if (s3 === peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$currPos;
		          s5 = peg$parsecalc_ref();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$currPos;
		            s7 = peg$currPos;
		            s8 = peg$parseAS();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parsewhitespace1();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsename();
		                if (s10 !== peg$FAILED) {
		                  s8 = [s8, s9, s10];
		                  s7 = s8;
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s7;
		              s7 = peg$FAILED;
		            }
		            if (s7 !== peg$FAILED) {
		              peg$savedPos = s6;
		              s7 = peg$c21(s7);
		            }
		            s6 = s7;
		            if (s6 === peg$FAILED) {
		              s6 = null;
		            }
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            peg$savedPos = s3;
		            s4 = peg$c23(s4);
		          }
		          s3 = s4;
		          if (s3 === peg$FAILED) {
		            s3 = peg$currPos;
		            s4 = peg$currPos;
		            s5 = peg$parsehelper_ref();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$currPos;
		              s7 = peg$currPos;
		              s8 = peg$parseAS();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace1();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsename();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                peg$savedPos = s6;
		                s7 = peg$c21(s7);
		              }
		              s6 = s7;
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 !== peg$FAILED) {
		              peg$savedPos = s3;
		              s4 = peg$c24(s4);
		            }
		            s3 = s4;
		            if (s3 === peg$FAILED) {
		              s3 = peg$currPos;
		              s4 = peg$parsestar();
		              if (s4 !== peg$FAILED) {
		                peg$savedPos = s3;
		                s4 = peg$c25();
		              }
		              s3 = s4;
		              if (s3 === peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$currPos;
		                s5 = peg$parsesigned_number();
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$currPos;
		                  s7 = peg$currPos;
		                  s8 = peg$parseAS();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsewhitespace1();
		                    if (s9 !== peg$FAILED) {
		                      s10 = peg$parsename();
		                      if (s10 !== peg$FAILED) {
		                        s8 = [s8, s9, s10];
		                        s7 = s8;
		                      } else {
		                        peg$currPos = s7;
		                        s7 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                  if (s7 !== peg$FAILED) {
		                    peg$savedPos = s6;
		                    s7 = peg$c21(s7);
		                  }
		                  s6 = s7;
		                  if (s6 === peg$FAILED) {
		                    s6 = null;
		                  }
		                  if (s6 !== peg$FAILED) {
		                    s5 = [s5, s6];
		                    s4 = s5;
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c26(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$currPos;
		                  s5 = peg$parsecolumn_ref();
		                  if (s5 !== peg$FAILED) {
		                    s6 = peg$currPos;
		                    s7 = peg$currPos;
		                    s8 = peg$parseAS();
		                    if (s8 !== peg$FAILED) {
		                      s9 = peg$parsewhitespace1();
		                      if (s9 !== peg$FAILED) {
		                        s10 = peg$parsename();
		                        if (s10 !== peg$FAILED) {
		                          s8 = [s8, s9, s10];
		                          s7 = s8;
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s7;
		                        s7 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                    if (s7 !== peg$FAILED) {
		                      peg$savedPos = s6;
		                      s7 = peg$c21(s7);
		                    }
		                    s6 = s7;
		                    if (s6 === peg$FAILED) {
		                      s6 = null;
		                    }
		                    if (s6 !== peg$FAILED) {
		                      s5 = [s5, s6];
		                      s4 = s5;
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                  if (s4 !== peg$FAILED) {
		                    peg$savedPos = s3;
		                    s4 = peg$c22(s4);
		                  }
		                  s3 = s4;
		                  if (s3 === peg$FAILED) {
		                    s3 = peg$currPos;
		                    s4 = peg$currPos;
		                    s5 = peg$parsename();
		                    if (s5 !== peg$FAILED) {
		                      s6 = peg$parsedot();
		                      if (s6 !== peg$FAILED) {
		                        s7 = peg$parsestar();
		                        if (s7 !== peg$FAILED) {
		                          s5 = [s5, s6, s7];
		                          s4 = s5;
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                    if (s4 !== peg$FAILED) {
		                      peg$savedPos = s3;
		                      s4 = peg$c27(s4);
		                    }
		                    s3 = s4;
		                    if (s3 === peg$FAILED) {
		                      s3 = peg$currPos;
		                      s4 = peg$currPos;
		                      s5 = peg$parsestring_literal();
		                      if (s5 !== peg$FAILED) {
		                        s6 = peg$currPos;
		                        s7 = peg$currPos;
		                        s8 = peg$parseAS();
		                        if (s8 !== peg$FAILED) {
		                          s9 = peg$parsewhitespace1();
		                          if (s9 !== peg$FAILED) {
		                            s10 = peg$parsename();
		                            if (s10 !== peg$FAILED) {
		                              s8 = [s8, s9, s10];
		                              s7 = s8;
		                            } else {
		                              peg$currPos = s7;
		                              s7 = peg$FAILED;
		                            }
		                          } else {
		                            peg$currPos = s7;
		                            s7 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s7;
		                          s7 = peg$FAILED;
		                        }
		                        if (s7 !== peg$FAILED) {
		                          peg$savedPos = s6;
		                          s7 = peg$c21(s7);
		                        }
		                        s6 = s7;
		                        if (s6 === peg$FAILED) {
		                          s6 = null;
		                        }
		                        if (s6 !== peg$FAILED) {
		                          s5 = [s5, s6];
		                          s4 = s5;
		                        } else {
		                          peg$currPos = s4;
		                          s4 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                      if (s4 !== peg$FAILED) {
		                        peg$savedPos = s3;
		                        s4 = peg$c28(s4);
		                      }
		                      s3 = s4;
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c29(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsejoin_source() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsesingle_source();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$parsejoin_op();
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsewhitespace();
		            if (s7 !== peg$FAILED) {
		              s8 = peg$parsesingle_source();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsejoin_constraint();
		                if (s9 !== peg$FAILED) {
		                  s6 = [s6, s7, s8, s9];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          while (s5 !== peg$FAILED) {
		            s4.push(s5);
		            s5 = peg$currPos;
		            s6 = peg$parsejoin_op();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parsewhitespace();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parsesingle_source();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsejoin_constraint();
		                  if (s9 !== peg$FAILED) {
		                    s6 = [s6, s7, s8, s9];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          }
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c30(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsesingle_source() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsename();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsedot();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsename();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseAS();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parsewhitespace1();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsename();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c31(s1);
		      }
		      s0 = s1;
		      if (s0 === peg$FAILED) {
		        s0 = peg$currPos;
		        s1 = peg$currPos;
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsedot();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parsename();
		            if (s4 !== peg$FAILED) {
		              s2 = [s2, s3, s4];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		        if (s1 !== peg$FAILED) {
		          peg$savedPos = s0;
		          s1 = peg$c32(s1);
		        }
		        s0 = s1;
		        if (s0 === peg$FAILED) {
		          s0 = peg$currPos;
		          s1 = peg$currPos;
		          s2 = peg$parsename();
		          if (s2 !== peg$FAILED) {
		            s3 = peg$parseAS();
		            if (s3 !== peg$FAILED) {
		              s4 = peg$parsewhitespace1();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$parsename();
		                if (s5 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		          if (s1 !== peg$FAILED) {
		            peg$savedPos = s0;
		            s1 = peg$c33(s1);
		          }
		          s0 = s1;
		          if (s0 === peg$FAILED) {
		            s0 = peg$currPos;
		            s1 = peg$parsename();
		            if (s1 !== peg$FAILED) {
		              peg$savedPos = s0;
		              s1 = peg$c34(s1);
		            }
		            s0 = s1;
		            if (s0 === peg$FAILED) {
		              s0 = peg$currPos;
		              s1 = peg$currPos;
		              s2 = peg$currPos;
		              s3 = peg$currPos;
		              s4 = peg$parsetable_ref();
		              if (s4 !== peg$FAILED) {
		                s5 = peg$currPos;
		                s6 = peg$currPos;
		                s7 = peg$parseAS();
		                if (s7 !== peg$FAILED) {
		                  s8 = peg$parsewhitespace1();
		                  if (s8 !== peg$FAILED) {
		                    s9 = peg$parsename();
		                    if (s9 !== peg$FAILED) {
		                      s7 = [s7, s8, s9];
		                      s6 = s7;
		                    } else {
		                      peg$currPos = s6;
		                      s6 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		                if (s6 !== peg$FAILED) {
		                  peg$savedPos = s5;
		                  s6 = peg$c21(s6);
		                }
		                s5 = s6;
		                if (s5 === peg$FAILED) {
		                  s5 = null;
		                }
		                if (s5 !== peg$FAILED) {
		                  s4 = [s4, s5];
		                  s3 = s4;
		                } else {
		                  peg$currPos = s3;
		                  s3 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s3;
		                s3 = peg$FAILED;
		              }
		              if (s3 !== peg$FAILED) {
		                peg$savedPos = s2;
		                s3 = peg$c35(s3);
		              }
		              s2 = s3;
		              if (s2 !== peg$FAILED) {
		                s3 = peg$currPos;
		                s4 = peg$currPos;
		                s5 = peg$parseINDEXED();
		                if (s5 !== peg$FAILED) {
		                  s6 = peg$parseBY();
		                  if (s6 !== peg$FAILED) {
		                    s7 = peg$parsewhitespace();
		                    if (s7 !== peg$FAILED) {
		                      s8 = peg$parsename();
		                      if (s8 !== peg$FAILED) {
		                        s5 = [s5, s6, s7, s8];
		                        s4 = s5;
		                      } else {
		                        peg$currPos = s4;
		                        s4 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s4;
		                      s4 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s4;
		                    s4 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		                if (s4 !== peg$FAILED) {
		                  peg$savedPos = s3;
		                  s4 = peg$c36(s4);
		                }
		                s3 = s4;
		                if (s3 === peg$FAILED) {
		                  s3 = peg$currPos;
		                  s4 = peg$parseNOT();
		                  if (s4 !== peg$FAILED) {
		                    s5 = peg$parseINDEXED();
		                    if (s5 !== peg$FAILED) {
		                      peg$savedPos = s3;
		                      s4 = peg$c37();
		                      s3 = s4;
		                    } else {
		                      peg$currPos = s3;
		                      s3 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s3;
		                    s3 = peg$FAILED;
		                  }
		                }
		                if (s3 === peg$FAILED) {
		                  s3 = null;
		                }
		                if (s3 !== peg$FAILED) {
		                  s2 = [s2, s3];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		              if (s1 !== peg$FAILED) {
		                peg$savedPos = s0;
		                s1 = peg$c38(s1);
		              }
		              s0 = s1;
		              if (s0 === peg$FAILED) {
		                s0 = peg$currPos;
		                s1 = peg$currPos;
		                s2 = peg$parselparen();
		                if (s2 !== peg$FAILED) {
		                  s3 = peg$parseselect_stmt();
		                  if (s3 !== peg$FAILED) {
		                    s4 = peg$parserparen();
		                    if (s4 !== peg$FAILED) {
		                      s5 = peg$currPos;
		                      s6 = peg$currPos;
		                      s7 = peg$parseAS();
		                      if (s7 !== peg$FAILED) {
		                        s8 = peg$parsewhitespace();
		                        if (s8 !== peg$FAILED) {
		                          s9 = peg$parsename();
		                          if (s9 !== peg$FAILED) {
		                            s7 = [s7, s8, s9];
		                            s6 = s7;
		                          } else {
		                            peg$currPos = s6;
		                            s6 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s6;
		                          s6 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s6;
		                        s6 = peg$FAILED;
		                      }
		                      if (s6 !== peg$FAILED) {
		                        peg$savedPos = s5;
		                        s6 = peg$c21(s6);
		                      }
		                      s5 = s6;
		                      if (s5 === peg$FAILED) {
		                        s5 = null;
		                      }
		                      if (s5 !== peg$FAILED) {
		                        s2 = [s2, s3, s4, s5];
		                        s1 = s2;
		                      } else {
		                        peg$currPos = s1;
		                        s1 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s1;
		                      s1 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		                if (s1 !== peg$FAILED) {
		                  peg$savedPos = s0;
		                  s1 = peg$c39(s1);
		                }
		                s0 = s1;
		                if (s0 === peg$FAILED) {
		                  s0 = peg$currPos;
		                  s1 = peg$currPos;
		                  s2 = peg$parselparen();
		                  if (s2 !== peg$FAILED) {
		                    s3 = peg$parsejoin_source();
		                    if (s3 !== peg$FAILED) {
		                      s4 = peg$parserparen();
		                      if (s4 !== peg$FAILED) {
		                        s2 = [s2, s3, s4];
		                        s1 = s2;
		                      } else {
		                        peg$currPos = s1;
		                        s1 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s1;
		                      s1 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                  if (s1 !== peg$FAILED) {
		                    peg$savedPos = s0;
		                    s1 = peg$c40(s1);
		                  }
		                  s0 = s1;
		                }
		              }
		            }
		          }
		        }
		      }

		      return s0;
		    }

		    function peg$parsejoin_op() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsecomma();
		        if (s3 !== peg$FAILED) {
		          peg$savedPos = s1;
		          s2 = peg$c41();
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$currPos;
		        s3 = peg$parseNATURAL();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parseLEFT();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseOUTER();
		            if (s6 === peg$FAILED) {
		              s6 = null;
		            }
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = peg$currPos;
		            s5 = peg$parseRIGHT();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parseOUTER();
		              if (s6 === peg$FAILED) {
		                s6 = null;
		              }
		              if (s6 !== peg$FAILED) {
		                s5 = [s5, s6];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		            if (s4 === peg$FAILED) {
		              s4 = peg$currPos;
		              s5 = peg$parseFULL();
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parseOUTER();
		                if (s6 === peg$FAILED) {
		                  s6 = null;
		                }
		                if (s6 !== peg$FAILED) {
		                  s5 = [s5, s6];
		                  s4 = s5;
		                } else {
		                  peg$currPos = s4;
		                  s4 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		              if (s4 === peg$FAILED) {
		                s4 = peg$parseINNER();
		                if (s4 === peg$FAILED) {
		                  s4 = peg$parseCROSS();
		                }
		              }
		            }
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseJOIN();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          peg$savedPos = s1;
		          s2 = peg$c42(s2);
		        }
		        s1 = s2;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c43(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsejoin_constraint() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseON();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseexpr();
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parseUSING();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsewhitespace();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parselparen();
		            if (s4 !== peg$FAILED) {
		              s5 = peg$currPos;
		              s6 = peg$parsewhitespace();
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsename();
		                if (s7 !== peg$FAILED) {
		                  s8 = [];
		                  s9 = peg$currPos;
		                  s10 = peg$parsewhitespace();
		                  if (s10 !== peg$FAILED) {
		                    s11 = peg$parsecomma();
		                    if (s11 !== peg$FAILED) {
		                      s12 = peg$parsewhitespace();
		                      if (s12 !== peg$FAILED) {
		                        s13 = peg$parsename();
		                        if (s13 !== peg$FAILED) {
		                          s10 = [s10, s11, s12, s13];
		                          s9 = s10;
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s9;
		                    s9 = peg$FAILED;
		                  }
		                  while (s9 !== peg$FAILED) {
		                    s8.push(s9);
		                    s9 = peg$currPos;
		                    s10 = peg$parsewhitespace();
		                    if (s10 !== peg$FAILED) {
		                      s11 = peg$parsecomma();
		                      if (s11 !== peg$FAILED) {
		                        s12 = peg$parsewhitespace();
		                        if (s12 !== peg$FAILED) {
		                          s13 = peg$parsename();
		                          if (s13 !== peg$FAILED) {
		                            s10 = [s10, s11, s12, s13];
		                            s9 = s10;
		                          } else {
		                            peg$currPos = s9;
		                            s9 = peg$FAILED;
		                          }
		                        } else {
		                          peg$currPos = s9;
		                          s9 = peg$FAILED;
		                        }
		                      } else {
		                        peg$currPos = s9;
		                        s9 = peg$FAILED;
		                      }
		                    } else {
		                      peg$currPos = s9;
		                      s9 = peg$FAILED;
		                    }
		                  }
		                  if (s8 !== peg$FAILED) {
		                    s6 = [s6, s7, s8];
		                    s5 = s6;
		                  } else {
		                    peg$currPos = s5;
		                    s5 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		              if (s5 !== peg$FAILED) {
		                s6 = peg$parsewhitespace();
		                if (s6 !== peg$FAILED) {
		                  s7 = peg$parserparen();
		                  if (s7 !== peg$FAILED) {
		                    s2 = [s2, s3, s4, s5, s6, s7];
		                    s1 = s2;
		                  } else {
		                    peg$currPos = s1;
		                    s1 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      }
		      if (s1 === peg$FAILED) {
		        s1 = null;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c44(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseordering_term() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsewhere_expr();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$currPos;
		          s5 = peg$parseCOLLATE();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parsename();
		            if (s6 !== peg$FAILED) {
		              s5 = [s5, s6];
		              s4 = s5;
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parseASC();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseDESC();
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsecompound_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUNION();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parseALL();
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 === peg$FAILED) {
		        s1 = peg$currPos;
		        s2 = peg$parseINTERSECT();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parseALL();
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s2 = [s2, s3];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		        if (s1 === peg$FAILED) {
		          s1 = peg$currPos;
		          s2 = peg$parseEXCEPT();
		          if (s2 !== peg$FAILED) {
		            s3 = peg$parseALL();
		            if (s3 === peg$FAILED) {
		              s3 = null;
		            }
		            if (s3 !== peg$FAILED) {
		              s2 = [s2, s3];
		              s1 = s2;
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c45(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseupdate_stmt() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUPDATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsequalified_table_name();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseSET();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$currPos;
		          s7 = peg$parsename();
		          if (s7 !== peg$FAILED) {
		            s8 = peg$parseequal();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parseexpr();
		              if (s9 !== peg$FAILED) {
		                s7 = [s7, s8, s9];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s6;
		            s6 = peg$FAILED;
		          }
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsecomma();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parsename();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseequal();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsecomma();
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseWHERE();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseupdate_stmt_limited() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseUPDATE();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parseOR();
		        if (s4 !== peg$FAILED) {
		          s5 = peg$parseROLLBACK();
		          if (s5 === peg$FAILED) {
		            s5 = peg$parseABORT();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parseREPLACE();
		              if (s5 === peg$FAILED) {
		                s5 = peg$parseFAIL();
		                if (s5 === peg$FAILED) {
		                  s5 = peg$parseIGNORE();
		                }
		              }
		            }
		          }
		          if (s5 !== peg$FAILED) {
		            s4 = [s4, s5];
		            s3 = s4;
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		        if (s3 === peg$FAILED) {
		          s3 = null;
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsequalified_table_name();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseSET();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$currPos;
		          s6 = peg$currPos;
		          s7 = peg$parsename();
		          if (s7 !== peg$FAILED) {
		            s8 = peg$parseequal();
		            if (s8 !== peg$FAILED) {
		              s9 = peg$parseexpr();
		              if (s9 !== peg$FAILED) {
		                s7 = [s7, s8, s9];
		                s6 = s7;
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s6;
		              s6 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s6;
		            s6 = peg$FAILED;
		          }
		          if (s6 !== peg$FAILED) {
		            s7 = peg$parsecomma();
		            if (s7 !== peg$FAILED) {
		              s6 = [s6, s7];
		              s5 = s6;
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s5;
		            s5 = peg$FAILED;
		          }
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$currPos;
		              s6 = peg$currPos;
		              s7 = peg$parsename();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$parseequal();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parseexpr();
		                  if (s9 !== peg$FAILED) {
		                    s7 = [s7, s8, s9];
		                    s6 = s7;
		                  } else {
		                    peg$currPos = s6;
		                    s6 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s6;
		                  s6 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s6;
		                s6 = peg$FAILED;
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parsecomma();
		                if (s7 !== peg$FAILED) {
		                  s6 = [s6, s7];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseWHERE();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s6 = [s6, s7];
		                s5 = s6;
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 === peg$FAILED) {
		              s5 = null;
		            }
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s3 = peg$currPos;
		          s4 = peg$currPos;
		          s5 = peg$parseORDER();
		          if (s5 !== peg$FAILED) {
		            s6 = peg$parseBY();
		            if (s6 !== peg$FAILED) {
		              s7 = [];
		              s8 = peg$currPos;
		              s9 = peg$parseordering_term();
		              if (s9 !== peg$FAILED) {
		                s10 = peg$parsecomma();
		                if (s10 !== peg$FAILED) {
		                  s9 = [s9, s10];
		                  s8 = s9;
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s8;
		                s8 = peg$FAILED;
		              }
		              if (s8 !== peg$FAILED) {
		                while (s8 !== peg$FAILED) {
		                  s7.push(s8);
		                  s8 = peg$currPos;
		                  s9 = peg$parseordering_term();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsecomma();
		                    if (s10 !== peg$FAILED) {
		                      s9 = [s9, s10];
		                      s8 = s9;
		                    } else {
		                      peg$currPos = s8;
		                      s8 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                }
		              } else {
		                s7 = peg$FAILED;
		              }
		              if (s7 !== peg$FAILED) {
		                s5 = [s5, s6, s7];
		                s4 = s5;
		              } else {
		                peg$currPos = s4;
		                s4 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s4;
		              s4 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s4;
		            s4 = peg$FAILED;
		          }
		          if (s4 === peg$FAILED) {
		            s4 = null;
		          }
		          if (s4 !== peg$FAILED) {
		            s5 = peg$currPos;
		            s6 = peg$parseLIMIT();
		            if (s6 !== peg$FAILED) {
		              s7 = peg$parseexpr();
		              if (s7 !== peg$FAILED) {
		                s8 = peg$currPos;
		                s9 = peg$parseOFFSET();
		                if (s9 === peg$FAILED) {
		                  s9 = peg$parsecomma();
		                }
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parseexpr();
		                  if (s10 !== peg$FAILED) {
		                    s9 = [s9, s10];
		                    s8 = s9;
		                  } else {
		                    peg$currPos = s8;
		                    s8 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s8;
		                  s8 = peg$FAILED;
		                }
		                if (s8 === peg$FAILED) {
		                  s8 = null;
		                }
		                if (s8 !== peg$FAILED) {
		                  s6 = [s6, s7, s8];
		                  s5 = s6;
		                } else {
		                  peg$currPos = s5;
		                  s5 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s5;
		                s5 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s5;
		              s5 = peg$FAILED;
		            }
		            if (s5 !== peg$FAILED) {
		              s4 = [s4, s5];
		              s3 = s4;
		            } else {
		              peg$currPos = s3;
		              s3 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s3;
		            s3 = peg$FAILED;
		          }
		          if (s3 === peg$FAILED) {
		            s3 = null;
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsequalified_table_name() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$parsetable_ref();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parseINDEXED();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parseBY();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsename();
		            if (s5 !== peg$FAILED) {
		              s3 = [s3, s4, s5];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = peg$currPos;
		          s3 = peg$parseNOT();
		          if (s3 !== peg$FAILED) {
		            s4 = peg$parseINDEXED();
		            if (s4 !== peg$FAILED) {
		              s3 = [s3, s4];
		              s2 = s3;
		            } else {
		              peg$currPos = s2;
		              s2 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsetable_ref() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      s4 = peg$parsename();
		      if (s4 !== peg$FAILED) {
		        s5 = peg$parsedot();
		        if (s5 !== peg$FAILED) {
		          s4 = [s4, s5];
		          s3 = s4;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        peg$savedPos = s2;
		        s3 = peg$c46(s3);
		      }
		      s2 = s3;
		      if (s2 === peg$FAILED) {
		        s2 = null;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c34(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c47(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecolumn_ref() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$currPos;
		      s3 = peg$currPos;
		      s4 = peg$parsename();
		      if (s4 !== peg$FAILED) {
		        s5 = peg$parsedot();
		        if (s5 !== peg$FAILED) {
		          s4 = [s4, s5];
		          s3 = s4;
		        } else {
		          peg$currPos = s3;
		          s3 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s3;
		        s3 = peg$FAILED;
		      }
		      if (s3 !== peg$FAILED) {
		        peg$savedPos = s2;
		        s3 = peg$c48(s3);
		      }
		      s2 = s3;
		      if (s2 === peg$FAILED) {
		        s2 = null;
		      }
		      if (s2 !== peg$FAILED) {
		        s3 = peg$currPos;
		        s4 = peg$parsename();
		        if (s4 !== peg$FAILED) {
		          peg$savedPos = s3;
		          s4 = peg$c49(s4);
		        }
		        s3 = s4;
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c50(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseagg_column_ref() {
		      var s0, s1, s2, s3, s4, s5, s6;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parseagg_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsecolumn_ref();
		            if (s5 !== peg$FAILED) {
		              s6 = peg$parserparen();
		              if (s6 !== peg$FAILED) {
		                s2 = [s2, s3, s4, s5, s6];
		                s1 = s2;
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c51(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecalc_ref() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsecalc_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsenumeric_literal();
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsenumeric_literal();
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecomma();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsenumeric_literal();
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parserparen();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c52(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsehelper_ref() {
		      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsehelper_function();
		      if (s2 !== peg$FAILED) {
		        s3 = peg$parsewhitespace();
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parselparen();
		          if (s4 !== peg$FAILED) {
		            s5 = peg$parsestring_literal();
		            if (s5 === peg$FAILED) {
		              s5 = peg$parsecolumn_ref();
		            }
		            if (s5 !== peg$FAILED) {
		              s6 = [];
		              s7 = peg$currPos;
		              s8 = peg$parsecomma();
		              if (s8 !== peg$FAILED) {
		                s9 = peg$parsewhitespace();
		                if (s9 !== peg$FAILED) {
		                  s10 = peg$parsestring_literal();
		                  if (s10 === peg$FAILED) {
		                    s10 = peg$parsecolumn_ref();
		                  }
		                  if (s10 !== peg$FAILED) {
		                    s8 = [s8, s9, s10];
		                    s7 = s8;
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s7;
		                s7 = peg$FAILED;
		              }
		              while (s7 !== peg$FAILED) {
		                s6.push(s7);
		                s7 = peg$currPos;
		                s8 = peg$parsecomma();
		                if (s8 !== peg$FAILED) {
		                  s9 = peg$parsewhitespace();
		                  if (s9 !== peg$FAILED) {
		                    s10 = peg$parsestring_literal();
		                    if (s10 === peg$FAILED) {
		                      s10 = peg$parsecolumn_ref();
		                    }
		                    if (s10 !== peg$FAILED) {
		                      s8 = [s8, s9, s10];
		                      s7 = s8;
		                    } else {
		                      peg$currPos = s7;
		                      s7 = peg$FAILED;
		                    }
		                  } else {
		                    peg$currPos = s7;
		                    s7 = peg$FAILED;
		                  }
		                } else {
		                  peg$currPos = s7;
		                  s7 = peg$FAILED;
		                }
		              }
		              if (s6 !== peg$FAILED) {
		                s7 = peg$parserparen();
		                if (s7 !== peg$FAILED) {
		                  s2 = [s2, s3, s4, s5, s6, s7];
		                  s1 = s2;
		                } else {
		                  peg$currPos = s1;
		                  s1 = peg$FAILED;
		                }
		              } else {
		                peg$currPos = s1;
		                s1 = peg$FAILED;
		              }
		            } else {
		              peg$currPos = s1;
		              s1 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c53(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecomment_syntax() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$parseminusminus();
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parseanything_except_newline();
		        if (s2 !== peg$FAILED) {
		          s3 = peg$parsenewline();
		          if (s3 === peg$FAILED) {
		            s3 = peg$parseend_of_input();
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }
		      if (s0 === peg$FAILED) {
		        s0 = peg$currPos;
		        s1 = peg$parsecomment_beg();
		        if (s1 !== peg$FAILED) {
		          s2 = peg$parseanything_except_comment_end();
		          if (s2 !== peg$FAILED) {
		            s3 = peg$parsecomment_end();
		            if (s3 === peg$FAILED) {
		              s3 = peg$parseend_of_input();
		            }
		            if (s3 !== peg$FAILED) {
		              s1 = [s1, s2, s3];
		              s0 = s1;
		            } else {
		              peg$currPos = s0;
		              s0 = peg$FAILED;
		            }
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      }

		      return s0;
		    }

		    function peg$parsedot() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 46) {
		        s0 = peg$c54;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c55); }
		      }

		      return s0;
		    }

		    function peg$parsecomma() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 44) {
		        s0 = peg$c56;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c57); }
		      }

		      return s0;
		    }

		    function peg$parsesemicolon() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 59) {
		        s0 = peg$c58;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c59); }
		      }

		      return s0;
		    }

		    function peg$parseminusminus() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c60) {
		        s0 = peg$c60;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c61); }
		      }

		      return s0;
		    }

		    function peg$parseminus() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 45) {
		        s0 = peg$c62;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c63); }
		      }

		      return s0;
		    }

		    function peg$parseplus() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 43) {
		        s0 = peg$c64;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c65); }
		      }

		      return s0;
		    }

		    function peg$parsedivide() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 47) {
		        s0 = peg$c66;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c67); }
		      }

		      return s0;
		    }

		    function peg$parsemodulo() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 37) {
		        s0 = peg$c68;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c69); }
		      }

		      return s0;
		    }

		    function peg$parselparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 40) {
		        s0 = peg$c70;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c71); }
		      }

		      return s0;
		    }

		    function peg$parserparen() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 41) {
		        s0 = peg$c72;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c73); }
		      }

		      return s0;
		    }

		    function peg$parsestar() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 42) {
		        s0 = peg$c74;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c75); }
		      }

		      return s0;
		    }

		    function peg$parsenewline() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 10) {
		        s0 = peg$c76;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c77); }
		      }

		      return s0;
		    }

		    function peg$parseanything_except_newline() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c78.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c79); }
		      }
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        if (peg$c78.test(input.charAt(peg$currPos))) {
		          s1 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s1 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c79); }
		        }
		      }

		      return s0;
		    }

		    function peg$parsecomment_beg() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c80) {
		        s0 = peg$c80;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c81); }
		      }

		      return s0;
		    }

		    function peg$parsecomment_end() {
		      var s0;

		      if (input.substr(peg$currPos, 2) === peg$c82) {
		        s0 = peg$c82;
		        peg$currPos += 2;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c83); }
		      }

		      return s0;
		    }

		    function peg$parseanything_except_comment_end() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = [];
		      if (input.length > peg$currPos) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c84); }
		      }
		      while (s2 !== peg$FAILED) {
		        s1.push(s2);
		        if (input.length > peg$currPos) {
		          s2 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c84); }
		        }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        peg$silentFails++;
		        if (input.substr(peg$currPos, 2) === peg$c82) {
		          s3 = peg$c82;
		          peg$currPos += 2;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c83); }
		        }
		        peg$silentFails--;
		        if (s3 !== peg$FAILED) {
		          peg$currPos = s2;
		          s2 = void 0;
		        } else {
		          s2 = peg$FAILED;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsestring_literal() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 34) {
		        s1 = peg$c85;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c86); }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = [];
		        s3 = peg$parseescape_char();
		        if (s3 === peg$FAILED) {
		          if (peg$c87.test(input.charAt(peg$currPos))) {
		            s3 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c88); }
		          }
		        }
		        while (s3 !== peg$FAILED) {
		          s2.push(s3);
		          s3 = peg$parseescape_char();
		          if (s3 === peg$FAILED) {
		            if (peg$c87.test(input.charAt(peg$currPos))) {
		              s3 = input.charAt(peg$currPos);
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c88); }
		            }
		          }
		        }
		        if (s2 !== peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 34) {
		            s3 = peg$c85;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c86); }
		          }
		          if (s3 !== peg$FAILED) {
		            s1 = [s1, s2, s3];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseescape_char() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 92) {
		        s1 = peg$c89;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c90); }
		      }
		      if (s1 !== peg$FAILED) {
		        if (input.length > peg$currPos) {
		          s2 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c84); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsenil() {
		      var s0;

		      s0 = peg$c91;

		      return s0;
		    }

		    function peg$parsewhitespace() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c92.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c93); }
		      }
		      while (s1 !== peg$FAILED) {
		        s0.push(s1);
		        if (peg$c92.test(input.charAt(peg$currPos))) {
		          s1 = input.charAt(peg$currPos);
		          peg$currPos++;
		        } else {
		          s1 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c93); }
		        }
		      }

		      return s0;
		    }

		    function peg$parsewhitespace1() {
		      var s0, s1;

		      s0 = [];
		      if (peg$c92.test(input.charAt(peg$currPos))) {
		        s1 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c93); }
		      }
		      if (s1 !== peg$FAILED) {
		        while (s1 !== peg$FAILED) {
		          s0.push(s1);
		          if (peg$c92.test(input.charAt(peg$currPos))) {
		            s1 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s1 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c93); }
		          }
		        }
		      } else {
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseunary_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.charCodeAt(peg$currPos) === 45) {
		          s3 = peg$c62;
		          peg$currPos++;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c63); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 43) {
		            s3 = peg$c64;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c65); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.charCodeAt(peg$currPos) === 126) {
		              s3 = peg$c94;
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c95); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
		                s3 = input.substr(peg$currPos, 3);
		                peg$currPos += 3;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c97); }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsebinary_operator() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2) === peg$c99) {
		          s3 = peg$c99;
		          peg$currPos += 2;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c100); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.charCodeAt(peg$currPos) === 42) {
		            s3 = peg$c74;
		            peg$currPos++;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c75); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.charCodeAt(peg$currPos) === 47) {
		              s3 = peg$c66;
		              peg$currPos++;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c67); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.charCodeAt(peg$currPos) === 37) {
		                s3 = peg$c68;
		                peg$currPos++;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c69); }
		              }
		              if (s3 === peg$FAILED) {
		                if (input.charCodeAt(peg$currPos) === 43) {
		                  s3 = peg$c64;
		                  peg$currPos++;
		                } else {
		                  s3 = peg$FAILED;
		                  if (peg$silentFails === 0) { peg$fail(peg$c65); }
		                }
		                if (s3 === peg$FAILED) {
		                  if (input.charCodeAt(peg$currPos) === 45) {
		                    s3 = peg$c62;
		                    peg$currPos++;
		                  } else {
		                    s3 = peg$FAILED;
		                    if (peg$silentFails === 0) { peg$fail(peg$c63); }
		                  }
		                  if (s3 === peg$FAILED) {
		                    if (input.substr(peg$currPos, 2) === peg$c101) {
		                      s3 = peg$c101;
		                      peg$currPos += 2;
		                    } else {
		                      s3 = peg$FAILED;
		                      if (peg$silentFails === 0) { peg$fail(peg$c102); }
		                    }
		                    if (s3 === peg$FAILED) {
		                      if (input.substr(peg$currPos, 2) === peg$c103) {
		                        s3 = peg$c103;
		                        peg$currPos += 2;
		                      } else {
		                        s3 = peg$FAILED;
		                        if (peg$silentFails === 0) { peg$fail(peg$c104); }
		                      }
		                      if (s3 === peg$FAILED) {
		                        if (input.charCodeAt(peg$currPos) === 38) {
		                          s3 = peg$c105;
		                          peg$currPos++;
		                        } else {
		                          s3 = peg$FAILED;
		                          if (peg$silentFails === 0) { peg$fail(peg$c106); }
		                        }
		                        if (s3 === peg$FAILED) {
		                          if (input.charCodeAt(peg$currPos) === 124) {
		                            s3 = peg$c107;
		                            peg$currPos++;
		                          } else {
		                            s3 = peg$FAILED;
		                            if (peg$silentFails === 0) { peg$fail(peg$c108); }
		                          }
		                          if (s3 === peg$FAILED) {
		                            if (input.substr(peg$currPos, 2) === peg$c109) {
		                              s3 = peg$c109;
		                              peg$currPos += 2;
		                            } else {
		                              s3 = peg$FAILED;
		                              if (peg$silentFails === 0) { peg$fail(peg$c110); }
		                            }
		                            if (s3 === peg$FAILED) {
		                              if (input.substr(peg$currPos, 2) === peg$c111) {
		                                s3 = peg$c111;
		                                peg$currPos += 2;
		                              } else {
		                                s3 = peg$FAILED;
		                                if (peg$silentFails === 0) { peg$fail(peg$c112); }
		                              }
		                              if (s3 === peg$FAILED) {
		                                if (input.charCodeAt(peg$currPos) === 60) {
		                                  s3 = peg$c113;
		                                  peg$currPos++;
		                                } else {
		                                  s3 = peg$FAILED;
		                                  if (peg$silentFails === 0) { peg$fail(peg$c114); }
		                                }
		                                if (s3 === peg$FAILED) {
		                                  if (input.charCodeAt(peg$currPos) === 62) {
		                                    s3 = peg$c115;
		                                    peg$currPos++;
		                                  } else {
		                                    s3 = peg$FAILED;
		                                    if (peg$silentFails === 0) { peg$fail(peg$c116); }
		                                  }
		                                  if (s3 === peg$FAILED) {
		                                    if (input.charCodeAt(peg$currPos) === 61) {
		                                      s3 = peg$c117;
		                                      peg$currPos++;
		                                    } else {
		                                      s3 = peg$FAILED;
		                                      if (peg$silentFails === 0) { peg$fail(peg$c118); }
		                                    }
		                                    if (s3 === peg$FAILED) {
		                                      if (input.substr(peg$currPos, 2) === peg$c119) {
		                                        s3 = peg$c119;
		                                        peg$currPos += 2;
		                                      } else {
		                                        s3 = peg$FAILED;
		                                        if (peg$silentFails === 0) { peg$fail(peg$c120); }
		                                      }
		                                      if (s3 === peg$FAILED) {
		                                        if (input.substr(peg$currPos, 2) === peg$c121) {
		                                          s3 = peg$c121;
		                                          peg$currPos += 2;
		                                        } else {
		                                          s3 = peg$FAILED;
		                                          if (peg$silentFails === 0) { peg$fail(peg$c122); }
		                                        }
		                                        if (s3 === peg$FAILED) {
		                                          if (input.substr(peg$currPos, 2) === peg$c123) {
		                                            s3 = peg$c123;
		                                            peg$currPos += 2;
		                                          } else {
		                                            s3 = peg$FAILED;
		                                            if (peg$silentFails === 0) { peg$fail(peg$c124); }
		                                          }
		                                          if (s3 === peg$FAILED) {
		                                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c125) {
		                                              s3 = input.substr(peg$currPos, 2);
		                                              peg$currPos += 2;
		                                            } else {
		                                              s3 = peg$FAILED;
		                                              if (peg$silentFails === 0) { peg$fail(peg$c126); }
		                                            }
		                                            if (s3 === peg$FAILED) {
		                                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c127) {
		                                                s3 = input.substr(peg$currPos, 6);
		                                                peg$currPos += 6;
		                                              } else {
		                                                s3 = peg$FAILED;
		                                                if (peg$silentFails === 0) { peg$fail(peg$c128); }
		                                              }
		                                              if (s3 === peg$FAILED) {
		                                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c129) {
		                                                  s3 = input.substr(peg$currPos, 2);
		                                                  peg$currPos += 2;
		                                                } else {
		                                                  s3 = peg$FAILED;
		                                                  if (peg$silentFails === 0) { peg$fail(peg$c130); }
		                                                }
		                                                if (s3 === peg$FAILED) {
		                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {
		                                                    s3 = input.substr(peg$currPos, 4);
		                                                    peg$currPos += 4;
		                                                  } else {
		                                                    s3 = peg$FAILED;
		                                                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
		                                                  }
		                                                  if (s3 === peg$FAILED) {
		                                                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c133) {
		                                                      s3 = input.substr(peg$currPos, 4);
		                                                      peg$currPos += 4;
		                                                    } else {
		                                                      s3 = peg$FAILED;
		                                                      if (peg$silentFails === 0) { peg$fail(peg$c134); }
		                                                    }
		                                                    if (s3 === peg$FAILED) {
		                                                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c135) {
		                                                        s3 = input.substr(peg$currPos, 5);
		                                                        peg$currPos += 5;
		                                                      } else {
		                                                        s3 = peg$FAILED;
		                                                        if (peg$silentFails === 0) { peg$fail(peg$c136); }
		                                                      }
		                                                      if (s3 === peg$FAILED) {
		                                                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c137) {
		                                                          s3 = input.substr(peg$currPos, 6);
		                                                          peg$currPos += 6;
		                                                        } else {
		                                                          s3 = peg$FAILED;
		                                                          if (peg$silentFails === 0) { peg$fail(peg$c138); }
		                                                        }
		                                                      }
		                                                    }
		                                                  }
		                                                }
		                                              }
		                                            }
		                                          }
		                                        }
		                                      }
		                                    }
		                                  }
		                                }
		                              }
		                            }
		                          }
		                        }
		                      }
		                    }
		                  }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseboolean_operator() {
		      var s0, s1, s2, s3, s4;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace1();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {
		          s3 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c140); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c141) {
		            s3 = input.substr(peg$currPos, 2);
		            peg$currPos += 2;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c142); }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s4 = peg$parsewhitespace1();
		          if (s4 !== peg$FAILED) {
		            s2 = [s2, s3, s4];
		            s1 = s2;
		          } else {
		            peg$currPos = s1;
		            s1 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parseagg_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c143) {
		          s3 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c144); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {
		            s3 = input.substr(peg$currPos, 3);
		            peg$currPos += 3;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c146); }
		          }
		          if (s3 === peg$FAILED) {
		            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {
		              s3 = input.substr(peg$currPos, 3);
		              peg$currPos += 3;
		            } else {
		              s3 = peg$FAILED;
		              if (peg$silentFails === 0) { peg$fail(peg$c148); }
		            }
		            if (s3 === peg$FAILED) {
		              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c149) {
		                s3 = input.substr(peg$currPos, 3);
		                peg$currPos += 3;
		              } else {
		                s3 = peg$FAILED;
		                if (peg$silentFails === 0) { peg$fail(peg$c150); }
		              }
		              if (s3 === peg$FAILED) {
		                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c151) {
		                  s3 = input.substr(peg$currPos, 3);
		                  peg$currPos += 3;
		                } else {
		                  s3 = peg$FAILED;
		                  if (peg$silentFails === 0) { peg$fail(peg$c152); }
		                }
		              }
		            }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsehelper_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c153) {
		          s3 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c154); }
		        }
		        if (s3 === peg$FAILED) {
		          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c155) {
		            s3 = input.substr(peg$currPos, 3);
		            peg$currPos += 3;
		          } else {
		            s3 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c156); }
		          }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsecalc_function() {
		      var s0, s1, s2, s3;

		      s0 = peg$currPos;
		      s1 = peg$currPos;
		      s2 = peg$parsewhitespace();
		      if (s2 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c157) {
		          s3 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s3 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c158); }
		        }
		        if (s3 !== peg$FAILED) {
		          s2 = [s2, s3];
		          s1 = s2;
		        } else {
		          peg$currPos = s1;
		          s1 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s1;
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c98(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsedigit() {
		      var s0;

		      if (peg$c159.test(input.charAt(peg$currPos))) {
		        s0 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c160); }
		      }

		      return s0;
		    }

		    function peg$parsenumber() {
		      var s0, s1, s2, s3, s4, s5;

		      s0 = peg$currPos;
		      s1 = [];
		      s2 = peg$parsedigit();
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          s2 = peg$parsedigit();
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$currPos;
		        s3 = peg$parsedot();
		        if (s3 !== peg$FAILED) {
		          s4 = [];
		          s5 = peg$parsedigit();
		          if (s5 !== peg$FAILED) {
		            while (s5 !== peg$FAILED) {
		              s4.push(s5);
		              s5 = peg$parsedigit();
		            }
		          } else {
		            s4 = peg$FAILED;
		          }
		          if (s4 !== peg$FAILED) {
		            s3 = [s3, s4];
		            s2 = s3;
		          } else {
		            peg$currPos = s2;
		            s2 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s2;
		          s2 = peg$FAILED;
		        }
		        if (s2 === peg$FAILED) {
		          s2 = null;
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }
		      if (s0 === peg$FAILED) {
		        s0 = peg$currPos;
		        s1 = peg$parsedot();
		        if (s1 !== peg$FAILED) {
		          s2 = [];
		          s3 = peg$parsedigit();
		          if (s3 !== peg$FAILED) {
		            while (s3 !== peg$FAILED) {
		              s2.push(s3);
		              s3 = peg$parsedigit();
		            }
		          } else {
		            s2 = peg$FAILED;
		          }
		          if (s2 !== peg$FAILED) {
		            s1 = [s1, s2];
		            s0 = s1;
		          } else {
		            peg$currPos = s0;
		            s0 = peg$FAILED;
		          }
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      }

		      return s0;
		    }

		    function peg$parseequal() {
		      var s0;

		      if (input.charCodeAt(peg$currPos) === 61) {
		        s0 = peg$c117;
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c118); }
		      }

		      return s0;
		    }

		    function peg$parsename() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = [];
		      if (peg$c161.test(input.charAt(peg$currPos))) {
		        s2 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s2 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c162); }
		      }
		      if (s2 !== peg$FAILED) {
		        while (s2 !== peg$FAILED) {
		          s1.push(s2);
		          if (peg$c161.test(input.charAt(peg$currPos))) {
		            s2 = input.charAt(peg$currPos);
		            peg$currPos++;
		          } else {
		            s2 = peg$FAILED;
		            if (peg$silentFails === 0) { peg$fail(peg$c162); }
		          }
		        }
		      } else {
		        s1 = peg$FAILED;
		      }
		      if (s1 !== peg$FAILED) {
		        peg$savedPos = s0;
		        s1 = peg$c163(s1);
		      }
		      s0 = s1;

		      return s0;
		    }

		    function peg$parsebind_parameter() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      if (input.charCodeAt(peg$currPos) === 63) {
		        s1 = peg$c164;
		        peg$currPos++;
		      } else {
		        s1 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c165); }
		      }
		      if (s1 !== peg$FAILED) {
		        s2 = peg$parsename();
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_TIME() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c166) {
		        s0 = peg$c166;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c167); }
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_DATE() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c166) {
		        s0 = peg$c166;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c167); }
		      }

		      return s0;
		    }

		    function peg$parseCURRENT_TIMESTAMP() {
		      var s0;

		      if (input.substr(peg$currPos, 3) === peg$c166) {
		        s0 = peg$c166;
		        peg$currPos += 3;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c167); }
		      }

		      return s0;
		    }

		    function peg$parseend_of_input() {
		      var s0;

		      s0 = peg$c91;

		      return s0;
		    }

		    function peg$parseABORT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c168) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c169); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseACTION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c170) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c171); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseADD() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c155) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c156); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAFTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c172) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c173); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseALL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c174) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c175); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseALTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c176) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c177); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseANALYZE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c178) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c179); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAND() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c139) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c140); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c180) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c181); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseASC() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c182) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c183); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseATTACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c184) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c185); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAUTOINCREMENT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c186) {
		          s2 = input.substr(peg$currPos, 13);
		          peg$currPos += 13;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c187); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBEFORE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c188) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c189); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBEGIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c190) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c191); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBETWEEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c192) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c193); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseBY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c194) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c195); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCASCADE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c196) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c197); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c198) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c199); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCAST() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c200) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c201); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCHECK() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c202) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c203); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOLLATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c204) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c205); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOLUMN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c206) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c207); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOMMIT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c208) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c209); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCONFLICT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c210) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c211); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCONSTRAINT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c212) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c213); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCREATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c214) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c215); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCROSS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c216) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c217); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDATABASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c218) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c219); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFAULT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c220) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c221); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFERRABLE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c222) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c223); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDEFERRED() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c224) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c225); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDELETE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c226) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c227); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDESC() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c228) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c229); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDETACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c230) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c231); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDISTINCT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c232) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c233); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseDROP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c234) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c235); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseE() {
		      var s0;

		      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c236) {
		        s0 = input.charAt(peg$currPos);
		        peg$currPos++;
		      } else {
		        s0 = peg$FAILED;
		        if (peg$silentFails === 0) { peg$fail(peg$c237); }
		      }

		      return s0;
		    }

		    function peg$parseEACH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c238) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c239); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseELSE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c240) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c241); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEND() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c242) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c243); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseESCAPE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c244) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c245); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXCEPT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c246) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c247); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXCLUSIVE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c248) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c249); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXISTS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c250) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c251); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseEXPLAIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c252) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c253); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFAIL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c254) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c255); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFOR() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c256) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c257); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFOREIGN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c258) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c259); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFROM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c260) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c261); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseFULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c262) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c263); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseGLOB() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c133) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c134); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseGROUP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c264) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c265); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseHAVING() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c266) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c267); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIF() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c268) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c269); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIGNORE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c270) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c271); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIMMEDIATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c272) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c273); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c129) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c130); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINDEX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c274) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c275); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINDEXED() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c276) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c277); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINITIALLY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c278) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c279); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINNER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c280) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c281); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINSERT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c282) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c283); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINSTEAD() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c284) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c285); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINTERSECT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c286) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c287); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseINTO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c288) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c289); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseIS() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c125) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c126); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseISNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c290) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c291); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseJOIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c292) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c293); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseKEY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c294) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c295); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLEFT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c296) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c297); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLIKE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c132); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseLIMIT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c298) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c299); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMATCH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c135) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c136); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNATURAL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c300) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c301); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c302) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c303); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNOT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c97); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNOTNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c304) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c305); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseNULL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c306) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c307); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOF() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c308) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c309); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOFFSET() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c310) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c311); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseON() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c312) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c313); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOR() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c141) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c142); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseORDER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c314) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c315); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseOUTER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c316) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c317); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePLAN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c318) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c319); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePRAGMA() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c320) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c321); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parsePRIMARY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c322) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c323); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseQUERY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c324) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c325); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRAISE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c326) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c327); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREFERENCES() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c328) {
		          s2 = input.substr(peg$currPos, 10);
		          peg$currPos += 10;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c329); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREGEXP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c137) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c138); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREINDEX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c330) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c331); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRELEASE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c332) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c333); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRENAME() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c334) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c335); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseREPLACE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c336) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c337); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRESTRICT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c338) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c339); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseRIGHT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c340) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c341); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseROLLBACK() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c342) {
		          s2 = input.substr(peg$currPos, 8);
		          peg$currPos += 8;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c343); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseROW() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c344) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c345); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSAVEPOINT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c346) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c347); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSELECT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c348) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c349); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSET() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c350) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c351); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTABLE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c352) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c353); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTEMP() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c354) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c355); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTEMPORARY() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c356) {
		          s2 = input.substr(peg$currPos, 9);
		          peg$currPos += 9;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c357); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTHEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c358) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c359); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTO() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c360) {
		          s2 = input.substr(peg$currPos, 2);
		          peg$currPos += 2;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c361); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTRANSACTION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c362) {
		          s2 = input.substr(peg$currPos, 11);
		          peg$currPos += 11;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c363); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseTRIGGER() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c364) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c365); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUNION() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c366) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c367); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUNIQUE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c368) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c369); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUPDATE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c370) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c371); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseUSING() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c372) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c373); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVACUUM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c374) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c375); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVALUES() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c376) {
		          s2 = input.substr(peg$currPos, 6);
		          peg$currPos += 6;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c377); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVIEW() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c378) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c379); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseVIRTUAL() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c380) {
		          s2 = input.substr(peg$currPos, 7);
		          peg$currPos += 7;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c381); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWHEN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c382) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c383); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWHERE() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c384) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c385); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseCOUNT() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c143) {
		          s2 = input.substr(peg$currPos, 5);
		          peg$currPos += 5;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c144); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseSUM() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c146); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMIN() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c149) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c150); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseMAX() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c151) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c152); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseAVG() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace1();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {
		          s2 = input.substr(peg$currPos, 3);
		          peg$currPos += 3;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c148); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }

		    function peg$parseWITH() {
		      var s0, s1, s2;

		      s0 = peg$currPos;
		      s1 = peg$parsewhitespace();
		      if (s1 !== peg$FAILED) {
		        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c386) {
		          s2 = input.substr(peg$currPos, 4);
		          peg$currPos += 4;
		        } else {
		          s2 = peg$FAILED;
		          if (peg$silentFails === 0) { peg$fail(peg$c387); }
		        }
		        if (s2 !== peg$FAILED) {
		          s1 = [s1, s2];
		          s0 = s1;
		        } else {
		          peg$currPos = s0;
		          s0 = peg$FAILED;
		        }
		      } else {
		        peg$currPos = s0;
		        s0 = peg$FAILED;
		      }

		      return s0;
		    }


		      // Header/utility functions for sql.pegjs grammar match bodies.
		      //
		      function append(arr, x) {
		        arr[arr.length] = x;
		        return arr;
		      }

		      function flatten(x, rejectSpace, acc) {
		        acc = acc || [];
		        if (x == null || x == undefined) {
		          if (!rejectSpace) {
		            return append(acc, x);
		          }
		          return acc;
		        }
		        if (x.length == undefined) { // Just an object, not a string or array.
		          return append(acc, x);
		        }
		        if (rejectSpace &&
		          ((x.length == 0) ||
		           (typeof(x) == "string" &&
		            x.match(/^\s*$/)))) {
		          return acc;
		        }
		        if (typeof(x) == "string") {
		          return append(acc, x);
		        }
		        for (var i = 0; i < x.length; i++) {
		          flatten(x[i], rejectSpace, acc);
		        }
		        return acc;
		      }

		      function flatstr(x, rejectSpace, joinChar) {
		        return flatten(x, rejectSpace, []).join(joinChar || '');
		      }

		      function filter(arr, x) {
		        var acc = [];
		        for (var i = 0; i < arr.length; i++) {
		          if (arr[i] != x) {
		            acc[acc.length] = arr[i];
		          }
		        }
		        return acc;
		      }

		      function nonempty(x) {             // Ex: nonempty("") == null;
		        if (x == null || x.length > 0) { // Ex: nonempty(null) == null;
		          return x;
		        }
		        return null;
		       }

		      function put_if_not_null(m, key, val) {
		        if (val) {
		          m[key] = val;
		        }
		        return m;
		      }
		      function merge(src, dst) {
		        for (var k in src) {
		          dst[k] = src[k];
		        }
		        return dst;
		      }


		    peg$result = peg$startRuleFunction();

		    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
		      return peg$result;
		    } else {
		      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
		        peg$fail({ type: "end", description: "end of input" });
		      }

		      throw peg$buildException(
		        null,
		        peg$maxFailExpected,
		        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
		        peg$maxFailPos < input.length
		          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
		          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		      );
		    }
		  }

		  return {
		    SyntaxError: peg$SyntaxError,
		    parse:       peg$parse
		  };
		})();
},{}],3:[function(require,module,exports){
(function() {
	var app = angular.module('recursionTool', ['ngSanitize']);

	app.run(function($rootScope) {
		$rootScope.dbDetails = []; //shared variable, contains names of table and columns for semantic check
		$rootScope.localDb = [];
		$rootScope.gistInfo = {};
		$rootScope.selectedDb;
		$rootScope.finalEmpty = "";
		$rootScope.finalHeader = [];
		$rootScope.finalData = {};
		$rootScope.withStep = false;
		$rootScope.formatInfo = {};
		$rootScope.stepCount = 0;
		$rootScope.formatCount = 0;
		$rootScope.recRows = [];
		$rootScope.cumulatedRows = 0;
		$rootScope.editor;
		$rootScope.header = [];
		$rootScope.initData = [];
		$rootScope.initEmpty = false;
		$rootScope.stepData = [];
		$rootScope.fullData = [];
		$rootScope.currentStep = 0;
		$rootScope.fullResult = false;
		$rootScope.editorValue = "";
		$rootScope.innerQuery = "";
		$rootScope.innerInit = "";
		$rootScope.innerRec = "";
		$rootScope.innerUnion = "";
		$rootScope.outerQuery = "";
		$rootScope.converter = new showdown.Converter();
		$rootScope.scrollSpeed = 1500;
		
		$rootScope.recSteps = 100;
		$rootScope.stepLimit = false;

		
	    $rootScope.$on('execQueryEmit', function(event, args) {
	        $rootScope.$broadcast('execQueryBroadcast', args);
	    });
	    
	 
	    
	    
	});
	
	/*
	 * Controller for input form
	 */
	app.controller('inputController', function($scope, $rootScope, $timeout) {
		$scope.result = "result";	
		$scope.validInput = "";
		$scope.explain = "";
		$scope.nonRecursiveReason = "";
		$scope.parser = require('./parser/sqlparser.js');
		$scope.parsed = "";
		$scope.parseErr = "";
		$scope.parseSuccess = false;
		$scope.parseWarning = false;
		$scope.parseError = false;
		$scope.semanticErr = "";
		$scope.semanticError = false;
		$scope.withSuccess = false;
		
		
		
		$rootScope.editor = CodeMirror.fromTextArea(document.getElementById("inputText"), {
			lineNumbers : true,
			lineWrapping : true,
			matchBrackets : true,
			autoCloseBrackets : true,
			mode : "text/x-mysql"
		});
		
		
		//whenever value of editor changes, try to parse it
		$rootScope.editor.on("change", function() {
			//$scope.removeHighlight();
			//$rootScope.withStep = false;
			$rootScope.editorValue = $rootScope.editor.getValue(); 
			$rootScope.editorValue = $scope.removeComments($rootScope.editorValue+'\n').trim(); //add \n to also make singleline comments at the end possible
			$scope.parseQuery($rootScope.editorValue);
			$scope.result = JSON.stringify($scope.parsed);
			
			//$scope.$apply();
			$timeout(function() { } );
		  });
		
		$scope.removeComments = function(s){  
			var sqlComments = /\/\*[^]*?\*\/|--.*?\n/g; 
			return s.replace(sqlComments,'');
		};
		
		$scope.highlightError = function(start,end){
			//console.log(JSON.stringify(start)+" "+JSON.stringify(end));
			$rootScope.editor.markText({line: start.line-1, ch: start.column-1}, {line: end.line-1, ch: end.column}, {
				  className : "editorError"
				});
			
		};
		
		$scope.removeHighlight = function(){
			$("#inputText").removeClass('editorError');
		};
		
		$scope.setExample = function(exId){
			$rootScope.editor.setValue($rootScope.localDb[$rootScope.selectedDb].example[exId]);
		};
		
		
		/* Syntax Check */
		$scope.parseQuery = function(sql){
			if(sql == ""){
				$scope.parseSuccess = false;
				$scope.parseWarning = false;
				$scope.parseError = false;
				document.getElementById("submitQueryButton").disabled=true;
				return;
			}
			try{
				$scope.parsed = $scope.parser.parse(sql);
				$scope.parseError = false;
				var semCheck = $scope.semanticCheck($scope.parsed);
				if(semCheck.bool){
					$scope.semanticError = false;
					
					
					if($scope.withSuccess){
						$scope.validInput = "Valid input: Recursive query";
						$scope.parseSuccess = true;
						$scope.parseWarning = false;
					}
					else{
						$scope.validInput = "Valid input: Step-by-Step Solution not available ("+$scope.nonRecursiveReason+")";
						$scope.parseSuccess = false;
						$scope.parseWarning = true;
					}
					
					document.getElementById("submitQueryButton").disabled=false;
			}
				else{
					$scope.semanticErr = semCheck.err;
					$scope.semanticError = true;
					$scope.parseSuccess = false;
					$scope.parseWarning = false;
					document.getElementById("submitQueryButton").disabled=true;
				}
			}
			catch(err){
				console.log(err);
				try{
					$scope.parseErr = err["name"]+" at line "+err["location"]["start"]["line"]+", column "+err["location"]["start"]["column"];
//					$rootScope.editor.markText({line: 0, ch: 0}, {line: 10, ch: 0}, {
//						 css:"color:red"
//						});
				//	$scope.highlightError(err.location.start,err.location.end);
				}
				catch(err){
					console.log(err);
					$scope.parseErr = err["name"];
				}
				
				$scope.parseSuccess = false;
				$scope.parseWarning = false;
				$scope.parseError = true;
				document.getElementById("submitQueryButton").disabled=true;
			}
		};
		
		/* Semantic Check */
		$scope.semanticCheck = function(parsed){
			var db = $rootScope.dbDetails;
			var result = {};
			result.bool = true;
			var aliases = [];
			var t_aliases = [];
			var clause_name = "";
			var clause_att = [];
			
			
			//basic semantic check (table, column names), multijoin-check
			function process(key,value) {
				if(value == null) return; //necessary for something like "select * from flug, flughafen", somehow doesnt get caught before
				if(value.hasOwnProperty('clause_name') && value.hasOwnProperty('clause_att')){
					clause_name = value.clause_name; //to check if outer query references the correct with-clause
					clause_att = value.clause_att.slice(); //number of attributes need to be the same in clause and query definition
				}
				if(value.hasOwnProperty('table') && value.hasOwnProperty('column')){
					if(value.table == clause_name && clause_att.indexOf(value.column) != -1){
						//console.log(value.table+"."+value.column+" property found");
						return;
					}
				
				   for(var i = 0; i < db.length; i++){
					   if(value.table == db[i].table){
						   if(db[i].column.indexOf(value.column) != -1 || value.column == '*'){
							   //console.log(value.table+"."+value.column+" property found");
							   return
						   }
					   }
				   }
				   
				   for(var i in t_aliases){
					   if(value.table == t_aliases[i].alias){
						   if(t_aliases[i].table == clause_name && clause_att.indexOf(value.column) != -1){
							  // console.log(value.table+"."+value.column+" property found");
							   return;
						   }
						   
						   if(value.column == '*'){
							  // console.log(value.table+"."+value.column+" property found");
							   return;
						   }
						   
						   for(var j in db){
							   if(db[j].table == t_aliases[i].table && db[j].column.indexOf(value.column) != -1){
								   //console.log(value.table+"."+value.column+" property found");
								   return
							   }
						   }
					   }
				   }

				  // console.log(value.table+"."+value.column+" NOT found");
				   result.bool = false;
				   result.err = value.table+"."+value.column+" not found in database, aliases: "+aliases;
				   return;
				}
					   
				else if(value.hasOwnProperty('table')){
				   for(var j = 0; j < db.length; j++){
					   if(value.table == db[j].table || aliases.indexOf(value.table) != -1 || value.table == clause_name){
						  //console.log(value.table+" property found");
						  return;
					   };
				   }
				   //console.log(value.table+" NOT found");
				   result.bool = false;
				   result.err = "Table "+value.table+" not found in database";
				   return;
				}
				
				else if(value.hasOwnProperty('column')){
					if(value.column == '*'){
						//console.log(value.column+" property found");
						return;
					}
					
					if(clause_att.indexOf(value.column) != -1){
						return;
					}
					
					for(var k = 0; k < db.length; k++){
						   if(db[k].column.indexOf(value.column) != -1 || aliases.indexOf(value.column) != -1){
							 // console.log(value.column+" property found");
							  return;
						   }
					}
					
					//console.log(value.column+" NOT found");
					result.bool = false;
					result.err = "Column "+value.column+" not found in database, aliases: "+aliases;
					return;
				}
				
				/*
				//multi-join-check (no using possible)
				if(value.hasOwnProperty("from")){
					var from = value.from;
					var joinCount = 0;
					var implicit = true;
					for(var i in from){
						if(from[i].hasOwnProperty("join_constraint")){
							joinCount++;
							if(from[i].join_constraint != null && from[i].join_constraint[0][1].trim().toLowerCase() == "using"){
								implicit = false;
							}
						}
					}
					if(joinCount > 1 && !implicit){
						result.bool = false;
						result.err = "Sorry! When joining 3 or more tables it is not possible to use Using.\n Please Join with On or by putting the condition into the Where-Clause";
						return;
					}
				}
				*/
			}
			
			

			//with-specific semantic
			function process_with(key,value){
				if(value == null) return;
				if(value.hasOwnProperty('outer_query')){ //check correct reference
					var ref = value.outer_query.select_cores[0].from[0].table;
					if(ref == clause_name){
						//console.log(ref+" correct clause name");
					}
					else{
						//console.log(ref+" is NOT the correct clause name");
						result.bool = false;
						result.err = "Clause reference "+ref+" does not match its definition "+clause_name;
						return;
					}
				}
			
				//TODO improvable
				if(value.hasOwnProperty('query_def')){//check number of attributes
					var q = value.query_def.select_cores;
					for(i in q){
						var res = q[i].results;

						//special case 'select * from xy'
						if(res.length == 1 && res[0].hasOwnProperty('column') && res[0].column == '*'){
								
							var table = q[i].from[0].table;
							for(j in db){
								if(db[j].table == table){
									if(db[j].column.length == clause_att.length){
										//console.log("Correct number of attributes");
									}
									else{
										result.bool = false;
										result.err = "Clause definition and query definition have different number of attributes";
										return;
									}
								}
							}
						}
						
						else{
							var count = 0;
							for(j in res){
								if(res[j].hasOwnProperty('column') && res[j].column == '*'){
									var t = res[j].table;
									for(var k in t_aliases){
										if(t_aliases[k].alias == t){
											t = t_aliases[k].table;
										}
									}
									for(var k in db){
										if(db[k].table == t){
											count += db[k].column.length;
										}
									}
								}
								else{
									count++;
								}
							}
							
							if(count == clause_att.length){
								//console.log("Correct number of attributes");
							}
							else{
								result.bool = false;
								result.err = "Clause definition and query definition have different number of attributes";
								return;
							}
						}
						
						
						
					}
				}
			}
			
			/*
			 * checklist:
			 * 		1. with-clause
			 * 		2. query definition has compound operator (union all!)
			 * 		3. 2nd part has join
			 * 		4. 2nd part has recursive reference
			 * 		5. outer query selects with-clause
			 */
			function checkIfRecursion(o){
				$scope.withSuccess = false;
				
				//1. actual with-clause
				if(!o.hasOwnProperty("clause_name")){
					$scope.nonRecursiveReason = "No With-Clause";
					return;
				}

				//2. contains union all
				if(o.query_def.select_cores.length < 2){
					$scope.nonRecursiveReason = "No Compound-Operator (Union All)";
					return;
				}
				
				var compound = o.query_def.select_cores[1];
				if(!(compound.hasOwnProperty("compound_operator") && compound.compound_operator.trim().toLowerCase() == "union all")){
					$scope.nonRecursiveReason = "No Compound-Operator (Union All)";
					return;
				}
				
				//3. 2nd part has join
				var ref = o.query_def.select_cores[1].from;
				var join = false;
				for(var i in ref){
					if(ref[i].hasOwnProperty("join_constraint")){
						if(ref[i].join_constraint != null){
							join = true;
							break;
						}
					}
				}
				
				if(!join){
					$scope.nonRecursiveReason = "No Join in 2nd part of inner query";
					return;
				}
				
				//4. 2nd part has recursive reference
				var clause = o.clause_name;
				var recRef = false;
				for(var i in ref){
					if(ref[i].hasOwnProperty("table") && ref[i].table == clause){
						recRef = true;
						break;
					}
				}
				
				if(!recRef){
					$scope.nonRecursiveReason = "No recursive reference to With-Clause";
					return;
				}
				
				//5. outer query selects with-clause at least once
				var outerFrom = o.outer_query.select_cores[0].from;
				var withRef = false;
				for(var i in outerFrom){
					if(outerFrom[i].hasOwnProperty("table") && outerFrom[i].table == clause){
						withRef = true;
					}
				}

				if(!withRef){
					$scope.nonRecursiveReason = "Outer query does not select With-Clause";
					return;
				}
				
				
				$scope.withSuccess = true;
			}
			
			function traverse(o,func) {
			    for (var i in o) {			   
			    	func.apply(this,[i,o[i]]);
			        if (o[i] !== null && typeof(o[i])=="object") {
			            //going on step down in the object tree
			            traverse(o[i],func);
			        }
			    }
			}
			
			function traverse2(o,func,fromHelper){
				for (var i in o) {	
			    	func.apply(this,[i,o[i],fromHelper]);
			        if (o[i] !== null && typeof(o[i])=="object") {
			            //going on step down in the object tree
			            traverse2(o[i],func,fromHelper);
			        }
			    }
			}
			
			function getAliases(o) {
				for (var i in o) {
					if(o[i] == null) return;
					if(o[i].hasOwnProperty("alias")){
						aliases.push(o[i].alias);
						if(o[i].hasOwnProperty("table")){
							t_aliases.push({table:o[i].table, alias:o[i].alias});
						}
						
					}
					
			        if (o[i] !== null && typeof(o[i])=="object") {
			            //going on step down in the object tree
			            getAliases(o[i]);
			        }
			    }
			}
			
			function getFromInfo(from){
				var fromHelper = [];
				
				for(var i in from){
					var temp = {};
					temp.table = from[i].table;
					if(temp.table == clause_name){
						temp.column = clause_att;
					}
					
					if(from[i].hasOwnProperty("alias")){
						temp.alias = from[i].alias;
					}
					
					for(var j in $rootScope.dbDetails){
						if(temp.table == $rootScope.dbDetails[j].table){
							temp.column = $rootScope.dbDetails[j].column;
							break;
						}
					}
					
					fromHelper.push(temp);
				}
				
				return fromHelper;
			}
			
			function addMissingTablesHelp(key,value,fromHelper){
				if(value==null) return;
				if(value.hasOwnProperty("column") && !value.hasOwnProperty("table")){
					if(value.column == '*'){
						return;
					}
					
					var count = 0;
					var foundTables = [];
					var col = value.column;
					
					
					//search for columns
					for(var i in fromHelper){
						if(fromHelper[i].column.indexOf(col) != -1){
							if(fromHelper[i].hasOwnProperty("alias")){
								foundTables.push(fromHelper[i].alias);
							}
							else{
								foundTables.push(fromHelper[i].table);
							}
							count++;
						}
					}
					
					if(count == 0){
						//console.log("column "+col+" not found in tables");
						result.bool = false;
						if(fromHelper.length == 1){
							result.err = "Column '"+col+"' not found in table '"+fromHelper[0].table+"'";
						}
						else{
							var t = [];
							for(var i in fromHelper){
								t.push(fromHelper[i].table);
							}
							result.err = "Column '"+col+"' not found in tables "+t;
						}
						
					}
					
					if(count == 1){
						//console.log("column "+col+" found in table "+foundTables[0]);
						value.table = foundTables[0];
					}
					
					if(count > 1){
						//console.log("column "+col+" is not unique, might return wrong result");
						result.bool = false;
						var t = [];
						for(var i in fromHelper){
							t.push(fromHelper[i].table);
						}
						result.err = "Column '"+col+"' is not unique across the tables "+t+", please specify correct table";
					}
				}
			}
			
			
			
			function addMissingTables(key,value){
				if(value==null) return;
				
				if(value.hasOwnProperty("results") && value.hasOwnProperty("from")){
					//console.log("results: "+JSON.stringify(value.results)+" ||| from: "+JSON.stringify(value.from));
					var fromHelper = getFromInfo(value.from);
					traverse2(value,addMissingTablesHelp,fromHelper);
				}
			}
			
			getAliases(parsed);
			traverse(parsed,process);
			if(!result.bool) return result;
			if(parsed[0].hasOwnProperty("clause_name")){
				traverse(parsed[0].outer_query,addMissingTables);
				traverse(parsed[0].query_def,addMissingTables);
			}
			else{
				traverse(parsed,addMissingTables);
			}
			if(!result.bool) return result;
			traverse(parsed,process_with);
			if(!result.bool) return result;
			checkIfRecursion(parsed[0]);
			//console.log(result);
			return result;
		};
		
		
		$scope.submitQuery = function(){
			var sql = $scope.parsed;
			$scope.result = sql;

			$scope.$emit('execQueryEmit', [sql,$scope.withSuccess]);
		};
		
		
	});
	
	/*
	 * Controller for databases
	 */
	app.controller('dbController', function($scope, $rootScope) {
		$scope.gistParser = require('./parser/gistparser.js');
		$scope.gistParseError = false;
		$scope.gistLoadError = false;
		$scope.gistSuccess = false;
		$scope.gistSuccessWarning = false;
		$scope.gistLoadErrorMsg = "";
		$scope.gistParseErrorMsg = "";
		$scope.initLocalEmpty = false;
		$scope.localData = null;
		$scope.gistData = null;
		$rootScope.localDb = [];
		$scope.db = {};
		$scope.gistId = "";
		//$scope.gistId = "7d1871f79a8bcb4788de";
		
		$scope.finalResult = false;
		initLocalData();
		
		var startTable = 1; //flugdb
		$rootScope.selectedDb = startTable;
		$scope.db = JSON.parse(JSON.stringify($rootScope.localDb[startTable].tablesFixed));
		fixReferences($rootScope.localDb[startTable]);
		
		$scope.selectLocalDb = function(index){
			$scope.db = JSON.parse(JSON.stringify($rootScope.localDb[index].tablesFixed));
			$rootScope.selectedDb = index;
			clearResults();
			fixReferences($rootScope.localDb[index]);
			//var temp = $rootScope.editor.getValue().trim();
			//$rootScope.editor.setValue(temp);
			$rootScope.editor.setValue("");
		};
		
		//only 1 db per file
		$scope.loadGist = function(){
			$scope.gistData = [];
			$scope.gistParseError = false;
			$scope.gistLoadError = false;
			$scope.gistSuccess = false;
			$scope.gistSuccessWarning = false;
			$scope.gistLoadErrorMsg = "";
			$scope.gistParseErrorMsg = "";
			$('.dataAlert').show();
			
			//var id = '7d1871f79a8bcb4788de';
			var id = $scope.gistId;
			jQuery.ajax({
				url: 'https://api.github.com/gists/' + id,
				crossDomain: true,
				async: true
			}).done(function( data ) {
				$scope.gistId = "";
				var gistdb = [];
				var gistInfo = {};
				
				gistInfo["url"] = data.html_url;
				gistInfo["updated"] = data.updated_at;
				if(data.hasOwnProperty("owner")){
					gistInfo["owner"] = data.owner.login;
					gistInfo["owner_url"] = data.owner.html_url;
				}
				
				for(i in data.files){
					gistdb.push(data.files[i].content);
				}
				
				try{
					$scope.gistData = $scope.gistParser.parse(gistdb[0]);
					if($scope.gistData[0].desc != null){
						$scope.gistData[0].descHtml = $rootScope.converter.makeHtml($scope.gistData[0].desc);
					}
					//console.log(JSON.stringify($scope.gistData));
					addGistToDatabase($scope.gistData, gistInfo);
					$scope.selectLocalDb($rootScope.localDb.length-1);

					if($scope.gistData[0].wrongType){
						$scope.gistSuccessWarning = true;
					}
					else{
						$scope.gistSuccess = true;
					}
					
					$scope.$apply();
				}catch(e){
					$scope.gistParseError = true;
					$scope.gistParseErrorMsg = "Error parsing gist: "+e.message+" (Line "+e.location.start.line+", Column "+e.location.start.column+")";
					$scope.$apply();
				}
				
				
				
			}).fail(function (){
				$scope.gistId = "";
				$scope.gistLoadError = true;
				$scope.gistLoadErrorMsg = "Error loading gist - check JavaScript console for more information";
				$scope.$apply();
			});
			
			
		};
		
		function initLocalData(){
			$rootScope.localDb = [];
			loadLocalData();
			if($scope.localData == null){
				$scope.initLocalEmpty = true;
				return;
			}
			
			addToDatabase($scope.localData);
			
		}
		
		function addGistToDatabase(newDb, gistInfo){
			addToDatabase(newDb);
			$rootScope.localDb[$rootScope.localDb.length-1].gistInfo = gistInfo;
		}
		
		function addToDatabase(newDb){
			for(var i in newDb){
				var db = {};
				db.id = i;
				db.group = newDb[i].group;
				db.desc = newDb[i].desc;
				db.example = newDb[i].example
				db.tables = [];
				db.header = [];
				db.data = [];
				db.tablesFixed = {};
				
				if(newDb[i].hasOwnProperty("descHtml")){
					db.descHtml = newDb[i].descHtml;
				}
				
				for(var j in newDb[i].table){
					db.tables.push(newDb[i].table[j].name);
					db.header.push(newDb[i].table[j].header);
					db.data.push(newDb[i].table[j].data);
				}
				
				
				for(var j in db.tables){
						var cur = db.tablesFixed[db.tables[j]] = [];
						for(var k in db.data[j]){
							var temp = {};
							for(var l in db.header[j]){
								temp[db.header[j][l].name] = db.data[j][k][l];
							}
							cur.push(temp);
						}
				}

				$rootScope.localDb.push(db);
			}
		}
		
		function loadLocalData(){
			$.ajaxSetup({async: false});
			$.get('data/local_data.txt', function(data) {
				try{
					$scope.localData = $scope.gistParser.parse(data);
					for(var i in $scope.localData){
						if($scope.localData[i].desc != null){
							$scope.localData[i].descHtml = $rootScope.converter.makeHtml($scope.localData[i].desc);
						}
					}
					
				}catch(e){
					console.log(e);
					console.log("Error loading local data: "+e);
				}
			});
		}
		
		function clearResults(){
			$rootScope.dbDetails = [];
			$rootScope.finalHeader = [];
			$rootScope.finalData = {};
			$rootScope.fullData = [];
			$rootScope.recRows = [];
			$rootScope.cumulatedRows = 0;
			$rootScope.finalEmpty = "";
		}
		
		function fixReferences(db){	
			//$scope.tables = Object.keys(db);
			$scope.tables = db.tables;
			$scope.columns = db.header;
			
			/*
			$scope.columns = [];
			for(var i in $scope.tables){
				$scope.columns.push(Object.keys(db[$scope.tables[i]][0]));
			}
			*/
		
			
			//transforms json data into a more "practical" array for printing with angular
			/*
			 * 'printable' array has the following parts:
			 * 		printable.head contains name of all tables
			 * 		printable.col contains name of all columns for each table
			 * 		printable.data contains data of each table
			 */
			
			
			$scope.printable = [];
			for(var i in $scope.tables){
				var obj = {};
				obj.head = $scope.tables[i];
				obj.col = $scope.columns[i];
				var data = [];
				for(var j in db.tablesFixed[$scope.tables[i]]){
					var row = [];
					for( var k in $scope.columns[i]){
						row[k] = $scope.db[$scope.tables[i]][j][$scope.columns[i][k].name]
						//console.log($scope.db[$scope.tables[i]][j][$scope.columns[i][k].name]);
					}
					data.push(row);
				};
			
				obj.data = data;
				
				$scope.printable.push(obj);
			};
		  
			
			
			
		
			var details = [];
				
			for(var i in $scope.tables){
				var obj = {};
				obj.table = $scope.tables[i];
				obj.column = [];
				for(var j in $scope.columns[i]){
					obj.column.push($scope.columns[i][j].name);
				}
				details.push(obj);
			};
			
			
			$rootScope.dbDetails = details;
		}
		
		
		
		
		$scope.nextStep = function(){
			$scope.removeStyle();

			//init
			if($rootScope.stepCount == 0 && $rootScope.formatCount == 0){
				$rootScope.stepCount += 1;
				$scope.highlightInit();
				$rootScope.formatCount += 1;
				$rootScope.cumulatedRows = $rootScope.recRows[0];
				$('html, body').stop().animate({
					scrollTop: $(document).height()
				}, $rootScope.scrollSpeed);
				return;
			}
			
			//no join partner
			if($rootScope.stepCount == $rootScope.fullData.length && $rootScope.formatCount == 2*$rootScope.stepCount){
				$rootScope.stepCount += 1;
				$rootScope.formatCount += 1;
				$rootScope.cumulatedRows = $rootScope.recRows[0]+$rootScope.recRows[$rootScope.stepCount-2];
				return;
			}
			
			
			//highlight new results
			if($rootScope.formatCount%2 == 0){
				$rootScope.stepCount += 1;
				$scope.highlightNew();
				$rootScope.formatCount += 1;
				$rootScope.cumulatedRows = $rootScope.recRows[0]+$rootScope.recRows[$rootScope.stepCount-1];
				$('html, body').stop().animate({
					scrollTop: $(document).height()
				}, $rootScope.scrollSpeed);
			}
			
			//highlight join
			else{
				$rootScope.formatCount += 1;
				$scope.highlightJoin();
				$('html, body').stop().animate({
					scrollTop: $(document).height()
				}, $rootScope.scrollSpeed);
			}
			
		};
		
		$scope.previousStep = function(){
			$scope.removeStyle();

			if($rootScope.stepCount == 1 && $rootScope.formatCount == 2){
				$scope.highlightInit();
				$rootScope.formatCount -= 1;
				$rootScope.cumulatedRows = $rootScope.recRows[0];
				return;
			}
			
			
			
			if($rootScope.stepCount == 1 && $rootScope.formatCount == 1){
				$rootScope.stepCount = $rootScope.formatCount = 0;
				$scope.removeStyle();
				$rootScope.cumulatedRows = 0;
				return;
			}
			
			if($rootScope.formatCount%2 == 1){
				$rootScope.stepCount -= 1;
				$scope.highlightJoin();
				$rootScope.formatCount -= 1;
				if($rootScope.stepCount == 1){
					$rootScope.cumulatedRows = $rootScope.recRows[0];
				}
				else{
					$rootScope.cumulatedRows = $rootScope.recRows[0]+$rootScope.recRows[$rootScope.stepCount-1];
				}
			}
			else{
				$rootScope.formatCount -= 1;
				if($rootScope.stepCount == $rootScope.fullData.length+1){
					return;
				}
				$scope.highlightNew();
			}
			
		};
		
		$scope.showFullResult = function(){
			$scope.removeStyle();
			$rootScope.stepCount = $rootScope.fullData.length+1;
			$rootScope.formatCount = ($rootScope.fullData.length+1)*2;
			$rootScope.cumulatedRows = $rootScope.recRows[0]+$rootScope.recRows[$rootScope.stepCount-2];
			$("#outerQuery").addClass('text-success');
			$("#outerQuery").addClass('alert-success');
			$("#outerQuery").css('font-weight','bold');
			 setTimeout(function(){ $('html, body').stop().animate({
					scrollTop: $("#final-solution").offset().top
				}, $rootScope.scrollSpeed); });
			
		};
		
		$scope.highlightJoin = function(){
			$("#thRec"+$rootScope.formatInfo.columnRecIndex).addClass('info');
			$(".tdRec"+$rootScope.formatInfo.columnRecIndex).addClass('info');
			$("#thJoin"+$rootScope.formatInfo.columnJoinIndex).addClass('info');
			$(".tdJoin"+$rootScope.formatInfo.columnJoinIndex).addClass('info');
			$("#innerRec").addClass('text-info');
			$("#innerRec").addClass('alert-info');
			$("#innerRec").css('font-weight','bold');
		}
		
		$scope.highlightInit = function(){
			$("#innerInit").addClass('text-success');
			$("#innerInit").addClass('alert-success');
			$("#innerInit").css('font-weight','bold');
			$("#step"+($rootScope.stepCount-1)+">tr").addClass('success');
		};
		
		$scope.highlightNew = function(){
			$("#step"+($rootScope.stepCount-1)+">tr").addClass('success');
			$("#innerUnion").addClass('text-success');
			$("#innerUnion").addClass('alert-success');
			$("#innerUnion").css('font-weight','bold');
		};
		
		$scope.removeStyle = function(){
			$("#step"+($rootScope.stepCount-1)+">tr").removeClass('success');
			$("#thRec"+$rootScope.formatInfo.columnRecIndex).removeClass('info');
			$(".tdRec"+$rootScope.formatInfo.columnRecIndex).removeClass('info');
			$("#thJoin"+$rootScope.formatInfo.columnJoinIndex).removeClass('info');
			$(".tdJoin"+$rootScope.formatInfo.columnJoinIndex).removeClass('info');
			$("#innerInit").removeClass('text-success');
			$("#innerInit").removeClass('alert-success');
			$("#innerInit").css('font-weight','normal');
			$("#innerRec").removeClass('text-info');
			$("#innerRec").removeClass('alert-info');
			$("#innerRec").css('font-weight','normal');
			$("#innerUnion").removeClass('text-success');
			$("#innerUnion").removeClass('alert-success');
			$("#innerUnion").css('font-weight','normal');
			$("#outerQuery").removeClass('text-success');
			$("#outerQuery").removeClass('alert-success');
			$("#outerQuery").css('font-weight','normal');
		};
		
		
		$scope.$on('execQueryBroadcast', function(event, data) {
			console.log("received in dbCtrl:"+JSON.stringify(data));
			var query = "";
			var withSuccess = data[1];
			var args = data[0];
			$rootScope.withStep = false;
			$scope.removeStyle();
			
			
			//indicates with-clause
			if(args[0].hasOwnProperty("clause_name")){
				var clause = args[0]["clause_name"];
				var att = args[0]["clause_att"];
				query = args[0]["query_def"];
				var outer = args[0]["outer_query"];
				
				if(Object.keys($scope.db).indexOf(clause) >= 0 ){
					delete $scope.db[clause];
					//console.log("RECREL\n"+JSON.stringify($scope.db));
				}
				
				
				query = addWithAlias(query, att);
				
				if(withSuccess){ //recursive
					$('html, body').stop().animate({
						scrollTop: $(document).height()
					}, 1000);
					$rootScope.header = [];
					$rootScope.initData = [];
					$rootScope.initEmpty = false;
					$rootScope.stepData = [];
					$rootScope.fullData = [];
					$rootScope.currentStep = 0;
					$rootScope.fullResult = false;
					$rootScope.maxStep = 0;
					$rootScope.stepCount = 0;
					$rootScope.formatCount = 0;
					$rootScope.formatInfo = {};
					$rootScope.innerQuery = "";
					$rootScope.outerQuery = "";
					$rootScope.innerInit = "";
					$rootScope.innerRec = "";
					$rootScope.innerUnion = "";
					$rootScope.recRows = [];
					$rootScope.cumulatedRows = 0;
					$rootScope.stepLimit = false;
					
					//extract query strings from editor
					var q = $rootScope.editorValue.slice();
					var lparen = rparen = 0;
					var innerStart = innerEnd = outerStart = 0;
					
					
					innerStart = q.indexOf(('('),q.indexOf('(')+1); //2nd occurrence of '(' marks start of inner query

					//count brackets until you find enough lparens to close the entire inner query
					for(var i = innerStart; i < q.length; i++){
						if(q[i] == '('){
							lparen++;
						}
						if(q[i] == ')'){
							rparen++;
						}
						
						if(lparen == rparen){
							innerEnd = i;
							break;
						}
					}
					
					outerStart = innerEnd+1;
					$rootScope.innerQuery = q.slice(innerStart+1,innerEnd);
					$rootScope.outerQuery = q.slice(outerStart).trim();
					
					//split the inner query into init, rec and union
					var initEnd = $rootScope.innerQuery.search(new RegExp("union all", "i"));
					$rootScope.innerInit = $rootScope.innerQuery.slice(0,initEnd).trim();
					$rootScope.innerRec = $rootScope.innerQuery.slice(initEnd+("union all".length)).trim();
					$rootScope.innerUnion = $rootScope.innerQuery.slice(initEnd,initEnd+("union all".length)).trim();
					
					//replace '\n' with '<br>' to keep the linebreaks
					$rootScope.innerInit = $rootScope.innerInit.replace(new RegExp('[' + '\n' + ']', 'g'), '<br>');
					$rootScope.innerRec = $rootScope.innerRec.replace(new RegExp('[' + '\n' + ']', 'g'), '<br>');
					$rootScope.Union = $rootScope.innerUnion.replace(new RegExp('[' + '\n' + ']', 'g'), '<br>');
					$rootScope.outerQuery = $rootScope.outerQuery.replace(new RegExp('[' + '\n' + ']', 'g'), '<br>');
					
					//remove first linebreaks (if there are any) as they are not needed
					if($rootScope.innerInit.slice(0,4) == "<br>"){
						$rootScope.innerInit = $rootScope.innerInit.slice(4);
					}
					if($rootScope.innerRec.slice(0,4) == "<br>"){
						$rootScope.innerRec = $rootScope.innerRec.slice(4);
					}
					if($rootScope.innerUnion.slice(0,4) == "<br>"){
						$rootScope.innerUnion = $rootScope.innerUnion.slice(4);
					}
					
					
					$rootScope.withStep = true; //starts step-by-step solution
					
					//1: init step, so its result is already available
					var init = JSON.parse(JSON.stringify(query)); //copy
					var sc = query.select_cores.slice();
					init.select_cores = [sc[0]];
					//console.log("INIT\n"+JSON.stringify(init));
					
					var initQuery = $scope.processSql([init]);
					//console.log("INITQUERY\n"+JSON.stringify(initQuery));
					
					var initResult = SQLike.q(initQuery);
					
					if(initResult.length == 0){
						$rootScope.initEmpty = true;
						$rootScope.recRows.push(0);
						result = {};
						return;
					}
					else{
						$scope.db[clause] = initResult;
						$rootScope.header = Object.keys(initResult[0]);
						$rootScope.initData = initResult;
						$rootScope.fullData.push(initResult);
						$rootScope.recRows.push($rootScope.initData.length);
					}
					
					
					
					//2. some preparations for step-case
					var step = JSON.parse(JSON.stringify(query));
					delete sc[1].compound_operator;
					step.select_cores = [sc[1]];
					step = addWithAlias(step, att);
					
					//console.log("INIT\n"+JSON.stringify(initResult));
					
					var stepQuery, stepResult, unionResult, stepSize = 0;

					//3. actual loop for 'recursion'
					for(var i = 1; i <= $rootScope.recSteps; i++){
						if(i == $rootScope.recSteps){
							$rootScope.stepLimit = true;
						}
						
						stepQuery = $scope.processSql([step]);
						stepResult = SQLike.q(stepQuery);

						//checks if the last step added something to the result
						if(stepSize == stepResult.length){
							$rootScope.maxStep = stepSize;
							//console.log("NO CHANGE AT STEP "+i);
							break;
						}
						//stores the rows added to the result (for step-by-step solution)
						var temp = [];
						for(var j = stepSize; j < stepResult.length; j++){
							temp.push(stepResult[j]);
						}
						$rootScope.stepData.push(temp);
						$rootScope.fullData.push(temp);
						stepSize = stepResult.length;
						$rootScope.recRows.push(stepSize);
						unionResult = SQLike.q({UnionAll: [initQuery,stepQuery]});
						$scope.db[clause] = unionResult;
					//	console.log("STEPQUERY\n"+JSON.stringify(stepQuery));
					//	console.log("STEP"+i+"\n"+JSON.stringify(stepResult));
					//	console.log("UNIONRESULT"+i+"\n"+JSON.stringify($scope.db[clause]));
					}
					//console.log("STEPDATA\n"+JSON.stringify($rootScope.stepData));
				}
				
				else{//non-recursive with
					var withQuery = $scope.processSql([query]);
					var withResult = SQLike.q(withQuery);
					$scope.db[clause] = withResult;
				}
				
				query = $scope.processSql([outer]);
				
				//get format information for step-by-step solution
				/*
				 *	name of table.column of recursive join (just to write down)
				 *	column index of above columns in respective table (highlighting)
				 *	join constraint and operator (just in case)
				 */
				if(withSuccess){
					var j1 = step.select_cores[0].from[0];
					var j2 = step.select_cores[0].from[1];
					
					var t1 = t1a = t2 = t2a = "";
					if(j1.table == clause){ //t1 is the recursive table
						t1 = j1.table;
						t2 = j2.table;
						if(j1.hasOwnProperty("alias")){
							t1a = j1.alias;
						}
						if(j2.hasOwnProperty("alias")){
							t2a = j2.alias;
						}
					}
					else{
						t1 = j2.table;
						t2 = j1.table;
						if(j1.hasOwnProperty("alias")){
							t2a = j1.alias;
						}
						if(j2.hasOwnProperty("alias")){
							t1a = j2.alias;
						}
					}
					
					var jc = j2.join_constraint;
					var c1 = c2 = op = constraint = "";
					if(jc.length == 2){//ON
						var joinc;
						if(jc[1].length == 3){//without brackets
							joinc = jc[1];
						}
						else{ //with brackets
							joinc = jc[1][2];
						}
						
						op = joinc[1];
						
						if(joinc[0].table === t1 || joinc[0].table === t1a){
							c1 = joinc[0].column;
							c2 = joinc[2].column;
						}
						else{
							c1 = joinc[2].column;
							c2 = joinc[0].column;
						}
						
						constraint = "ON";
					}
					
					else{//USING
						c1 = c2 = jc[3][1];
						op = "=";
						constraint = "USING";
					}
					
					
					$rootScope.formatInfo.tableRec = $scope.db[t1];
					$rootScope.formatInfo.tableRecName = t1;
					$rootScope.formatInfo.tableRecA = t1a;
					$rootScope.formatInfo.columnRec = c1;
					$rootScope.formatInfo.tableJoin = $scope.db[t2];
					$rootScope.formatInfo.tableJoinName = t2;
					$rootScope.formatInfo.tableJoinA = t2a;
					$rootScope.formatInfo.columnJoin = c2;
					$rootScope.formatInfo.constraint = constraint;
					$rootScope.formatInfo.op = op;
					$rootScope.formatInfo.columnRecIndex = Object.keys($scope.db[t1][0]).indexOf(c1);
					$rootScope.formatInfo.columnJoinIndex = Object.keys($scope.db[t2][0]).indexOf(c2);
				}
			}
			
			else{ //normal select
				query = $scope.processSql(args);
				$('html, body').stop().animate({
					scrollTop: $("#final-solution").offset().top
				}, $rootScope.scrollSpeed);
			}
			
			/* some test queries
			query = {};
			query.Select = ['f_abflug', function(){return this.f_ankunft;}, '|as|', 'destination', 'f_id'];
			query.From = {};
			query.From['f'] = $scope.db['flug'];
			query.Where = function(){return this.f.id>3;};
			*/
			/*
			
			query1 = {};
			query1.Select = ['abflug', '|count|', 'abflug', '|sum|', 'id'];
			query1.From = $scope.db['flug'];
			query1.Where = function(){return true;}; 
			query1.GroupBy = ['abflug'];
			query1.Having = function(){return this.count_abflug > 1;};
			
			query2 = {};
			query2.Select = ['flug_abflug', '|count|', 'flug_abflug', '|sum|', 'flug_id'	];
			query2.From = {};
			query2.From['flug'] = $scope.db['flug'];
			query2.Where = function(){return true;};
			query2.GroupBy = ['flug_abflug'];
			query2.Having = function(){return this.count_flug_abflug > 1;};
			
			*/
			/*
			query4 = {};
			query4.Select = ["hallo",'flug_abflug'];
			query4.From = {};
			query4.From['flug'] = $scope.db['flug'];
			query4.Where = function(){return true;};
			
			*/
			/*
			query5 = {};
			query5.Select = [function(){return this.abflug+" "+this.ankunft},'|as|','name'];
       		query5.From = {};
       		query5.From = $scope.db['flug'];
       
			query = query5;
			*/
			/*
			query6 = {};
			query6.Select = ['*'];
			query6.From = {};
			query6.From['flug'] = $scope.db['flug'];
			query6.Join = {};
			query6.Join['f1'] = $scope.db['flug'];
			query6.Join['fh'] = $scope.db['flughafen'];
			query6.Using = ['id'];
			query6.On = function(){return this.fh.iata == this.flug.abflug;};
			query = query6;
			*/
			
			
			//alert("final query: \n\n"+JSON.stringify(query));
			console.log('%c final query: %c'+JSON.stringify(query),'color: green; background: orange', 'color:green');
			var result = SQLike.q(query);
			//alert("final result: \n\n"+JSON.stringify(result));
			console.log('%c final result: %c'+JSON.stringify(result), 'color: green; background: orange', 'color:green');
			
			
			
			if(result.length == 0){
				$rootScope.finalEmpty = true;
			}
			else{
				$rootScope.finalEmpty = false;
				$rootScope.finalHeader = Object.keys(result[0]);
				$rootScope.finalData = result;
			}
			
		});
		
		//adds alias to columns to match clause-definition
		function addWithAlias(query, att){
			var select = query.select_cores[0].results;
			
			
			//special case 'select * from xy'
			if(select.length == 1 && select[0].hasOwnProperty("column") && select[0].column == '*'){
				select.shift(); //remove 'select *'
				
				var tab = query.select_cores[0].from[0].table;
				var aliasTable = "";
				if(query.select_cores[0].from[0].hasOwnProperty("alias")){
					aliasTable = query.select_cores[0].from[0].alias;
				}
				else{
					aliasTable = tab;
				}

				var count = 0;
				for(var i in $scope.db[tab][0]){
					var col = {};
					col.table = aliasTable;
					col.column = i;
					col.alias = att[count];
					select.push(col);
					count++;
				}
			}

			
			//simple case with every column listed or table.*
			else{
				var count = 0;
				for(var i in select){
					if(select[i].hasOwnProperty("column") && select[i].column == '*'){
						if(select[i].hasOwnProperty("table")){
							var tab = select[i].table;
							select.splice(i,1);
							for(var j in $scope.db[tab][0]){
								var col = {};
								col.table = tab;
								col.column = j;
								col.alias = att[count];
								select.push(col);
								count++;
							}
						}
						
					}
					else{
						select[i].alias = att[i];
						count++;
					}
					
				}
			}
			return query;
		}
		
		
		/*
		 * https://msdn.microsoft.com/en-us/library/ms189499.aspx
		 * Logical Processing Order of the SELECT statement
		 * 1. FROM
		 * 2. ON
		 * 3. JOIN
		 * 4. WHERE
		 * 5. GROUP BY
		 * 6. WITH CUBE or WITH ROLLUP
		 * 7. HAVING
		 * 8. SELECT
		 * 9. DISTINCT
		 * 10. ORDER BY
		 * 11. TOP
		 * 
		 */
		$scope.processSql = function(sql){
			var db = $scope.db;
			//console.log("\n\n");
			//console.log(JSON.stringify(db));
			//console.log("\n\n");
			//console.log("PROCESS\n"+JSON.stringify(sql));
			//compound operator
			if(sql[0]['select_cores'].length > 1){
				var compoundTables = [];
				
				for(var j in sql[0]['select_cores']){
					var singleSQL = JSON.parse(JSON.stringify(sql)); //copy original object, avoid referencing it
					
					singleSQL[0]['select_cores'] = [];
					singleSQL[0]['select_cores'].push(sql[0]['select_cores'][j]);
					
					compoundTables.push($scope.processSql(singleSQL));
					
					if(singleSQL[0]['select_cores'][0].hasOwnProperty('compound_operator')){
						compoundTables.push(singleSQL[0]['select_cores'][0]['compound_operator']);
					}
				}
				
				var first = compoundTables.shift();
				var query = compoundQuery(first,compoundTables);
				return query;
				
			}
			
			//SFW-statement from parser
			var dbselect = sql[0]['select_cores'][0];
			var keys = Object.keys(sql[0]['select_cores'][0]);
			
			//other keywords for query
			var dbkeys = Object.keys(sql[0]);
			
			//console.log("keys: "+keys);
			//console.log("dbkeys: "+dbkeys);
			//console.log(JSON.stringify(sql[0]['select_cores']));
			/*
			var query = {
					Select: ['*'],
					From: db['flug'],
					Where: function(){return this.abflug=="VIE";}
			};
			*/
			
			return querySQL(db,dbselect,keys,dbkeys,sql);
			
			
		};
		
		function compoundQuery(first,q){
			if(q.length == 0){
				return first;
			}
			
			if(typeof q[1] === 'string' || q[1] instanceof String){
				var compoundOp = getCompoundOp(q[1]);
				var query = {};
				query[compoundOp] = [];
				query[compoundOp].push(first);
				query[compoundOp].push(q[0]);
//				var query = {Union:[
//				                    {Select:['*'],
//				                    	From:$scope.db['flug'],
//				                    	Where:function(){return this.id==5;}},
//				                    {Union:[{Select:['*'],
//				                    		From:$scope.db['flug'],
//				                    		Where:function(){return this.id==3;}},
//				                    		{Select:['*'],
//				                    		From:$scope.db['flug'],
//				                    		Where:function(){return this.id==4;}}]}]};
				
				q.splice(0,2); //remove first 2 elements of query to continue

				return compoundQuery(query,q);
			}	
			
		}
		
		//returns correct name for query
		function getCompoundOp(op){
			switch(op.toLowerCase().trim()){
			case "union":
				return "Union";
				break;
				
			case "union all":
				return "UnionAll";
				break;
				
			case "intersect":
				return "Intersect";
				break;
				
			case "intersect all":
				return "IntersectAll";
				break;
				
			case "except":
				return "Except";
				break;
				
			case "except all":
				return "ExceptAll";
				break;
			
			};
		};
		
		function querySQL(db,dbselect,keys,dbkeys,sql){
			
			var query = {};
			var whereFuncArr = [];
			
			
			//go through keywords and process them
			for(var i in keys){
				switch(keys[i]){
				case "results":
					var col = [];
					var c = "";
					for(var j in dbselect[keys[i]]){
						//how does that even happen??
						if(dbselect[keys[i]].length < j){
							break;
						}
//						if(dbselect[keys[i]][j]['column'] == '*'){
//							console.log("column: "+dbselect[keys[i]][j]['column']);
//							col.push(dbselect[keys[i]][j]['column']);
//							continue;
//						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("func")){
							var f = dbselect[keys[i]][j].func.toLowerCase();
							var att = dbselect[keys[i]][j].att;
							
							for(var k in att){
								if(att[k] != null && att[k] instanceof Object){
									if(att[k].hasOwnProperty("table")){
										var temp = att[k].table+"_"+att[k].column;
										att[k] = temp;
									}
									else{
										var temp = att[k].column;
										att[k] = temp;
									}
									
								}
							}

							col.push('|'+f+'|');
							col.push(att);
							
							if(dbselect[keys[i]][j].hasOwnProperty("alias")){
								var a = dbselect[keys[i]][j].alias;
								col.push('|as|');
								col.push(a);
							}
						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("numeric")){
							var n = flatten(dbselect[keys[i]][j].numeric);
							
							for(var k in n){
								if(n[k] == null){
									n.splice(k,1);
								}
								if(n[k] != null && n[k] instanceof Object){
									if(n[k].hasOwnProperty("table")){
										var temp = n[k].table+"_"+n[k].column;
										n[k] = temp;
									}
									else{
										var temp = n[k].column;
										n[k] = temp;
									}
									
								}
								
							}
							
							col.push('|calc|');
							col.push(n);
							
							if(dbselect[keys[i]][j].hasOwnProperty("alias")){
								var a = dbselect[keys[i]][j].alias;
								col.push('|as|');
								col.push(a);
							}
						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("string")){
							var s = dbselect[keys[i]][j].string;
							col.push('|concat|');
							col.push([s]);
							
							if(dbselect[keys[i]][j].hasOwnProperty("alias")){
								var a = dbselect[keys[i]][j].alias;
								col.push('|as|');
								col.push(a);
							}
						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("column")){
							c = dbselect[keys[i]][j].column;

						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("agg")){
							var agg = dbselect[keys[i]][j].agg.toLowerCase();
							col.push('|'+agg+'|');
						}
						
						if(dbselect[keys[i]][j].hasOwnProperty("table")){
							var t = dbselect[keys[i]][j].table;
							var realTable = t;
							
							if(c == '*'){
								//console.log(JSON.stringify(dbselect.from));
								for(var i in dbselect.from){
									if(dbselect.from[i].hasOwnProperty("alias") && dbselect.from[i].alias == t){
										t = dbselect.from[i].table;
									}
								}
								
								cols = Object.keys(db[t][0]); //get all columns of specific table
								for(var k in cols){
									col.push(realTable+"_"+cols[k]);
								}
								continue;
							}
							
							else{
								col.push(t+"_"+c);
							}
							
							if(dbselect[keys[i]][j].hasOwnProperty("alias")){
								var a = dbselect[keys[i]][j].alias;
								col.push('|as|');
								col.push(a);
							}
						}
						if(dbselect[keys[i]][j].hasOwnProperty("column") && !dbselect[keys[i]][j].hasOwnProperty("table")){
							col.push(c);
							if(dbselect[keys[i]][j].hasOwnProperty("alias")){
								var a = dbselect[keys[i]][j].alias;
								col.push('|as|');
								col.push(a);
							}
						}
					}
				
					
					//console.log(col);
					
					if(keys[i*1+1] == "distinct"){//casting i to int before
						query.SelectDistinct = col;
					}
					else{
						query.Select = col;
					}
					
					//i'm not sure why this is necessary, but it works...
					if(keys.indexOf("where") == -1){
						query.Where = new Function("return true;");
					}
					
					break;
				
				
				case "from":
					var dbfrom = dbselect[keys[i]].slice(); //copy of array, no reference
					var t1 = db[dbfrom[0]['table']];
					var t1Name = dbfrom[0]['table'];
					var t1Alias = "";
					
					//just replace with alias-table
					if(dbselect[keys[i]][0].hasOwnProperty("alias")){
						t1Alias = dbselect[keys[i]][0].alias;
						db[t1Alias] = db[t1Name];
						t1 = db[t1Alias];
						t1Name = t1Alias;
					}
					
					//single table
					if(dbselect[keys[i]].length == 1){
						query.From = {};
						query.From[t1Name] = t1;
					}
					
					//multiple tables (join)
					else{
						dbfrom.shift(); //remove first element (saved in var t1)
						//console.log(JSON.stringify(dbfrom));
						
						var t2 = "";
						var t2Name = "";
						var t2Alias = "";
						var joinop = "";
						
						var joinWhere = [];
						
						var tempResult = [];
						var tempQuery = {};
					
						query.From = {};
						query.From[t1Name] = t1;

						
						//process first join
						var joinC = dbfrom[0]['join_constraint'];
						t2 = db[dbfrom[0]['table']];
						t2Name = dbfrom[0]['table'];
						joinop = dbfrom[0]['join_op'];
						
						//just replace with alias-table
						if(dbfrom[0].hasOwnProperty("alias")){
							t2Alias = dbfrom[0].alias;
							db[t2Alias] = db[t2Name];
							t2 = db[t2Alias];
							t2Name = t2Alias;
						}
						
						
						//join implicit (where condition), natural join
						if(joinC == null){
							query = getJoin(joinop,query,t2,t2Name);
							
							//apparently sqlike cant process multiple tables without a where
							//...or i'm just unable to make it work
							if(keys.indexOf("where") == -1){
								query.Where = new Function("return true;");
							}
						}
						
						//join with using
						else if(joinC[0][1].trim().toLowerCase() == "using"){
							var use = fixJoinParse(joinC[3]);
							query = getJoin(joinop,query,t2,t2Name);
							query.Using = use;
						}
						
						//join with on
						else if(joinC[0][1].trim().toLowerCase() == "on"){
							if(joinC[1].length == 3){//without brackets
								/* version with real 'on' in sqlike */
								//console.log("join on: "+JSON.stringify(joinC[1]));
								var onFunc = buildSQLWhereFunction(joinC[1],"");
								query = getJoin(joinop,query,t2,t2Name);
								query.On = new Function("return "+onFunc);

								/*
								//workaround to use 'on' as implicit join
								var onFunc = buildSQLWhereFunction(joinC[1],"");
								query = getJoin("JOIN",query,t2,t2Name);
								whereFuncArr.push(onFunc);
								*/
							}
							else if(joinC[1].length == 5){//with brackets
								
								//console.log("join on: "+JSON.stringify(joinC[1][2]));
								var onFunc = buildSQLWhereFunction(joinC[1][2],"");
								query = getJoin(joinop,query,t2,t2Name);
								query.On = new Function("return "+onFunc);
								
								
								/*
								//workaround to use 'on' as implicit join
								var onFunc = buildSQLWhereFunction(joinC[1][2],"");
								query = getJoin("JOIN",query,t2,t2Name);
								whereFuncArr.push(onFunc);
								*/
							}
							else{
								console.log("join on error");
							}
						}
						
						
						//process remaining joins (if necessary)
						if(dbfrom.length > 1){
							//console.log("QUERY\n"+JSON.stringify(query));
							tempQuery.Select = ['*'];
							tempQuery.From = query.From;
							tempQuery.Where = new Function("return true");
							
							if(query.hasOwnProperty("Join")){
								tempQuery.Join = query.Join;
							}
							if(query.hasOwnProperty("On")){
								tempQuery.On = query.On;
							}
							if(query.hasOwnProperty("Using")){
								tempQuery.Using = query.Using;
							}
							if(query.hasOwnProperty("NaturalJoin")){
								tempQuery.NaturalJoin = query.NaturalJoin;
							}
							if(query.hasOwnProperty("LeftJoin")){
								tempQuery.LeftJoin = query.LeftJoin;
							}
							if(query.hasOwnProperty("RightJoin")){
								tempQuery.RightJoin = query.RightJoin;
							}
							if(query.hasOwnProperty("FullJoin")){
								tempQuery.FullJoin = query.FullJoin;
							}
							if(query.hasOwnProperty("CrossJoin")){
								tempQuery.CrossJoin = query.CrossJoin;
							}
																
							var tempResult = SQLike.q(tempQuery);
							//console.log("TEMP0\n"+JSON.stringify(tempResult));
								
							for(var i = 1; i < dbfrom.length; i++){
								var jp = dbfrom[i].table;
								if(dbfrom[i].hasOwnProperty("alias")){
									jp = dbfrom[i].alias;
								}
								
								tempQuery = {};
								tempQuery.Select = ['*'];
								tempQuery.From = {};
								tempQuery.From["ätemp"] = tempResult;
								tempQuery.Where = new Function("return true");
								
								tempResult = [];
								
								var joinC = dbfrom[i]['join_constraint'];
								
								t2 = db[dbfrom[i]['table']];
								t2Name = dbfrom[i]['table'];
								joinop = dbfrom[i]['join_op'];
								
								//just replace with alias-table
								if(dbfrom[i].hasOwnProperty("alias")){
									t2Alias = dbfrom[i].alias;
									db[t2Alias] = db[t2Name];
									t2 = db[t2Alias];
									t2Name = t2Alias;
								}
								
								//join implicit (where condition), natural join
								if(joinC == null){
									tempQuery = getJoin(joinop,query,t2,t2Name);
								}
								
								//join with using
								else if(joinC[0][1].trim().toLowerCase() == "using"){
									var use = fixJoinParse(joinC[3]);
								//	console.log("JOINC\n"+JSON.stringify(joinC));
									tempQuery = getJoin(joinop,tempQuery,t2,t2Name);
									tempQuery.Using = use;
								}
								
								//join with on
								else if(joinC[0][1].trim().toLowerCase() == "on"){
									if(joinC[1].length == 3){//without brackets
										joinC[1] = fixMultiJoinConstraint(joinC[1],jp);
										var onFunc = buildSQLWhereFunction(joinC[1],"");
										tempQuery = getJoin(joinop,tempQuery,t2,t2Name);
										tempQuery.On = new Function("return "+onFunc);
									}
									else if(joinC[1].length == 5){//with brackets
										joinC[1][2] = fixMultiJoinConstraint(joinC[1][2],jp);
										var onFunc = buildSQLWhereFunction(joinC[1][2],"");
										tempQuery = getJoin(joinop,tempQuery,t2,t2Name);
										tempQuery.On = new Function("return "+onFunc);
									}
								}
								
								//console.log("TEMPQUERY\n"+JSON.stringify(tempQuery));
								tempResult = SQLike.q(tempQuery);
								//console.log("TEMP"+i+"\n"+JSON.stringify(tempResult));
							}
							
							
							//clean up the mess...remove ätemp-prefix
							if(tempResult.length > 0){
								var keys = Object.keys(tempResult[0]);
								var keysFixed = [];
								for(var i in keys){
									keysFixed.push(keys[i].replace(/^(ätemp_)*/, ''));
								}

								var o = JSON.parse(JSON.stringify(tempResult));
								var tempResult = [];
								for(var i in o){
									var obj = {};
									for(var j in keysFixed){
										obj[keysFixed[j]] = o[i][keys[j]];
									}
									tempResult.push(obj);
								}
							}
							
							query.From = tempResult;
							if(query.hasOwnProperty("Join")){
								delete query.Join;
							}
							if(query.hasOwnProperty("On")){
								delete query.On;
							}
							if(query.hasOwnProperty("Using")){
								delete query.Using;
							}
							if(query.hasOwnProperty("NaturalJoin")){
								delete query.NaturalJoin;
							}
							if(query.hasOwnProperty("LeftJoin")){
								delete query.LeftJoin;
							}
							if(query.hasOwnProperty("RightJoin")){
								delete query.RightJoin;
							}
							if(query.hasOwnProperty("FullJoin")){
								delete query.FullJoin;
							}
							if(query.hasOwnProperty("CrossJoin")){
								delete query.CrossJoin;
							}
						}
						else{
							//console.log("finaltemp\n"+JSON.stringify(tempQuery));
							var q = Object.keys(query);
							for(var i in tempQuery){
								if(q.indexOf(i) == -1){
									query[i] = tempQuery[i];
								}
							}
						}
						//console.log("FINAL QUERY \n"+JSON.stringify(query));
					}
					break;
					
					
					
				//pattern: [column, =<>AND/OR... , literal/column]
				//multiple: [column, =<>AND/OR..., [pattern]]	
				case "where":
					//console.log("first where "+JSON.stringify(dbselect[keys[i]]));

					var whereFunc = buildSQLWhereFunction(dbselect[keys[i]],"");
					//console.log(whereFunc);
					
					whereFuncArr.push(whereFunc);
					
					//query.Where = new Function("return /^V.*$/.test('V%')");
					query.Where = new Function("return "+whereFunc);
					
					break;
				
				//also contains 'having'
				case "group_by":
					//0: 'group', 1: 'by', 2: first table.column, 3: other table.column, 4: 'having'
					var gp = dbselect[keys[i]];
					
					var col = [];
					
					//first column
					var c1 = gp[2][1][0].column;
					if(gp[2][1][0].hasOwnProperty("table")){
						var t = gp[2][1][0].table;
						col.push(t+'_'+c1);
					}
					else{
						col.push(c1);
					}
					

					//other columns
					for(var i in gp[3]){
						var c = gp[3][i][2][1][0].column;
						
						if(gp[3][i][2][1][0].hasOwnProperty("table")){
							var t = gp[3][i][2][1][0].table;
							col.push(t+"_"+c);
						}
						else{
							col.push(c);
						}
					}
					
					
					//console.log("group by: "+col);
					query.GroupBy = col;
					
					var having = gp[4];
					if(having != null){
						var t = "",c,l,op,agg = "";
						c = having[1][0].column;
						l = having[1][2].literal;
						op = having[1][1];
						
						if(having[1][0].hasOwnProperty("table")){
							t = having[1][0].table+'_';
						}
						if(having[1][0].hasOwnProperty("agg")){
							agg = having[1][0].agg+'_';
						}
						
						var havingFunc = agg+t+c+op+l;
					//	console.log("having: "+havingFunc);
						query.Having = new Function("return this."+havingFunc);
					}
					
					
					break;
				}
				
				
			}
			
			for(var i in dbkeys){
				switch(dbkeys[i]){
					
				case "order_by":
					var order = sql[0][dbkeys[i]];
					order = flatten(order);
					orderBy = [];
					
					for(var j in order){
						if(order[j] == null){
							continue;
						}

						if(order[j] != null && order[j] instanceof Object){
							if(order[j].hasOwnProperty("table")){
								orderBy.push(order[j]['table']+'_'+order[j]['column']);
							}
							else{
								orderBy.push(order[j]['column']);
							}
							
						}
						else if(order[j].toLowerCase() == "asc"){
							orderBy.push("|asc|");
						}
						else if(order[j].toLowerCase() == "desc"){
							orderBy.push("|desc|");
						}
					}
					//console.log("ordering: "+orderBy);
					query.OrderBy = orderBy;
					break;
					
				case "limit":
					query.Limit = sql[0][dbkeys[i]][1]['literal'][0].join("");
					break;
				}
			}
			
			//console.log(query);
			//console.log(JSON.stringify(query));
			
			if(whereFuncArr.length > 0){
				var whereFull = whereFuncArr.join("&&");
				query.Where = new Function("return "+whereFull);
				//console.log("wherefull "+whereFull);
			}
			
			return query;
		}
		
				
		function isJSON(data){
			try { JSON.parse(data); return true;}
			catch(e) {return false;}
		}
		
		//parsing of on/using for joins is somewhat strange
		function fixJoinParse(o){
			o = flatten(o);
			for(var i in o){
				if(o[i] == ','){
					o.splice(i,1);
				}
			}
			return o;
		};
		
		//fixes table naming for multiple joins (adding 'temp' to basetable)
		function fixMultiJoinConstraint(o,jp){
			//copy of both tables to join
			var a = JSON.parse(JSON.stringify(o[0])); 
			var b = JSON.parse(JSON.stringify(o[2]));
			
			if(a.table == jp){
				o[2].table = "ätemp";
				o[2].column = b.table+"_"+b.column;
			}
			else if(b.table == jp){
				o[0].table = "ätemp";
				o[0].column = a.table+"_"+a.column;
			}
			else{
				console.log("MultiJoinConstraint error");
			}
			
			return o;
		}
		
		//fix possible differences between sql(ike) and javascript, or just make it lowercase
		var fixOperator = function(op){
			var o = "";
			
			if(op instanceof Array){
				o = op[1];
			}
			else{
				o = op;
			}


			switch(o.toLowerCase().trim()){ 
			case '=':
				return '==';
				break;
				
			case 'and':
				return '&&';
				break;
				
			case 'or':
				return '||';
				break;
				
			case 'like':
				return 'like';
				break;
				
			case 'between':
				return 'between';
				break;
				
			case 'in':
				return 'in';
				break;
			}
			
			
			return op;
		};
		
		//create sql-like regular expression for wildcards
		RegExp.like = function (text) {
			return new RegExp("^"+(text.replace(/%/g, ".*").replace(/_/g, "."))+"$"); 
		};
		
		function getRegExp(pattern){
			var lit = pattern.slice(); //copy (just in case)
			lit = lit.slice(1,-1);  //get rid of quotes
			
			return RegExp.like(lit);
		}
		
		//assigns the join operation to the correct variable
		function getJoin(op,query,t2,t2Name){

			if(op == "JOIN"){ //implicit join (with where condition)
				if(jQuery.isEmptyObject(query)){
					query.From = {};
					query.From[t2Name] = t2;
				}
				else{
					query.From[t2Name] = t2;
				}
				
				return query;
			}
			
			switch(op.toLowerCase().trim()){
			case "join":
				query.Join = {};
				query.Join[t2Name] = t2;
				break;
				
			case "natural join": 
				query.NaturalJoin = {};
				query.NaturalJoin[t2Name] = t2;
				break;
				
			case "left join":
			case "left outer join":
				query.LeftJoin = {};
				query.LeftJoin[t2Name] = t2;
				break;
				
			case "right join":
			case "right outer join":
				query.RightJoin = {};
				query.RightJoin[t2Name] = t2;
				break;
				
			case "full join":
			case "full outer join":
				query.FullJoin = {};
				query.FullJoin[t2Name] = t2;
				break;
			
			case "cross join":
				query.CrossJoin = {};
				query.CrossJoin[t2Name] = t2;
				break;
			}
			
			return query;
		};
		
		
		//extracts literal and formats literal of query
		var getLiteral = function(o){
			var literal;
			
			//string
			if(o['literal'] instanceof Array){
				literal = o['literal'][1];
				literal = literal.join("");
				literal = "'"+literal+"'";
			}
			else{ //number
				literal = o['literal'];
			}
			
			return literal;
		};
		
		//recursively constructs 'where' function of query
		//assumption: multiple conditions are combined with AND, OR
		var buildSQLWhereFunction = function(o,q){
			var query = q;
			var not = false;
			var inBool = false;
			//console.log(JSON.stringify(o));
			//indexes of simple case
			var indexV1 = 0;
			var indexV2 = 2;
			var indexV3 = null; //only needed for 'between'
			var indexOp = 1;
						
			//where x NOT IN (...)
			if(o.length == 4){
				if(o[1] != null){
					not = true;
				}
				
				inBool = true;
				indexOp = 2;
				indexV2 = 3;
				
//				var temp = o[indexV2][1];
//				o[indexV2] = temp;
			}
			
			//where x NOT LIKE "..."
			else if(o.length == 5){
				not = true;
				indexOp = 2;
				indexV2 = 3;
			}
			
			//where x (NOT) BETWEEN ... AND ...
			else if(o.length == 6){
				if(o[1] != null){
					not = true;
				}
				
				indexOp = 2;
				indexV2 = 3;
				indexV3 = 5;
			}
			
			//multiple where conditions/operators
			if(o[indexV2] instanceof Array && !inBool){
				var table = "";
				var table2 = "";
				var col = "";
				var col2 = "";
				var literal = "";
				//console.log(JSON.stringify(o[indexOp]));
				//console.log(JSON.stringify(o[indexV2][1]));
				var op = fixOperator(o[indexOp]);
				var op2 = fixOperator(o[indexV2][1]);
				

				if(o[indexV1].hasOwnProperty("column") && o[indexV2][0].hasOwnProperty("column")){
					col = o[indexV1]['column'];
					if(o[indexV1].hasOwnProperty("table")){
						table = o[indexV1]['table']+".";
					}
					
					col2 = o[indexV2][0]['column'];
					if(o[indexV2][0].hasOwnProperty("table")){
						table2 = o[indexV2][0]['table']+".";
					}
					
				}
				
				if(o[indexV1].hasOwnProperty("column") && o[indexV2][0].hasOwnProperty("literal")){
					col = o[indexV1]['column'];
					literal = getLiteral(o[indexV2][0]);
					if(literal instanceof Array){
						literal = flatten(literal).join("");
					}
					if(o[indexV1].hasOwnProperty("table")){
						table = o[indexV1]['table']+".";
					}
				}
				
				else if(o[indexV1].hasOwnProperty("literal")){
					literal = getLiteral(o[indexV1]);
					if(literal instanceof Array){
						literal = flatten(literal).join("");
					}
					col = o[indexV2][0]['column'];
					if(o[indexV2].hasOwnProperty("table")){
						table = o[indexV2]['table']+".";
					}
				}
				
				
				if(col2 != ""){
					query += "this."+table+col+op+"this."+table2+col2+" "+op2;
				}
				else{
					if(op == 'like'){
						var regex = getRegExp(literal);
						//console.log("like regex: "+regex);
						
						if(not){
							query += '!'+regex+'.test(this.'+table+col+') '+op2;
						}
						else{
							query += regex+'.test(this.'+table+col+') '+op2;
						}		
					}
					
					else if(op == 'between'){
						var literal2 = getLiteral(o[indexV3]);
						if(literal2 instanceof Array){
							literal2 = flatten(literal).join("");
						}
						if(not){
							query += "!(this."+table+col+">"+literal+" && this."+table+col+"<"+literal2+") "+op2;
						}
						else{
							query += "this."+table+col+">"+literal+" && this."+table+col+"<"+literal2+" "+op2;
						}
					}
					
					else{
						query += "this."+table+col+op+literal+" "+op2;
					}
					
				}

				//console.log("query1: "+query);
				return buildSQLWhereFunction(o[indexV2][2],query);
				
				
			}
			
			else if(inBool){
				var col = o[indexV1]['column'];
				var table = "";
				
				if(o[indexV1].hasOwnProperty("table")){
					table = o[indexV1]['table']+".";
				}
				
				var inValues = [];
				var arr = flatten(o[3][1]);

				for(var i in arr){
					if(arr[i].hasOwnProperty("literal")){
						inValues.push(getLiteral(arr[i]));
					}
				}
			//	console.log("in values: "+inValues);
				var inValuesString = inValues.toString();
				
				//alert(JSON.parse("[" + inValuesString + "]"));
				//query += "alert(JSON.parse('['"+inValuesString+"']'.indexOf(this."+table+col+") != -1)";
				return query;
			}
			
			//simple case, one where condition, both sides are columns
			else if(o[indexV1].hasOwnProperty("column") && o[indexV2].hasOwnProperty("column")){
				var col = o[indexV1]['column'];
				var col2 = o[indexV2]['column'];
				var table = "";
				var table2 = "";
				
				if(o[indexV1].hasOwnProperty("table")){
					table = o[indexV1]['table']+".";
				}
				
				if(o[indexV2].hasOwnProperty("table")){
					table2 = o[indexV2]['table']+".";
				}
				
				var op = fixOperator(o[indexOp]);
				
				query += "this."+table+col+op+"this."+table2+col2;
			//	console.log("query2.5: "+query);
				
				return query;
			}
			
			//covers simple case with only one where-condition/operator
			else if(o[indexV2].hasOwnProperty("literal")){
				var literal = getLiteral(o[indexV2]);
				if(literal instanceof Array){
					literal = flatten(literal).join("");
				}
				
				var col = o[indexV1]['column'];
				var table = "";
				
				if(o[indexV1].hasOwnProperty("table")){
					table = o[indexV1]['table']+".";
				}
				
				var op = "";
				
				if(o[indexOp] instanceof Array){
					
					op = fixOperator(flatten(o[indexOp]));
				}
				else{
					op = fixOperator(o[indexOp]);
				}

				
				if(op == 'like'){
					var regex = getRegExp(literal);
				//	console.log("like regex: "+regex);
					
					if(not){
						query += '!'+regex+'.test(this.'+table+col+')';
					}
					else{
						query += regex+'.test(this.'+table+col+')';
					}
					
				}
				
				else if(op == 'in'){
					
				}
				
				else if(op == 'between'){
					var literal2 = getLiteral(o[indexV3]);
					if(literal2 instanceof Array){
						literal2 = flatten(literal).join("");
					}
					if(not){
						query += "!(this."+table+col+">"+literal+" && this."+table+col+"<"+literal2+")";
					}
					else{
						query += "this."+table+col+">"+literal+" && this."+table+col+"<"+literal2;
					}
				}
				
				else{
					query += "this."+table+col+op+literal;
				}
				
				
				//console.log("query2: "+query);
				return query;
			}
			
			//simple case again, just with literal and column in reverse order
			else if(o[indexV1].hasOwnProperty("literal")){
				var literal = getLiteral(o[indexV1]);
				if(literal instanceof Array){
					literal = flatten(literal).join("");
				}
				var table = o[indexV2]['table']+".";
				var col = o[indexV2]['column'];
				var op = fixOperator(o[indexOp]);
				
				
				if(op == 'like'){
					var regex = RegExp.like(lit);
				//	console.log("like regex: "+regex);
					
					if(not){
						query += '!'+regex+'.test(this.'+table+col+')';
					}
					else{
						query += regex+'.test(this.'+table+col+')';
					}
					
				}
				
				else if(op == 'between'){
					var literal2 = getLiteral(o[indexV3]);
					if(not){
						query += "!(this."+table+col+">"+literal+" && this."+table+col+"<"+literal2+")";
					}
					else{
						query += "this."+table+col+">"+literal+" && this."+table+col+"<"+literal2;
					}
				}
				
				else{
					query += "this."+table+col+op+literal;
				}
				//console.log("query3: "+query);
				return query;
			}	
		};
		
		function flatten(arr) {
			  return arr.reduce(function (flat, toFlatten) {
			    return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
			  }, []);
			}
		
		

		// display of dropdown-button
		$scope.button = "Select Database";

		// selected db
		$scope.selected = "";
		
	});

	/*
	 * Custom directive for database selection
	 */
	app.directive('selectDatabase', function() {
		return {
			restrict : 'E',
			templateUrl : "select-database.html"
		};
	});

	/*
	 * Custom directive for db-display
	 */
	app.directive('displayDatabase', function() {
		return {
			restrict : 'E',
			templateUrl : "display-database.html"
		};
	});

	/*
	 * Custom directive for input form
	 */
	app.directive('inputForm', function() {
		return {
			restrict : 'E',
			templateUrl : "input-form.html"
		};
	});
	
	app.directive('displaySolution', function() {
		return {
			restrict : 'E',
			templateUrl : "display-solution.html"
		};
	});

})();
},{"./parser/gistparser.js":1,"./parser/sqlparser.js":2}]},{},[3,2,1]);
